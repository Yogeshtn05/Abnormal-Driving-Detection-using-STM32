
Abnormal_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006114  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007458  080062a4  080062a4  000072a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6fc  0800d6fc  0000f078  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6fc  0800d6fc  0000e6fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d704  0800d704  0000f078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d704  0800d704  0000e704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d708  0800d708  0000e708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800d70c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000250c  20000078  0800d784  0000f078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002584  0800d784  0000f584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3f9  00000000  00000000  0000f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000208f  00000000  00000000  0001d4a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  0001f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a10  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211ae  00000000  00000000  00020c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001049d  00000000  00000000  00041df6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3eb7  00000000  00000000  00052293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  0011614a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040ac  00000000  00000000  001161d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0011a280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800628c 	.word	0x0800628c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800628c 	.word	0x0800628c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <MPU6050_Init>:
int16_t gyro_data[3];

float Ax, Ay, Az, Gx, Gy, Gz;

void MPU6050_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af04      	add	r7, sp, #16
  uint8_t data;

  // Wake up MPU6050
  data = 0x00;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, MPU6050_PWR_MGMT_1, 1, &data, 1, HAL_MAX_DELAY);
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2301      	movs	r3, #1
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	226b      	movs	r2, #107	@ 0x6b
 8000dd8:	21d0      	movs	r1, #208	@ 0xd0
 8000dda:	4803      	ldr	r0, [pc, #12]	@ (8000de8 <MPU6050_Init+0x2c>)
 8000ddc:	f001 f81c 	bl	8001e18 <HAL_I2C_Mem_Write>
}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	200000a8 	.word	0x200000a8

08000dec <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(int16_t* accel_data)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b088      	sub	sp, #32
 8000df0:	af04      	add	r7, sp, #16
 8000df2:	6078      	str	r0, [r7, #4]
  uint8_t buffer[6];

  HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, MPU6050_ACCEL_XOUT_H, 1, buffer, 6, HAL_MAX_DELAY);
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	223b      	movs	r2, #59	@ 0x3b
 8000e08:	21d0      	movs	r1, #208	@ 0xd0
 8000e0a:	4831      	ldr	r0, [pc, #196]	@ (8000ed0 <MPU6050_Read_Accel+0xe4>)
 8000e0c:	f001 f918 	bl	8002040 <HAL_I2C_Mem_Read>

  accel_data[0] = (int16_t)((buffer[0] << 8) | buffer[1]);
 8000e10:	7a3b      	ldrb	r3, [r7, #8]
 8000e12:	021b      	lsls	r3, r3, #8
 8000e14:	b21a      	sxth	r2, r3
 8000e16:	7a7b      	ldrb	r3, [r7, #9]
 8000e18:	b21b      	sxth	r3, r3
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	801a      	strh	r2, [r3, #0]
  accel_data[1] = (int16_t)((buffer[2] << 8) | buffer[3]);
 8000e22:	7abb      	ldrb	r3, [r7, #10]
 8000e24:	021b      	lsls	r3, r3, #8
 8000e26:	b219      	sxth	r1, r3
 8000e28:	7afb      	ldrb	r3, [r7, #11]
 8000e2a:	b21a      	sxth	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	3302      	adds	r3, #2
 8000e30:	430a      	orrs	r2, r1
 8000e32:	b212      	sxth	r2, r2
 8000e34:	801a      	strh	r2, [r3, #0]
  accel_data[2] = (int16_t)((buffer[4] << 8) | buffer[5]);
 8000e36:	7b3b      	ldrb	r3, [r7, #12]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	b219      	sxth	r1, r3
 8000e3c:	7b7b      	ldrb	r3, [r7, #13]
 8000e3e:	b21a      	sxth	r2, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3304      	adds	r3, #4
 8000e44:	430a      	orrs	r2, r1
 8000e46:	b212      	sxth	r2, r2
 8000e48:	801a      	strh	r2, [r3, #0]
       0                ±2g                16384 LSB/g
       1                ±4g                 8192 LSB/g
       2                ±8g                 4096 LSB/g
       3                ±16g                2048 LSB/g */

    Ax = accel_data[0]/16384.0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fb6f 	bl	8000534 <__aeabi_i2d>
 8000e56:	f04f 0200 	mov.w	r2, #0
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed4 <MPU6050_Read_Accel+0xe8>)
 8000e5c:	f7ff fcfe 	bl	800085c <__aeabi_ddiv>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f7ff fde0 	bl	8000a2c <__aeabi_d2f>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	@ (8000ed8 <MPU6050_Read_Accel+0xec>)
 8000e70:	6013      	str	r3, [r2, #0]
  	Ay = accel_data[1]/16384.0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3302      	adds	r3, #2
 8000e76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff fb5a 	bl	8000534 <__aeabi_i2d>
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	4b13      	ldr	r3, [pc, #76]	@ (8000ed4 <MPU6050_Read_Accel+0xe8>)
 8000e86:	f7ff fce9 	bl	800085c <__aeabi_ddiv>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	f7ff fdcb 	bl	8000a2c <__aeabi_d2f>
 8000e96:	4603      	mov	r3, r0
 8000e98:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <MPU6050_Read_Accel+0xf0>)
 8000e9a:	6013      	str	r3, [r2, #0]
  	Az = accel_data[2]/16384.0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3304      	adds	r3, #4
 8000ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fb45 	bl	8000534 <__aeabi_i2d>
 8000eaa:	f04f 0200 	mov.w	r2, #0
 8000eae:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <MPU6050_Read_Accel+0xe8>)
 8000eb0:	f7ff fcd4 	bl	800085c <__aeabi_ddiv>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fdb6 	bl	8000a2c <__aeabi_d2f>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a07      	ldr	r2, [pc, #28]	@ (8000ee0 <MPU6050_Read_Accel+0xf4>)
 8000ec4:	6013      	str	r3, [r2, #0]
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200000a8 	.word	0x200000a8
 8000ed4:	40d00000 	.word	0x40d00000
 8000ed8:	2000009c 	.word	0x2000009c
 8000edc:	200000a0 	.word	0x200000a0
 8000ee0:	200000a4 	.word	0x200000a4

08000ee4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eea:	f000 fbf8 	bl	80016de <HAL_Init>

  /* USER CODE BEGIN Init */
  enum neai_state error_code = neai_classification_init(knowledge);
 8000eee:	4812      	ldr	r0, [pc, #72]	@ (8000f38 <main+0x54>)
 8000ef0:	f003 fbe0 	bl	80046b4 <neai_classification_init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	71fb      	strb	r3, [r7, #7]
     	if (error_code != NEAI_OK) {
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d008      	beq.n	8000f10 <main+0x2c>
     		/* This happens if the knowledge does not correspond to the library or if the library works into a not supported board. */
     	printf("Knowledge initialization ERROR");
 8000efe:	480f      	ldr	r0, [pc, #60]	@ (8000f3c <main+0x58>)
 8000f00:	f004 f91e 	bl	8005140 <iprintf>
     	printf("%d", error_code);
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	4619      	mov	r1, r3
 8000f08:	480d      	ldr	r0, [pc, #52]	@ (8000f40 <main+0x5c>)
 8000f0a:	f004 f919 	bl	8005140 <iprintf>
 8000f0e:	e002      	b.n	8000f16 <main+0x32>
     	}
     	else
     	{
     		printf("Knowledge initialization done");
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <main+0x60>)
 8000f12:	f004 f915 	bl	8005140 <iprintf>
     	}
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f16:	f000 f817 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f1a:	f000 f8e7 	bl	80010ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1e:	f000 f8b5 	bl	800108c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f22:	f000 f873 	bl	800100c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
MPU6050_Init();
 8000f26:	f7ff ff49 	bl	8000dbc <MPU6050_Init>
HAL_Delay(1000);
 8000f2a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2e:	f000 fc4b 	bl	80017c8 <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Inference();
 8000f32:	f000 f977 	bl	8001224 <Inference>
 8000f36:	e7fc      	b.n	8000f32 <main+0x4e>
 8000f38:	08006338 	.word	0x08006338
 8000f3c:	080062e0 	.word	0x080062e0
 8000f40:	08006300 	.word	0x08006300
 8000f44:	08006304 	.word	0x08006304

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	@ 0x58
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2244      	movs	r2, #68	@ 0x44
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 fa42 	bl	80053e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f6e:	f001 fcf9 	bl	8002964 <HAL_PWREx_ControlVoltageScaling>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f78:	f000 f9b8 	bl	80012ec <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f7c:	f001 fcd4 	bl	8002928 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <SystemClock_Config+0xc0>)
 8000f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8000f86:	4a20      	ldr	r2, [pc, #128]	@ (8001008 <SystemClock_Config+0xc0>)
 8000f88:	f023 0318 	bic.w	r3, r3, #24
 8000f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000f90:	2314      	movs	r3, #20
 8000f92:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000f94:	2301      	movs	r3, #1
 8000f96:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000fa0:	2360      	movs	r3, #96	@ 0x60
 8000fa2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000fac:	2301      	movs	r3, #1
 8000fae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000fb0:	2310      	movs	r3, #16
 8000fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000fb4:	2307      	movs	r3, #7
 8000fb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fc0:	f107 0314 	add.w	r3, r7, #20
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f001 fd23 	bl	8002a10 <HAL_RCC_OscConfig>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000fd0:	f000 f98c 	bl	80012ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd4:	230f      	movs	r3, #15
 8000fd6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd8:	2303      	movs	r3, #3
 8000fda:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2101      	movs	r1, #1
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 f923 	bl	8003238 <HAL_RCC_ClockConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ff8:	f000 f978 	bl	80012ec <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ffc:	f002 fd36 	bl	8003a6c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001000:	bf00      	nop
 8001002:	3758      	adds	r7, #88	@ 0x58
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40021000 	.word	0x40021000

0800100c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001010:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001012:	4a1c      	ldr	r2, [pc, #112]	@ (8001084 <MX_I2C1_Init+0x78>)
 8001014:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00B07CB4;
 8001016:	4b1a      	ldr	r3, [pc, #104]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001018:	4a1b      	ldr	r2, [pc, #108]	@ (8001088 <MX_I2C1_Init+0x7c>)
 800101a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800101c:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_I2C1_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001022:	4b17      	ldr	r3, [pc, #92]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001024:	2201      	movs	r2, #1
 8001026:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001028:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_I2C1_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800102e:	4b14      	ldr	r3, [pc, #80]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001034:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800103a:	4b11      	ldr	r3, [pc, #68]	@ (8001080 <MX_I2C1_Init+0x74>)
 800103c:	2200      	movs	r2, #0
 800103e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001040:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001046:	480e      	ldr	r0, [pc, #56]	@ (8001080 <MX_I2C1_Init+0x74>)
 8001048:	f000 fe4a 	bl	8001ce0 <HAL_I2C_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001052:	f000 f94b 	bl	80012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001056:	2100      	movs	r1, #0
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <MX_I2C1_Init+0x74>)
 800105a:	f001 fbcd 	bl	80027f8 <HAL_I2CEx_ConfigAnalogFilter>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001064:	f000 f942 	bl	80012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001068:	2100      	movs	r1, #0
 800106a:	4805      	ldr	r0, [pc, #20]	@ (8001080 <MX_I2C1_Init+0x74>)
 800106c:	f001 fc0f 	bl	800288e <HAL_I2CEx_ConfigDigitalFilter>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001076:	f000 f939 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000a8 	.word	0x200000a8
 8001084:	40005400 	.word	0x40005400
 8001088:	00b07cb4 	.word	0x00b07cb4

0800108c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001090:	4b14      	ldr	r3, [pc, #80]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 8001092:	4a15      	ldr	r2, [pc, #84]	@ (80010e8 <MX_USART2_UART_Init+0x5c>)
 8001094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001096:	4b13      	ldr	r3, [pc, #76]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 8001098:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800109c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800109e:	4b11      	ldr	r3, [pc, #68]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010aa:	4b0e      	ldr	r3, [pc, #56]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010b0:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010b2:	220c      	movs	r2, #12
 80010b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010bc:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010be:	2200      	movs	r2, #0
 80010c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010c2:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c8:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010ce:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <MX_USART2_UART_Init+0x58>)
 80010d0:	f002 fdce 	bl	8003c70 <HAL_UART_Init>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80010da:	f000 f907 	bl	80012ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000fc 	.word	0x200000fc
 80010e8:	40004400 	.word	0x40004400

080010ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]
 80010fe:	60da      	str	r2, [r3, #12]
 8001100:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001102:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <MX_GPIO_Init+0x90>)
 8001104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001106:	4a1d      	ldr	r2, [pc, #116]	@ (800117c <MX_GPIO_Init+0x90>)
 8001108:	f043 0304 	orr.w	r3, r3, #4
 800110c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800110e:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <MX_GPIO_Init+0x90>)
 8001110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001112:	f003 0304 	and.w	r3, r3, #4
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	4b18      	ldr	r3, [pc, #96]	@ (800117c <MX_GPIO_Init+0x90>)
 800111c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800111e:	4a17      	ldr	r2, [pc, #92]	@ (800117c <MX_GPIO_Init+0x90>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001126:	4b15      	ldr	r3, [pc, #84]	@ (800117c <MX_GPIO_Init+0x90>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b12      	ldr	r3, [pc, #72]	@ (800117c <MX_GPIO_Init+0x90>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001136:	4a11      	ldr	r2, [pc, #68]	@ (800117c <MX_GPIO_Init+0x90>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800113e:	4b0f      	ldr	r3, [pc, #60]	@ (800117c <MX_GPIO_Init+0x90>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800114a:	2200      	movs	r2, #0
 800114c:	2108      	movs	r1, #8
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <MX_GPIO_Init+0x94>)
 8001150:	f000 fdae 	bl	8001cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = ALERT_PIN;
 8001154:	2320      	movs	r3, #32
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001158:	2301      	movs	r3, #1
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ALERT_PORT, &GPIO_InitStruct);
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4619      	mov	r1, r3
 800116a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800116e:	f000 fc35 	bl	80019dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40021000 	.word	0x40021000
 8001180:	48000400 	.word	0x48000400

08001184 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800118c:	1d39      	adds	r1, r7, #4
 800118e:	f04f 33ff 	mov.w	r3, #4294967295
 8001192:	2201      	movs	r2, #1
 8001194:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <__io_putchar+0x20>)
 8001196:	f002 fdb9 	bl	8003d0c <HAL_UART_Transmit>
	return ch;
 800119a:	687b      	ldr	r3, [r7, #4]

}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200000fc 	.word	0x200000fc

080011a8 <fill_mpu_buffer>:
void fill_mpu_buffer()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
	for(int i=0; i<DATA_INPUT_USER; i++)
 80011ae:	2300      	movs	r3, #0
 80011b0:	607b      	str	r3, [r7, #4]
 80011b2:	e025      	b.n	8001200 <fill_mpu_buffer+0x58>
	{
		MPU6050_Read_Accel(accel_data);
 80011b4:	4816      	ldr	r0, [pc, #88]	@ (8001210 <fill_mpu_buffer+0x68>)
 80011b6:	f7ff fe19 	bl	8000dec <MPU6050_Read_Accel>
		mpu_buffer[AXIS_NUMBER * i] = Ax;
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	005b      	lsls	r3, r3, #1
 80011c0:	4413      	add	r3, r2
 80011c2:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <fill_mpu_buffer+0x6c>)
 80011c4:	6812      	ldr	r2, [r2, #0]
 80011c6:	4914      	ldr	r1, [pc, #80]	@ (8001218 <fill_mpu_buffer+0x70>)
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	440b      	add	r3, r1
 80011cc:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i+1] = Ay;
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4613      	mov	r3, r2
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	4413      	add	r3, r2
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a10      	ldr	r2, [pc, #64]	@ (800121c <fill_mpu_buffer+0x74>)
 80011da:	6812      	ldr	r2, [r2, #0]
 80011dc:	490e      	ldr	r1, [pc, #56]	@ (8001218 <fill_mpu_buffer+0x70>)
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	601a      	str	r2, [r3, #0]
		mpu_buffer[AXIS_NUMBER * i+2] = Az;
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	3302      	adds	r3, #2
 80011ee:	4a0c      	ldr	r2, [pc, #48]	@ (8001220 <fill_mpu_buffer+0x78>)
 80011f0:	6812      	ldr	r2, [r2, #0]
 80011f2:	4909      	ldr	r1, [pc, #36]	@ (8001218 <fill_mpu_buffer+0x70>)
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	440b      	add	r3, r1
 80011f8:	601a      	str	r2, [r3, #0]
	for(int i=0; i<DATA_INPUT_USER; i++)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3301      	adds	r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2bff      	cmp	r3, #255	@ 0xff
 8001204:	ddd6      	ble.n	80011b4 <fill_mpu_buffer+0xc>
	}
}
 8001206:	bf00      	nop
 8001208:	bf00      	nop
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000094 	.word	0x20000094
 8001214:	2000009c 	.word	0x2000009c
 8001218:	20000184 	.word	0x20000184
 800121c:	200000a0 	.word	0x200000a0
 8001220:	200000a4 	.word	0x200000a4

08001224 <Inference>:
void Inference(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	uint16_t i, id_class_t0, id_class_tn;
	fill_mpu_buffer();
 800122a:	f7ff ffbd 	bl	80011a8 <fill_mpu_buffer>
	neai_classification(mpu_buffer, output_class_buffer, &id_class_t0);
 800122e:	1d3b      	adds	r3, r7, #4
 8001230:	461a      	mov	r2, r3
 8001232:	4928      	ldr	r1, [pc, #160]	@ (80012d4 <Inference+0xb0>)
 8001234:	4828      	ldr	r0, [pc, #160]	@ (80012d8 <Inference+0xb4>)
 8001236:	f003 fb55 	bl	80048e4 <neai_classification>
	for(i=0; i<CONFIRMATIONS_NB-1; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	80fb      	strh	r3, [r7, #6]
 800123e:	e040      	b.n	80012c2 <Inference+0x9e>
	{
		fill_mpu_buffer();
 8001240:	f7ff ffb2 	bl	80011a8 <fill_mpu_buffer>
		neai_classification(mpu_buffer, output_class_buffer, &id_class_tn);
 8001244:	1cbb      	adds	r3, r7, #2
 8001246:	461a      	mov	r2, r3
 8001248:	4922      	ldr	r1, [pc, #136]	@ (80012d4 <Inference+0xb0>)
 800124a:	4823      	ldr	r0, [pc, #140]	@ (80012d8 <Inference+0xb4>)
 800124c:	f003 fb4a 	bl	80048e4 <neai_classification>
		if(id_class_t0 != id_class_tn)
 8001250:	88ba      	ldrh	r2, [r7, #4]
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	429a      	cmp	r2, r3
 8001256:	d138      	bne.n	80012ca <Inference+0xa6>
		{
			break;
		}
		if(id_class_t0 == id_class_tn)
 8001258:	88ba      	ldrh	r2, [r7, #4]
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	429a      	cmp	r2, r3
 800125e:	d127      	bne.n	80012b0 <Inference+0x8c>
		{
			printf("Detected Class:");
 8001260:	481e      	ldr	r0, [pc, #120]	@ (80012dc <Inference+0xb8>)
 8001262:	f003 ff6d 	bl	8005140 <iprintf>
			printf(id2class[id_class_t0]);
 8001266:	88bb      	ldrh	r3, [r7, #4]
 8001268:	461a      	mov	r2, r3
 800126a:	4b1d      	ldr	r3, [pc, #116]	@ (80012e0 <Inference+0xbc>)
 800126c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001270:	4618      	mov	r0, r3
 8001272:	f003 ff65 	bl	8005140 <iprintf>
			if(strcmp("abnormal_driving",id2class[id_class_t0])==0)
 8001276:	88bb      	ldrh	r3, [r7, #4]
 8001278:	461a      	mov	r2, r3
 800127a:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <Inference+0xbc>)
 800127c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001280:	4619      	mov	r1, r3
 8001282:	4818      	ldr	r0, [pc, #96]	@ (80012e4 <Inference+0xc0>)
 8001284:	f7fe ffa4 	bl	80001d0 <strcmp>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d106      	bne.n	800129c <Inference+0x78>
			{
				HAL_GPIO_WritePin(ALERT_PORT, ALERT_PIN, GPIO_PIN_SET);
 800128e:	2201      	movs	r2, #1
 8001290:	2120      	movs	r1, #32
 8001292:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001296:	f000 fd0b 	bl	8001cb0 <HAL_GPIO_WritePin>
 800129a:	e005      	b.n	80012a8 <Inference+0x84>
			}
			else
			{
				HAL_GPIO_WritePin(ALERT_PORT, ALERT_PIN, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	2120      	movs	r1, #32
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f000 fd04 	bl	8001cb0 <HAL_GPIO_WritePin>
			}
			printf("\r\n");
 80012a8:	480f      	ldr	r0, [pc, #60]	@ (80012e8 <Inference+0xc4>)
 80012aa:	f003 ffb9 	bl	8005220 <puts>
 80012ae:	e005      	b.n	80012bc <Inference+0x98>

		}
		else
		{
			printf("?");
 80012b0:	203f      	movs	r0, #63	@ 0x3f
 80012b2:	f003 ff57 	bl	8005164 <putchar>
			printf("\r\n");
 80012b6:	480c      	ldr	r0, [pc, #48]	@ (80012e8 <Inference+0xc4>)
 80012b8:	f003 ffb2 	bl	8005220 <puts>
	for(i=0; i<CONFIRMATIONS_NB-1; i++)
 80012bc:	88fb      	ldrh	r3, [r7, #6]
 80012be:	3301      	adds	r3, #1
 80012c0:	80fb      	strh	r3, [r7, #6]
 80012c2:	88fb      	ldrh	r3, [r7, #6]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d9bb      	bls.n	8001240 <Inference+0x1c>
		}
	}
}
 80012c8:	e000      	b.n	80012cc <Inference+0xa8>
			break;
 80012ca:	bf00      	nop
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000d84 	.word	0x20000d84
 80012d8:	20000184 	.word	0x20000184
 80012dc:	08006324 	.word	0x08006324
 80012e0:	20000000 	.word	0x20000000
 80012e4:	080062bc 	.word	0x080062bc
 80012e8:	08006334 	.word	0x08006334

080012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f0:	b672      	cpsid	i
}
 80012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <Error_Handler+0x8>

080012f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <HAL_MspInit+0x44>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001302:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <HAL_MspInit+0x44>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6613      	str	r3, [r2, #96]	@ 0x60
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <HAL_MspInit+0x44>)
 800130c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_MspInit+0x44>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <HAL_MspInit+0x44>)
 800131c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001320:	6593      	str	r3, [r2, #88]	@ 0x58
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <HAL_MspInit+0x44>)
 8001324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800132a:	603b      	str	r3, [r7, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132e:	bf00      	nop
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b09e      	sub	sp, #120	@ 0x78
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001358:	f107 0310 	add.w	r3, r7, #16
 800135c:	2254      	movs	r2, #84	@ 0x54
 800135e:	2100      	movs	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f004 f83d 	bl	80053e0 <memset>
  if(hi2c->Instance==I2C1)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a1f      	ldr	r2, [pc, #124]	@ (80013e8 <HAL_I2C_MspInit+0xa8>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d137      	bne.n	80013e0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001370:	2340      	movs	r3, #64	@ 0x40
 8001372:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001374:	2300      	movs	r3, #0
 8001376:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f107 0310 	add.w	r3, r7, #16
 800137c:	4618      	mov	r0, r3
 800137e:	f002 f97f 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001388:	f7ff ffb0 	bl	80012ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <HAL_I2C_MspInit+0xac>)
 800138e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001390:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <HAL_I2C_MspInit+0xac>)
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001398:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <HAL_I2C_MspInit+0xac>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013a8:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013aa:	2312      	movs	r3, #18
 80013ac:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b6:	2304      	movs	r3, #4
 80013b8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013be:	4619      	mov	r1, r3
 80013c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013c4:	f000 fb0a 	bl	80019dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c8:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <HAL_I2C_MspInit+0xac>)
 80013ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013cc:	4a07      	ldr	r2, [pc, #28]	@ (80013ec <HAL_I2C_MspInit+0xac>)
 80013ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <HAL_I2C_MspInit+0xac>)
 80013d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013e0:	bf00      	nop
 80013e2:	3778      	adds	r7, #120	@ 0x78
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40021000 	.word	0x40021000

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b09e      	sub	sp, #120	@ 0x78
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2254      	movs	r2, #84	@ 0x54
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f003 ffe5 	bl	80053e0 <memset>
  if(huart->Instance==USART2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a28      	ldr	r2, [pc, #160]	@ (80014bc <HAL_UART_MspInit+0xcc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d148      	bne.n	80014b2 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001420:	2302      	movs	r3, #2
 8001422:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001424:	2300      	movs	r3, #0
 8001426:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f002 f927 	bl	8003680 <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001438:	f7ff ff58 	bl	80012ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800143c:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <HAL_UART_MspInit+0xd0>)
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	4a1f      	ldr	r2, [pc, #124]	@ (80014c0 <HAL_UART_MspInit+0xd0>)
 8001442:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001446:	6593      	str	r3, [r2, #88]	@ 0x58
 8001448:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <HAL_UART_MspInit+0xd0>)
 800144a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800144c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_UART_MspInit+0xd0>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001458:	4a19      	ldr	r2, [pc, #100]	@ (80014c0 <HAL_UART_MspInit+0xd0>)
 800145a:	f043 0301 	orr.w	r3, r3, #1
 800145e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_UART_MspInit+0xd0>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001464:	f003 0301 	and.w	r3, r3, #1
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800146c:	2304      	movs	r3, #4
 800146e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147c:	2307      	movs	r3, #7
 800147e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001480:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001484:	4619      	mov	r1, r3
 8001486:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800148a:	f000 faa7 	bl	80019dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800148e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001492:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001494:	2302      	movs	r3, #2
 8001496:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80014a0:	2303      	movs	r3, #3
 80014a2:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014ae:	f000 fa95 	bl	80019dc <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80014b2:	bf00      	nop
 80014b4:	3778      	adds	r7, #120	@ 0x78
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40004400 	.word	0x40004400
 80014c0:	40021000 	.word	0x40021000

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014e8:	bf00      	nop
 80014ea:	e7fd      	b.n	80014e8 <UsageFault_Handler+0x4>

080014ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151a:	f000 f935 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}

08001522 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e00a      	b.n	800154a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001534:	f3af 8000 	nop.w
 8001538:	4601      	mov	r1, r0
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	60ba      	str	r2, [r7, #8]
 8001540:	b2ca      	uxtb	r2, r1
 8001542:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3301      	adds	r3, #1
 8001548:	617b      	str	r3, [r7, #20]
 800154a:	697a      	ldr	r2, [r7, #20]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbf0      	blt.n	8001534 <_read+0x12>
  }

  return len;
 8001552:	687b      	ldr	r3, [r7, #4]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	e009      	b.n	8001582 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	60ba      	str	r2, [r7, #8]
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe04 	bl	8001184 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	3301      	adds	r3, #1
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	429a      	cmp	r2, r3
 8001588:	dbf1      	blt.n	800156e <_write+0x12>
  }
  return len;
 800158a:	687b      	ldr	r3, [r7, #4]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <_close>:

int _close(int file)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015bc:	605a      	str	r2, [r3, #4]
  return 0;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <_isatty>:

int _isatty(int file)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015d4:	2301      	movs	r3, #1
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015e2:	b480      	push	{r7}
 80015e4:	b085      	sub	sp, #20
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	60f8      	str	r0, [r7, #12]
 80015ea:	60b9      	str	r1, [r7, #8]
 80015ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3714      	adds	r7, #20
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b086      	sub	sp, #24
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001604:	4a14      	ldr	r2, [pc, #80]	@ (8001658 <_sbrk+0x5c>)
 8001606:	4b15      	ldr	r3, [pc, #84]	@ (800165c <_sbrk+0x60>)
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001610:	4b13      	ldr	r3, [pc, #76]	@ (8001660 <_sbrk+0x64>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001618:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <_sbrk+0x64>)
 800161a:	4a12      	ldr	r2, [pc, #72]	@ (8001664 <_sbrk+0x68>)
 800161c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161e:	4b10      	ldr	r3, [pc, #64]	@ (8001660 <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	429a      	cmp	r2, r3
 800162a:	d207      	bcs.n	800163c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800162c:	f003 ff26 	bl	800547c <__errno>
 8001630:	4603      	mov	r3, r0
 8001632:	220c      	movs	r2, #12
 8001634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001636:	f04f 33ff 	mov.w	r3, #4294967295
 800163a:	e009      	b.n	8001650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <_sbrk+0x64>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001642:	4b07      	ldr	r3, [pc, #28]	@ (8001660 <_sbrk+0x64>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4413      	add	r3, r2
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <_sbrk+0x64>)
 800164c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	2000c000 	.word	0x2000c000
 800165c:	00000400 	.word	0x00000400
 8001660:	20000d90 	.word	0x20000d90
 8001664:	20002588 	.word	0x20002588

08001668 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <SystemInit+0x20>)
 800166e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001672:	4a05      	ldr	r2, [pc, #20]	@ (8001688 <SystemInit+0x20>)
 8001674:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001678:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed00 	.word	0xe000ed00

0800168c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800168c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001690:	f7ff ffea 	bl	8001668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001694:	480c      	ldr	r0, [pc, #48]	@ (80016c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001696:	490d      	ldr	r1, [pc, #52]	@ (80016cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001698:	4a0d      	ldr	r2, [pc, #52]	@ (80016d0 <LoopForever+0xe>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80016ac:	4c0a      	ldr	r4, [pc, #40]	@ (80016d8 <LoopForever+0x16>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016ba:	f003 fee5 	bl	8005488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016be:	f7ff fc11 	bl	8000ee4 <main>

080016c2 <LoopForever>:

LoopForever:
    b LoopForever
 80016c2:	e7fe      	b.n	80016c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016c4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80016c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016cc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80016d0:	0800d70c 	.word	0x0800d70c
  ldr r2, =_sbss
 80016d4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80016d8:	20002584 	.word	0x20002584

080016dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016dc:	e7fe      	b.n	80016dc <ADC1_IRQHandler>

080016de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016de:	b580      	push	{r7, lr}
 80016e0:	b082      	sub	sp, #8
 80016e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e8:	2003      	movs	r0, #3
 80016ea:	f000 f943 	bl	8001974 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016ee:	2000      	movs	r0, #0
 80016f0:	f000 f80e 	bl	8001710 <HAL_InitTick>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d002      	beq.n	8001700 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	e001      	b.n	8001704 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001700:	f7ff fdfa 	bl	80012f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001704:	79fb      	ldrb	r3, [r7, #7]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
	...

08001710 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <HAL_InitTick+0x6c>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d023      	beq.n	800176c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <HAL_InitTick+0x70>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_InitTick+0x6c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	4619      	mov	r1, r3
 800172e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001732:	fbb3 f3f1 	udiv	r3, r3, r1
 8001736:	fbb2 f3f3 	udiv	r3, r2, r3
 800173a:	4618      	mov	r0, r3
 800173c:	f000 f941 	bl	80019c2 <HAL_SYSTICK_Config>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d10f      	bne.n	8001766 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d809      	bhi.n	8001760 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f919 	bl	800198a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001758:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <HAL_InitTick+0x74>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e007      	b.n	8001770 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	73fb      	strb	r3, [r7, #15]
 8001764:	e004      	b.n	8001770 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	e001      	b.n	8001770 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000018 	.word	0x20000018
 8001780:	20000010 	.word	0x20000010
 8001784:	20000014 	.word	0x20000014

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	@ (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000018 	.word	0x20000018
 80017ac:	20000d94 	.word	0x20000d94

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	@ (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000d94 	.word	0x20000d94

080017c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d0:	f7ff ffee 	bl	80017b0 <HAL_GetTick>
 80017d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e0:	d005      	beq.n	80017ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_Delay+0x44>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4413      	add	r3, r2
 80017ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ee:	bf00      	nop
 80017f0:	f7ff ffde 	bl	80017b0 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d8f7      	bhi.n	80017f0 <HAL_Delay+0x28>
  {
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000018 	.word	0x20000018

08001810 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001820:	4b0c      	ldr	r3, [pc, #48]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800182c:	4013      	ands	r3, r2
 800182e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001838:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800183c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001840:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <__NVIC_SetPriorityGrouping+0x44>)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	60d3      	str	r3, [r2, #12]
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800185c:	4b04      	ldr	r3, [pc, #16]	@ (8001870 <__NVIC_GetPriorityGrouping+0x18>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	0a1b      	lsrs	r3, r3, #8
 8001862:	f003 0307 	and.w	r3, r3, #7
}
 8001866:	4618      	mov	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	6039      	str	r1, [r7, #0]
 800187e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	2b00      	cmp	r3, #0
 8001886:	db0a      	blt.n	800189e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	b2da      	uxtb	r2, r3
 800188c:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <__NVIC_SetPriority+0x4c>)
 800188e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001892:	0112      	lsls	r2, r2, #4
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	440b      	add	r3, r1
 8001898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800189c:	e00a      	b.n	80018b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	4908      	ldr	r1, [pc, #32]	@ (80018c4 <__NVIC_SetPriority+0x50>)
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	3b04      	subs	r3, #4
 80018ac:	0112      	lsls	r2, r2, #4
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	440b      	add	r3, r1
 80018b2:	761a      	strb	r2, [r3, #24]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	@ 0x24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f1c3 0307 	rsb	r3, r3, #7
 80018e2:	2b04      	cmp	r3, #4
 80018e4:	bf28      	it	cs
 80018e6:	2304      	movcs	r3, #4
 80018e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3304      	adds	r3, #4
 80018ee:	2b06      	cmp	r3, #6
 80018f0:	d902      	bls.n	80018f8 <NVIC_EncodePriority+0x30>
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	3b03      	subs	r3, #3
 80018f6:	e000      	b.n	80018fa <NVIC_EncodePriority+0x32>
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43da      	mvns	r2, r3
 8001908:	68bb      	ldr	r3, [r7, #8]
 800190a:	401a      	ands	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001910:	f04f 31ff 	mov.w	r1, #4294967295
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	43d9      	mvns	r1, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001920:	4313      	orrs	r3, r2
         );
}
 8001922:	4618      	mov	r0, r3
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
	...

08001930 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3b01      	subs	r3, #1
 800193c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001940:	d301      	bcc.n	8001946 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001942:	2301      	movs	r3, #1
 8001944:	e00f      	b.n	8001966 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <SysTick_Config+0x40>)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3b01      	subs	r3, #1
 800194c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800194e:	210f      	movs	r1, #15
 8001950:	f04f 30ff 	mov.w	r0, #4294967295
 8001954:	f7ff ff8e 	bl	8001874 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <SysTick_Config+0x40>)
 800195a:	2200      	movs	r2, #0
 800195c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800195e:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <SysTick_Config+0x40>)
 8001960:	2207      	movs	r2, #7
 8001962:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	e000e010 	.word	0xe000e010

08001974 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f7ff ff47 	bl	8001810 <__NVIC_SetPriorityGrouping>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b086      	sub	sp, #24
 800198e:	af00      	add	r7, sp, #0
 8001990:	4603      	mov	r3, r0
 8001992:	60b9      	str	r1, [r7, #8]
 8001994:	607a      	str	r2, [r7, #4]
 8001996:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001998:	2300      	movs	r3, #0
 800199a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800199c:	f7ff ff5c 	bl	8001858 <__NVIC_GetPriorityGrouping>
 80019a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	6978      	ldr	r0, [r7, #20]
 80019a8:	f7ff ff8e 	bl	80018c8 <NVIC_EncodePriority>
 80019ac:	4602      	mov	r2, r0
 80019ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019b2:	4611      	mov	r1, r2
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff5d 	bl	8001874 <__NVIC_SetPriority>
}
 80019ba:	bf00      	nop
 80019bc:	3718      	adds	r7, #24
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b082      	sub	sp, #8
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ffb0 	bl	8001930 <SysTick_Config>
 80019d0:	4603      	mov	r3, r0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019dc:	b480      	push	{r7}
 80019de:	b087      	sub	sp, #28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ea:	e148      	b.n	8001c7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	2101      	movs	r1, #1
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 813a 	beq.w	8001c78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f003 0303 	and.w	r3, r3, #3
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d005      	beq.n	8001a1c <HAL_GPIO_Init+0x40>
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d130      	bne.n	8001a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	2203      	movs	r2, #3
 8001a28:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	68da      	ldr	r2, [r3, #12]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a52:	2201      	movs	r2, #1
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	693a      	ldr	r2, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	091b      	lsrs	r3, r3, #4
 8001a68:	f003 0201 	and.w	r2, r3, #1
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	693a      	ldr	r2, [r7, #16]
 8001a7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d017      	beq.n	8001aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	689a      	ldr	r2, [r3, #8]
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d123      	bne.n	8001b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	693a      	ldr	r2, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	691a      	ldr	r2, [r3, #16]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	009b      	lsls	r3, r3, #2
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	08da      	lsrs	r2, r3, #3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3208      	adds	r2, #8
 8001b08:	6939      	ldr	r1, [r7, #16]
 8001b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	2203      	movs	r2, #3
 8001b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0203 	and.w	r2, r3, #3
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	fa02 f303 	lsl.w	r3, r2, r3
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	693a      	ldr	r2, [r7, #16]
 8001b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 8094 	beq.w	8001c78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b50:	4b52      	ldr	r3, [pc, #328]	@ (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b54:	4a51      	ldr	r2, [pc, #324]	@ (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8001c9c <HAL_GPIO_Init+0x2c0>)
 8001b5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b68:	4a4d      	ldr	r2, [pc, #308]	@ (8001ca0 <HAL_GPIO_Init+0x2c4>)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	089b      	lsrs	r3, r3, #2
 8001b6e:	3302      	adds	r3, #2
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f003 0303 	and.w	r3, r3, #3
 8001b7c:	009b      	lsls	r3, r3, #2
 8001b7e:	220f      	movs	r2, #15
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	43db      	mvns	r3, r3
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b92:	d00d      	beq.n	8001bb0 <HAL_GPIO_Init+0x1d4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a43      	ldr	r2, [pc, #268]	@ (8001ca4 <HAL_GPIO_Init+0x2c8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d007      	beq.n	8001bac <HAL_GPIO_Init+0x1d0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a42      	ldr	r2, [pc, #264]	@ (8001ca8 <HAL_GPIO_Init+0x2cc>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d101      	bne.n	8001ba8 <HAL_GPIO_Init+0x1cc>
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	e004      	b.n	8001bb2 <HAL_GPIO_Init+0x1d6>
 8001ba8:	2307      	movs	r3, #7
 8001baa:	e002      	b.n	8001bb2 <HAL_GPIO_Init+0x1d6>
 8001bac:	2301      	movs	r3, #1
 8001bae:	e000      	b.n	8001bb2 <HAL_GPIO_Init+0x1d6>
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	f002 0203 	and.w	r2, r2, #3
 8001bb8:	0092      	lsls	r2, r2, #2
 8001bba:	4093      	lsls	r3, r2
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bc2:	4937      	ldr	r1, [pc, #220]	@ (8001ca0 <HAL_GPIO_Init+0x2c4>)
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	089b      	lsrs	r3, r3, #2
 8001bc8:	3302      	adds	r3, #2
 8001bca:	693a      	ldr	r2, [r7, #16]
 8001bcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd0:	4b36      	ldr	r3, [pc, #216]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	43db      	mvns	r3, r3
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	4013      	ands	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c1e:	4a23      	ldr	r2, [pc, #140]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c24:	4b21      	ldr	r3, [pc, #132]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d003      	beq.n	8001c48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c48:	4a18      	ldr	r2, [pc, #96]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c4e:	4b17      	ldr	r3, [pc, #92]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	43db      	mvns	r3, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c72:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_GPIO_Init+0x2d0>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	f47f aeaf 	bne.w	80019ec <HAL_GPIO_Init+0x10>
  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	371c      	adds	r7, #28
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40010000 	.word	0x40010000
 8001ca4:	48000400 	.word	0x48000400
 8001ca8:	48000800 	.word	0x48000800
 8001cac:	40010400 	.word	0x40010400

08001cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	807b      	strh	r3, [r7, #2]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cc6:	887a      	ldrh	r2, [r7, #2]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ccc:	e002      	b.n	8001cd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e08d      	b.n	8001e0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d106      	bne.n	8001d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7ff fb1a 	bl	8001340 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2224      	movs	r2, #36	@ 0x24
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f022 0201 	bic.w	r2, r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685a      	ldr	r2, [r3, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d107      	bne.n	8001d5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	e006      	b.n	8001d68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689a      	ldr	r2, [r3, #8]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d108      	bne.n	8001d82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001d7e:	605a      	str	r2, [r3, #4]
 8001d80:	e007      	b.n	8001d92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	6812      	ldr	r2, [r2, #0]
 8001d9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001da0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	68da      	ldr	r2, [r3, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691a      	ldr	r2, [r3, #16]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	699b      	ldr	r3, [r3, #24]
 8001dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69d9      	ldr	r1, [r3, #28]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6a1a      	ldr	r2, [r3, #32]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2220      	movs	r2, #32
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b088      	sub	sp, #32
 8001e1c:	af02      	add	r7, sp, #8
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	4608      	mov	r0, r1
 8001e22:	4611      	mov	r1, r2
 8001e24:	461a      	mov	r2, r3
 8001e26:	4603      	mov	r3, r0
 8001e28:	817b      	strh	r3, [r7, #10]
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	813b      	strh	r3, [r7, #8]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b20      	cmp	r3, #32
 8001e3c:	f040 80f9 	bne.w	8002032 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e40:	6a3b      	ldr	r3, [r7, #32]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d002      	beq.n	8001e4c <HAL_I2C_Mem_Write+0x34>
 8001e46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d105      	bne.n	8001e58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e0ed      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d101      	bne.n	8001e66 <HAL_I2C_Mem_Write+0x4e>
 8001e62:	2302      	movs	r3, #2
 8001e64:	e0e6      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e6e:	f7ff fc9f 	bl	80017b0 <HAL_GetTick>
 8001e72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	2319      	movs	r3, #25
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	f000 fac3 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001e86:	4603      	mov	r3, r0
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d1      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2221      	movs	r2, #33	@ 0x21
 8001e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2240      	movs	r2, #64	@ 0x40
 8001e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6a3a      	ldr	r2, [r7, #32]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001eb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001eb8:	88f8      	ldrh	r0, [r7, #6]
 8001eba:	893a      	ldrh	r2, [r7, #8]
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	9301      	str	r3, [sp, #4]
 8001ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 f9d3 	bl	8002274 <I2C_RequestMemoryWrite>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0a9      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	2bff      	cmp	r3, #255	@ 0xff
 8001ee8:	d90e      	bls.n	8001f08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	22ff      	movs	r2, #255	@ 0xff
 8001eee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	8979      	ldrh	r1, [r7, #10]
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9300      	str	r3, [sp, #0]
 8001efc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f00:	68f8      	ldr	r0, [r7, #12]
 8001f02:	f000 fc47 	bl	8002794 <I2C_TransferConfig>
 8001f06:	e00f      	b.n	8001f28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f0c:	b29a      	uxth	r2, r3
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	8979      	ldrh	r1, [r7, #10]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 fc36 	bl	8002794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001f2c:	68f8      	ldr	r0, [r7, #12]
 8001f2e:	f000 fac6 	bl	80024be <I2C_WaitOnTXISFlagUntilTimeout>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e07b      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f40:	781a      	ldrb	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f4c:	1c5a      	adds	r2, r3, #1
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d034      	beq.n	8001fe0 <HAL_I2C_Mem_Write+0x1c8>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d130      	bne.n	8001fe0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f84:	2200      	movs	r2, #0
 8001f86:	2180      	movs	r1, #128	@ 0x80
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fa3f 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e04d      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	2bff      	cmp	r3, #255	@ 0xff
 8001fa0:	d90e      	bls.n	8001fc0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	22ff      	movs	r2, #255	@ 0xff
 8001fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	8979      	ldrh	r1, [r7, #10]
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb8:	68f8      	ldr	r0, [r7, #12]
 8001fba:	f000 fbeb 	bl	8002794 <I2C_TransferConfig>
 8001fbe:	e00f      	b.n	8001fe0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc4:	b29a      	uxth	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	8979      	ldrh	r1, [r7, #10]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 fbda 	bl	8002794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d19e      	bne.n	8001f28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f000 faac 	bl	800254c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e01a      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2220      	movs	r2, #32
 8002004:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6859      	ldr	r1, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b0a      	ldr	r3, [pc, #40]	@ (800203c <HAL_I2C_Mem_Write+0x224>)
 8002012:	400b      	ands	r3, r1
 8002014:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	3718      	adds	r7, #24
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fe00e800 	.word	0xfe00e800

08002040 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b088      	sub	sp, #32
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	817b      	strh	r3, [r7, #10]
 8002052:	460b      	mov	r3, r1
 8002054:	813b      	strh	r3, [r7, #8]
 8002056:	4613      	mov	r3, r2
 8002058:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b20      	cmp	r3, #32
 8002064:	f040 80fd 	bne.w	8002262 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d002      	beq.n	8002074 <HAL_I2C_Mem_Read+0x34>
 800206e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002070:	2b00      	cmp	r3, #0
 8002072:	d105      	bne.n	8002080 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800207a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e0f1      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002086:	2b01      	cmp	r3, #1
 8002088:	d101      	bne.n	800208e <HAL_I2C_Mem_Read+0x4e>
 800208a:	2302      	movs	r3, #2
 800208c:	e0ea      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2201      	movs	r2, #1
 8002092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002096:	f7ff fb8b 	bl	80017b0 <HAL_GetTick>
 800209a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	2319      	movs	r3, #25
 80020a2:	2201      	movs	r2, #1
 80020a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f9af 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0d5      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2222      	movs	r2, #34	@ 0x22
 80020bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2240      	movs	r2, #64	@ 0x40
 80020c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6a3a      	ldr	r2, [r7, #32]
 80020d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80020d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2200      	movs	r2, #0
 80020de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80020e0:	88f8      	ldrh	r0, [r7, #6]
 80020e2:	893a      	ldrh	r2, [r7, #8]
 80020e4:	8979      	ldrh	r1, [r7, #10]
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4603      	mov	r3, r0
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 f913 	bl	800231c <I2C_RequestMemoryRead>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	2200      	movs	r2, #0
 8002100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e0ad      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	2bff      	cmp	r3, #255	@ 0xff
 8002110:	d90e      	bls.n	8002130 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800211c:	b2da      	uxtb	r2, r3
 800211e:	8979      	ldrh	r1, [r7, #10]
 8002120:	4b52      	ldr	r3, [pc, #328]	@ (800226c <HAL_I2C_Mem_Read+0x22c>)
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fb33 	bl	8002794 <I2C_TransferConfig>
 800212e:	e00f      	b.n	8002150 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002134:	b29a      	uxth	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800213e:	b2da      	uxtb	r2, r3
 8002140:	8979      	ldrh	r1, [r7, #10]
 8002142:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <HAL_I2C_Mem_Read+0x22c>)
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fb22 	bl	8002794 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	9300      	str	r3, [sp, #0]
 8002154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002156:	2200      	movs	r2, #0
 8002158:	2104      	movs	r1, #4
 800215a:	68f8      	ldr	r0, [r7, #12]
 800215c:	f000 f956 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07c      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002192:	b29b      	uxth	r3, r3
 8002194:	3b01      	subs	r3, #1
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d034      	beq.n	8002210 <HAL_I2C_Mem_Read+0x1d0>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d130      	bne.n	8002210 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	9300      	str	r3, [sp, #0]
 80021b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b4:	2200      	movs	r2, #0
 80021b6:	2180      	movs	r1, #128	@ 0x80
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f000 f927 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e04d      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2bff      	cmp	r3, #255	@ 0xff
 80021d0:	d90e      	bls.n	80021f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	8979      	ldrh	r1, [r7, #10]
 80021e0:	2300      	movs	r3, #0
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 fad3 	bl	8002794 <I2C_TransferConfig>
 80021ee:	e00f      	b.n	8002210 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	8979      	ldrh	r1, [r7, #10]
 8002202:	2300      	movs	r3, #0
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 fac2 	bl	8002794 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002214:	b29b      	uxth	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d19a      	bne.n	8002150 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800221e:	68f8      	ldr	r0, [r7, #12]
 8002220:	f000 f994 	bl	800254c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01a      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	2220      	movs	r2, #32
 8002234:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b0b      	ldr	r3, [pc, #44]	@ (8002270 <HAL_I2C_Mem_Read+0x230>)
 8002242:	400b      	ands	r3, r1
 8002244:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	2220      	movs	r2, #32
 800224a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800225e:	2300      	movs	r3, #0
 8002260:	e000      	b.n	8002264 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002262:	2302      	movs	r3, #2
  }
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	80002400 	.word	0x80002400
 8002270:	fe00e800 	.word	0xfe00e800

08002274 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af02      	add	r7, sp, #8
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	4608      	mov	r0, r1
 800227e:	4611      	mov	r1, r2
 8002280:	461a      	mov	r2, r3
 8002282:	4603      	mov	r3, r0
 8002284:	817b      	strh	r3, [r7, #10]
 8002286:	460b      	mov	r3, r1
 8002288:	813b      	strh	r3, [r7, #8]
 800228a:	4613      	mov	r3, r2
 800228c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	8979      	ldrh	r1, [r7, #10]
 8002294:	4b20      	ldr	r3, [pc, #128]	@ (8002318 <I2C_RequestMemoryWrite+0xa4>)
 8002296:	9300      	str	r3, [sp, #0]
 8002298:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 fa79 	bl	8002794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a2:	69fa      	ldr	r2, [r7, #28]
 80022a4:	69b9      	ldr	r1, [r7, #24]
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f909 	bl	80024be <I2C_WaitOnTXISFlagUntilTimeout>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e02c      	b.n	8002310 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022bc:	893b      	ldrh	r3, [r7, #8]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80022c6:	e015      	b.n	80022f4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80022c8:	893b      	ldrh	r3, [r7, #8]
 80022ca:	0a1b      	lsrs	r3, r3, #8
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	69b9      	ldr	r1, [r7, #24]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f8ef 	bl	80024be <I2C_WaitOnTXISFlagUntilTimeout>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e012      	b.n	8002310 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80022ea:	893b      	ldrh	r3, [r7, #8]
 80022ec:	b2da      	uxtb	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	2200      	movs	r2, #0
 80022fc:	2180      	movs	r1, #128	@ 0x80
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f884 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	80002000 	.word	0x80002000

0800231c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af02      	add	r7, sp, #8
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	4608      	mov	r0, r1
 8002326:	4611      	mov	r1, r2
 8002328:	461a      	mov	r2, r3
 800232a:	4603      	mov	r3, r0
 800232c:	817b      	strh	r3, [r7, #10]
 800232e:	460b      	mov	r3, r1
 8002330:	813b      	strh	r3, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	8979      	ldrh	r1, [r7, #10]
 800233c:	4b20      	ldr	r3, [pc, #128]	@ (80023c0 <I2C_RequestMemoryRead+0xa4>)
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2300      	movs	r3, #0
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fa26 	bl	8002794 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002348:	69fa      	ldr	r2, [r7, #28]
 800234a:	69b9      	ldr	r1, [r7, #24]
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 f8b6 	bl	80024be <I2C_WaitOnTXISFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02c      	b.n	80023b6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800235c:	88fb      	ldrh	r3, [r7, #6]
 800235e:	2b01      	cmp	r3, #1
 8002360:	d105      	bne.n	800236e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002362:	893b      	ldrh	r3, [r7, #8]
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
 800236c:	e015      	b.n	800239a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800236e:	893b      	ldrh	r3, [r7, #8]
 8002370:	0a1b      	lsrs	r3, r3, #8
 8002372:	b29b      	uxth	r3, r3
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800237c:	69fa      	ldr	r2, [r7, #28]
 800237e:	69b9      	ldr	r1, [r7, #24]
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f89c 	bl	80024be <I2C_WaitOnTXISFlagUntilTimeout>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e012      	b.n	80023b6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002390:	893b      	ldrh	r3, [r7, #8]
 8002392:	b2da      	uxtb	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2140      	movs	r1, #64	@ 0x40
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f831 	bl	800240c <I2C_WaitOnFlagUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	80002000 	.word	0x80002000

080023c4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b02      	cmp	r3, #2
 80023d8:	d103      	bne.n	80023e2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	2200      	movs	r2, #0
 80023e0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d007      	beq.n	8002400 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699a      	ldr	r2, [r3, #24]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f042 0201 	orr.w	r2, r2, #1
 80023fe:	619a      	str	r2, [r3, #24]
  }
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	603b      	str	r3, [r7, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800241c:	e03b      	b.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800241e:	69ba      	ldr	r2, [r7, #24]
 8002420:	6839      	ldr	r1, [r7, #0]
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 f8d6 	bl	80025d4 <I2C_IsErrorOccurred>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e041      	b.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d02d      	beq.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800243a:	f7ff f9b9 	bl	80017b0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d302      	bcc.n	8002450 <I2C_WaitOnFlagUntilTimeout+0x44>
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d122      	bne.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699a      	ldr	r2, [r3, #24]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	bf0c      	ite	eq
 8002460:	2301      	moveq	r3, #1
 8002462:	2300      	movne	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	429a      	cmp	r2, r3
 800246c:	d113      	bne.n	8002496 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002472:	f043 0220 	orr.w	r2, r3, #32
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2220      	movs	r2, #32
 800247e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e00f      	b.n	80024b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699a      	ldr	r2, [r3, #24]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	bf0c      	ite	eq
 80024a6:	2301      	moveq	r3, #1
 80024a8:	2300      	movne	r3, #0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	79fb      	ldrb	r3, [r7, #7]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d0b4      	beq.n	800241e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b084      	sub	sp, #16
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	60f8      	str	r0, [r7, #12]
 80024c6:	60b9      	str	r1, [r7, #8]
 80024c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024ca:	e033      	b.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f87f 	bl	80025d4 <I2C_IsErrorOccurred>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e031      	b.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e6:	d025      	beq.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e8:	f7ff f962 	bl	80017b0 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68ba      	ldr	r2, [r7, #8]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d302      	bcc.n	80024fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d11a      	bne.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b02      	cmp	r3, #2
 800250a:	d013      	beq.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002510:	f043 0220 	orr.w	r2, r3, #32
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2220      	movs	r2, #32
 800251c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	2200      	movs	r2, #0
 800252c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e007      	b.n	8002544 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b02      	cmp	r3, #2
 8002540:	d1c4      	bne.n	80024cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002542:	2300      	movs	r3, #0
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002558:	e02f      	b.n	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f838 	bl	80025d4 <I2C_IsErrorOccurred>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e02d      	b.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800256e:	f7ff f91f 	bl	80017b0 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	429a      	cmp	r2, r3
 800257c:	d302      	bcc.n	8002584 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d11a      	bne.n	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	f003 0320 	and.w	r3, r3, #32
 800258e:	2b20      	cmp	r3, #32
 8002590:	d013      	beq.n	80025ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002596:	f043 0220 	orr.w	r2, r3, #32
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2200      	movs	r2, #0
 80025b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e007      	b.n	80025ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d1c8      	bne.n	800255a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b08a      	sub	sp, #40	@ 0x28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80025ee:	2300      	movs	r3, #0
 80025f0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f003 0310 	and.w	r3, r3, #16
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d068      	beq.n	80026d2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2210      	movs	r2, #16
 8002606:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002608:	e049      	b.n	800269e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002610:	d045      	beq.n	800269e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002612:	f7ff f8cd 	bl	80017b0 <HAL_GetTick>
 8002616:	4602      	mov	r2, r0
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	429a      	cmp	r2, r3
 8002620:	d302      	bcc.n	8002628 <I2C_IsErrorOccurred+0x54>
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d13a      	bne.n	800269e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002632:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800263a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800264a:	d121      	bne.n	8002690 <I2C_IsErrorOccurred+0xbc>
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002652:	d01d      	beq.n	8002690 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002654:	7cfb      	ldrb	r3, [r7, #19]
 8002656:	2b20      	cmp	r3, #32
 8002658:	d01a      	beq.n	8002690 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002668:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800266a:	f7ff f8a1 	bl	80017b0 <HAL_GetTick>
 800266e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002670:	e00e      	b.n	8002690 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002672:	f7ff f89d 	bl	80017b0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b19      	cmp	r3, #25
 800267e:	d907      	bls.n	8002690 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002680:	6a3b      	ldr	r3, [r7, #32]
 8002682:	f043 0320 	orr.w	r3, r3, #32
 8002686:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800268e:	e006      	b.n	800269e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f003 0320 	and.w	r3, r3, #32
 800269a:	2b20      	cmp	r3, #32
 800269c:	d1e9      	bne.n	8002672 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0320 	and.w	r3, r3, #32
 80026a8:	2b20      	cmp	r3, #32
 80026aa:	d003      	beq.n	80026b4 <I2C_IsErrorOccurred+0xe0>
 80026ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0aa      	beq.n	800260a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80026b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d103      	bne.n	80026c4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2220      	movs	r2, #32
 80026c2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f043 0304 	orr.w	r3, r3, #4
 80026ca:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80026f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002706:	6a3b      	ldr	r3, [r7, #32]
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002716:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d00b      	beq.n	8002740 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002740:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002744:	2b00      	cmp	r3, #0
 8002746:	d01c      	beq.n	8002782 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002748:	68f8      	ldr	r0, [r7, #12]
 800274a:	f7ff fe3b 	bl	80023c4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	6859      	ldr	r1, [r3, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b0d      	ldr	r3, [pc, #52]	@ (8002790 <I2C_IsErrorOccurred+0x1bc>)
 800275a:	400b      	ands	r3, r1
 800275c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2200      	movs	r2, #0
 800277e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002782:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002786:	4618      	mov	r0, r3
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	fe00e800 	.word	0xfe00e800

08002794 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	460b      	mov	r3, r1
 80027a0:	817b      	strh	r3, [r7, #10]
 80027a2:	4613      	mov	r3, r2
 80027a4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027a6:	897b      	ldrh	r3, [r7, #10]
 80027a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027ac:	7a7b      	ldrb	r3, [r7, #9]
 80027ae:	041b      	lsls	r3, r3, #16
 80027b0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027b4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	4313      	orrs	r3, r2
 80027be:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80027c2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	0d5b      	lsrs	r3, r3, #21
 80027ce:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80027d2:	4b08      	ldr	r3, [pc, #32]	@ (80027f4 <I2C_TransferConfig+0x60>)
 80027d4:	430b      	orrs	r3, r1
 80027d6:	43db      	mvns	r3, r3
 80027d8:	ea02 0103 	and.w	r1, r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	430a      	orrs	r2, r1
 80027e4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80027e6:	bf00      	nop
 80027e8:	371c      	adds	r7, #28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	03ff63ff 	.word	0x03ff63ff

080027f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b20      	cmp	r3, #32
 800280c:	d138      	bne.n	8002880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002814:	2b01      	cmp	r3, #1
 8002816:	d101      	bne.n	800281c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002818:	2302      	movs	r3, #2
 800281a:	e032      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2224      	movs	r2, #36	@ 0x24
 8002828:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0201 	bic.w	r2, r2, #1
 800283a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800284a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6819      	ldr	r1, [r3, #0]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	430a      	orrs	r2, r1
 800285a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 0201 	orr.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2220      	movs	r2, #32
 8002870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800287c:	2300      	movs	r3, #0
 800287e:	e000      	b.n	8002882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002880:	2302      	movs	r3, #2
  }
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288e:	b480      	push	{r7}
 8002890:	b085      	sub	sp, #20
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d139      	bne.n	8002918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e033      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2224      	movs	r2, #36	@ 0x24
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	68fa      	ldr	r2, [r7, #12]
 80028f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002914:	2300      	movs	r3, #0
 8002916:	e000      	b.n	800291a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002918:	2302      	movs	r3, #2
  }
}
 800291a:	4618      	mov	r0, r3
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
	...

08002928 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800292c:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a04      	ldr	r2, [pc, #16]	@ (8002944 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002932:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000

08002948 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800294c:	4b04      	ldr	r3, [pc, #16]	@ (8002960 <HAL_PWREx_GetVoltageRange+0x18>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40007000 	.word	0x40007000

08002964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002972:	d130      	bne.n	80029d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002974:	4b23      	ldr	r3, [pc, #140]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800297c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002980:	d038      	beq.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002982:	4b20      	ldr	r3, [pc, #128]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800298a:	4a1e      	ldr	r2, [pc, #120]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800298c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002990:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002992:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2232      	movs	r2, #50	@ 0x32
 8002998:	fb02 f303 	mul.w	r3, r2, r3
 800299c:	4a1b      	ldr	r2, [pc, #108]	@ (8002a0c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800299e:	fba2 2303 	umull	r2, r3, r2, r3
 80029a2:	0c9b      	lsrs	r3, r3, #18
 80029a4:	3301      	adds	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029a8:	e002      	b.n	80029b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80029b0:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029bc:	d102      	bne.n	80029c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1f2      	bne.n	80029aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029d0:	d110      	bne.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e00f      	b.n	80029f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80029d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80029de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029e2:	d007      	beq.n	80029f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80029e4:	4b07      	ldr	r3, [pc, #28]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80029ec:	4a05      	ldr	r2, [pc, #20]	@ (8002a04 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80029ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40007000 	.word	0x40007000
 8002a08:	20000010 	.word	0x20000010
 8002a0c:	431bde83 	.word	0x431bde83

08002a10 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	f000 bc02 	b.w	8003228 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a24:	4b96      	ldr	r3, [pc, #600]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f003 030c 	and.w	r3, r3, #12
 8002a2c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a2e:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f000 80e4 	beq.w	8002c0e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCC_OscConfig+0x4c>
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	2b0c      	cmp	r3, #12
 8002a50:	f040 808b 	bne.w	8002b6a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	f040 8087 	bne.w	8002b6a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a5c:	4b88      	ldr	r3, [pc, #544]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d005      	beq.n	8002a74 <HAL_RCC_OscConfig+0x64>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e3d9      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a1a      	ldr	r2, [r3, #32]
 8002a78:	4b81      	ldr	r3, [pc, #516]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d004      	beq.n	8002a8e <HAL_RCC_OscConfig+0x7e>
 8002a84:	4b7e      	ldr	r3, [pc, #504]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a8c:	e005      	b.n	8002a9a <HAL_RCC_OscConfig+0x8a>
 8002a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002a90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d223      	bcs.n	8002ae6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f000 fd8c 	bl	80035c0 <RCC_SetFlashLatencyFromMSIRange>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e3ba      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ab2:	4b73      	ldr	r3, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a72      	ldr	r2, [pc, #456]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f043 0308 	orr.w	r3, r3, #8
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b70      	ldr	r3, [pc, #448]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	496d      	ldr	r1, [pc, #436]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ad0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	4968      	ldr	r1, [pc, #416]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	604b      	str	r3, [r1, #4]
 8002ae4:	e025      	b.n	8002b32 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae6:	4b66      	ldr	r3, [pc, #408]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a65      	ldr	r2, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	4b63      	ldr	r3, [pc, #396]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	4960      	ldr	r1, [pc, #384]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b04:	4b5e      	ldr	r3, [pc, #376]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	495b      	ldr	r1, [pc, #364]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d109      	bne.n	8002b32 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f000 fd4c 	bl	80035c0 <RCC_SetFlashLatencyFromMSIRange>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e37a      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b32:	f000 fc81 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 8002b36:	4602      	mov	r2, r0
 8002b38:	4b51      	ldr	r3, [pc, #324]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	091b      	lsrs	r3, r3, #4
 8002b3e:	f003 030f 	and.w	r3, r3, #15
 8002b42:	4950      	ldr	r1, [pc, #320]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002b44:	5ccb      	ldrb	r3, [r1, r3]
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4e:	4a4e      	ldr	r2, [pc, #312]	@ (8002c88 <HAL_RCC_OscConfig+0x278>)
 8002b50:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002b52:	4b4e      	ldr	r3, [pc, #312]	@ (8002c8c <HAL_RCC_OscConfig+0x27c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fdda 	bl	8001710 <HAL_InitTick>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d052      	beq.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	e35e      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d032      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002b72:	4b43      	ldr	r3, [pc, #268]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a42      	ldr	r2, [pc, #264]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b78:	f043 0301 	orr.w	r3, r3, #1
 8002b7c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b7e:	f7fe fe17 	bl	80017b0 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b86:	f7fe fe13 	bl	80017b0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e347      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002b98:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba4:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a35      	ldr	r2, [pc, #212]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002baa:	f043 0308 	orr.w	r3, r3, #8
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b33      	ldr	r3, [pc, #204]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4930      	ldr	r1, [pc, #192]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	021b      	lsls	r3, r3, #8
 8002bd0:	492b      	ldr	r1, [pc, #172]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
 8002bd6:	e01a      	b.n	8002c0e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002bd8:	4b29      	ldr	r3, [pc, #164]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002bde:	f023 0301 	bic.w	r3, r3, #1
 8002be2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002be4:	f7fe fde4 	bl	80017b0 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002bec:	f7fe fde0 	bl	80017b0 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e314      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x1dc>
 8002c0a:	e000      	b.n	8002c0e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c0c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d073      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_OscConfig+0x21c>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d10e      	bne.n	8002c44 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	2b03      	cmp	r3, #3
 8002c2a:	d10b      	bne.n	8002c44 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c2c:	4b14      	ldr	r3, [pc, #80]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d063      	beq.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d15f      	bne.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e2f1      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x24c>
 8002c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a0b      	ldr	r2, [pc, #44]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e025      	b.n	8002ca8 <HAL_RCC_OscConfig+0x298>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c64:	d114      	bne.n	8002c90 <HAL_RCC_OscConfig+0x280>
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	4b03      	ldr	r3, [pc, #12]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a02      	ldr	r2, [pc, #8]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	e013      	b.n	8002ca8 <HAL_RCC_OscConfig+0x298>
 8002c80:	40021000 	.word	0x40021000
 8002c84:	0800d668 	.word	0x0800d668
 8002c88:	20000010 	.word	0x20000010
 8002c8c:	20000014 	.word	0x20000014
 8002c90:	4ba0      	ldr	r3, [pc, #640]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a9f      	ldr	r2, [pc, #636]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b9d      	ldr	r3, [pc, #628]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a9c      	ldr	r2, [pc, #624]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fd7e 	bl	80017b0 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fd7a 	bl	80017b0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e2ae      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cca:	4b92      	ldr	r3, [pc, #584]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x2a8>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fd6a 	bl	80017b0 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fd66 	bl	80017b0 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	@ 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e29a      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002cf2:	4b88      	ldr	r3, [pc, #544]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x2d0>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d060      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	2b04      	cmp	r3, #4
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_OscConfig+0x310>
 8002d14:	69bb      	ldr	r3, [r7, #24]
 8002d16:	2b0c      	cmp	r3, #12
 8002d18:	d119      	bne.n	8002d4e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d116      	bne.n	8002d4e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d20:	4b7c      	ldr	r3, [pc, #496]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_RCC_OscConfig+0x328>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e277      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d38:	4b76      	ldr	r3, [pc, #472]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	4973      	ldr	r1, [pc, #460]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d4c:	e040      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d023      	beq.n	8002d9e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d56:	4b6f      	ldr	r3, [pc, #444]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d62:	f7fe fd25 	bl	80017b0 <HAL_GetTick>
 8002d66:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6a:	f7fe fd21 	bl	80017b0 <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e255      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d7c:	4b65      	ldr	r3, [pc, #404]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d88:	4b62      	ldr	r3, [pc, #392]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	061b      	lsls	r3, r3, #24
 8002d96:	495f      	ldr	r1, [pc, #380]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	604b      	str	r3, [r1, #4]
 8002d9c:	e018      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a5c      	ldr	r2, [pc, #368]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002da4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002da8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002daa:	f7fe fd01 	bl	80017b0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db2:	f7fe fcfd 	bl	80017b0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e231      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002dc4:	4b53      	ldr	r3, [pc, #332]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f0      	bne.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0308 	and.w	r3, r3, #8
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d03c      	beq.n	8002e56 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	695b      	ldr	r3, [r3, #20]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01c      	beq.n	8002e1e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de4:	4b4b      	ldr	r3, [pc, #300]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002de6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dea:	4a4a      	ldr	r2, [pc, #296]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df4:	f7fe fcdc 	bl	80017b0 <HAL_GetTick>
 8002df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfc:	f7fe fcd8 	bl	80017b0 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e20c      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002e0e:	4b41      	ldr	r3, [pc, #260]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ef      	beq.n	8002dfc <HAL_RCC_OscConfig+0x3ec>
 8002e1c:	e01b      	b.n	8002e56 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e24:	4a3b      	ldr	r2, [pc, #236]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e26:	f023 0301 	bic.w	r3, r3, #1
 8002e2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e2e:	f7fe fcbf 	bl	80017b0 <HAL_GetTick>
 8002e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e34:	e008      	b.n	8002e48 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e36:	f7fe fcbb 	bl	80017b0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d901      	bls.n	8002e48 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e1ef      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002e48:	4b32      	ldr	r3, [pc, #200]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ef      	bne.n	8002e36 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	f000 80a6 	beq.w	8002fb0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002e68:	4b2a      	ldr	r3, [pc, #168]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10d      	bne.n	8002e90 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e74:	4b27      	ldr	r3, [pc, #156]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e78:	4a26      	ldr	r2, [pc, #152]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e80:	4b24      	ldr	r3, [pc, #144]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002e82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e88:	60bb      	str	r3, [r7, #8]
 8002e8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e90:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d118      	bne.n	8002ece <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e9c:	4b1e      	ldr	r3, [pc, #120]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002ea2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fc82 	bl	80017b0 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe fc7e 	bl	80017b0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e1b2      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ec2:	4b15      	ldr	r3, [pc, #84]	@ (8002f18 <HAL_RCC_OscConfig+0x508>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x4d8>
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ee6:	e029      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b05      	cmp	r3, #5
 8002eee:	d115      	bne.n	8002f1c <HAL_RCC_OscConfig+0x50c>
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef6:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002ef8:	f043 0304 	orr.w	r3, r3, #4
 8002efc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f00:	4b04      	ldr	r3, [pc, #16]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f06:	4a03      	ldr	r2, [pc, #12]	@ (8002f14 <HAL_RCC_OscConfig+0x504>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f10:	e014      	b.n	8002f3c <HAL_RCC_OscConfig+0x52c>
 8002f12:	bf00      	nop
 8002f14:	40021000 	.word	0x40021000
 8002f18:	40007000 	.word	0x40007000
 8002f1c:	4b9a      	ldr	r3, [pc, #616]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f22:	4a99      	ldr	r2, [pc, #612]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002f24:	f023 0301 	bic.w	r3, r3, #1
 8002f28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002f2c:	4b96      	ldr	r3, [pc, #600]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f32:	4a95      	ldr	r2, [pc, #596]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d016      	beq.n	8002f72 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f44:	f7fe fc34 	bl	80017b0 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f4a:	e00a      	b.n	8002f62 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4c:	f7fe fc30 	bl	80017b0 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e162      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f62:	4b89      	ldr	r3, [pc, #548]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0ed      	beq.n	8002f4c <HAL_RCC_OscConfig+0x53c>
 8002f70:	e015      	b.n	8002f9e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f72:	f7fe fc1d 	bl	80017b0 <HAL_GetTick>
 8002f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f78:	e00a      	b.n	8002f90 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7a:	f7fe fc19 	bl	80017b0 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d901      	bls.n	8002f90 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e14b      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f90:	4b7d      	ldr	r3, [pc, #500]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d1ed      	bne.n	8002f7a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9e:	7ffb      	ldrb	r3, [r7, #31]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa4:	4b78      	ldr	r3, [pc, #480]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	4a77      	ldr	r2, [pc, #476]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002faa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d03c      	beq.n	8003036 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01c      	beq.n	8002ffe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002fc4:	4b70      	ldr	r3, [pc, #448]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002fc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002fca:	4a6f      	ldr	r2, [pc, #444]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002fcc:	f043 0301 	orr.w	r3, r3, #1
 8002fd0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fe fbec 	bl	80017b0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fdc:	f7fe fbe8 	bl	80017b0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e11c      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002fee:	4b66      	ldr	r3, [pc, #408]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8002ff0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0ef      	beq.n	8002fdc <HAL_RCC_OscConfig+0x5cc>
 8002ffc:	e01b      	b.n	8003036 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ffe:	4b62      	ldr	r3, [pc, #392]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003000:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003004:	4a60      	ldr	r2, [pc, #384]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800300e:	f7fe fbcf 	bl	80017b0 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003016:	f7fe fbcb 	bl	80017b0 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e0ff      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003028:	4b57      	ldr	r3, [pc, #348]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 800302a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1ef      	bne.n	8003016 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80f3 	beq.w	8003226 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	2b02      	cmp	r3, #2
 8003046:	f040 80c9 	bne.w	80031dc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800304a:	4b4f      	ldr	r3, [pc, #316]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	f003 0203 	and.w	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	429a      	cmp	r2, r3
 800305c:	d12c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003068:	3b01      	subs	r3, #1
 800306a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d123      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800307a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800307c:	429a      	cmp	r2, r3
 800307e:	d11b      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800308c:	429a      	cmp	r2, r3
 800308e:	d113      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d109      	bne.n	80030b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	3b01      	subs	r3, #1
 80030b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d06b      	beq.n	8003190 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	2b0c      	cmp	r3, #12
 80030bc:	d062      	beq.n	8003184 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80030be:	4b32      	ldr	r3, [pc, #200]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0ac      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80030ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 80030d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030d8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80030da:	f7fe fb69 	bl	80017b0 <HAL_GetTick>
 80030de:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030e0:	e008      	b.n	80030f4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030e2:	f7fe fb65 	bl	80017b0 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d901      	bls.n	80030f4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e099      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030f4:	4b24      	ldr	r3, [pc, #144]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1f0      	bne.n	80030e2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003100:	4b21      	ldr	r3, [pc, #132]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	4b21      	ldr	r3, [pc, #132]	@ (800318c <HAL_RCC_OscConfig+0x77c>)
 8003106:	4013      	ands	r3, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003110:	3a01      	subs	r2, #1
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	4311      	orrs	r1, r2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800311a:	0212      	lsls	r2, r2, #8
 800311c:	4311      	orrs	r1, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003122:	0852      	lsrs	r2, r2, #1
 8003124:	3a01      	subs	r2, #1
 8003126:	0552      	lsls	r2, r2, #21
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800312e:	0852      	lsrs	r2, r2, #1
 8003130:	3a01      	subs	r2, #1
 8003132:	0652      	lsls	r2, r2, #25
 8003134:	4311      	orrs	r1, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800313a:	06d2      	lsls	r2, r2, #27
 800313c:	430a      	orrs	r2, r1
 800313e:	4912      	ldr	r1, [pc, #72]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003140:	4313      	orrs	r3, r2
 8003142:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a0f      	ldr	r2, [pc, #60]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003150:	4b0d      	ldr	r3, [pc, #52]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	4a0c      	ldr	r2, [pc, #48]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003156:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800315a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800315c:	f7fe fb28 	bl	80017b0 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003164:	f7fe fb24 	bl	80017b0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b02      	cmp	r3, #2
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e058      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003176:	4b04      	ldr	r3, [pc, #16]	@ (8003188 <HAL_RCC_OscConfig+0x778>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003182:	e050      	b.n	8003226 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e04f      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
 8003188:	40021000 	.word	0x40021000
 800318c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003190:	4b27      	ldr	r3, [pc, #156]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d144      	bne.n	8003226 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800319c:	4b24      	ldr	r3, [pc, #144]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a23      	ldr	r2, [pc, #140]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 80031a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031a6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80031a8:	4b21      	ldr	r3, [pc, #132]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	4a20      	ldr	r2, [pc, #128]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 80031ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80031b2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80031b4:	f7fe fafc 	bl	80017b0 <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ba:	e008      	b.n	80031ce <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031bc:	f7fe faf8 	bl	80017b0 <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e02c      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031ce:	4b18      	ldr	r3, [pc, #96]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f0      	beq.n	80031bc <HAL_RCC_OscConfig+0x7ac>
 80031da:	e024      	b.n	8003226 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d01f      	beq.n	8003222 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b13      	ldr	r3, [pc, #76]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a12      	ldr	r2, [pc, #72]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 80031e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ee:	f7fe fadf 	bl	80017b0 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fadb 	bl	80017b0 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e00f      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003208:	4b09      	ldr	r3, [pc, #36]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1f0      	bne.n	80031f6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003214:	4b06      	ldr	r3, [pc, #24]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	4905      	ldr	r1, [pc, #20]	@ (8003230 <HAL_RCC_OscConfig+0x820>)
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_OscConfig+0x824>)
 800321c:	4013      	ands	r3, r2
 800321e:	60cb      	str	r3, [r1, #12]
 8003220:	e001      	b.n	8003226 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e000      	b.n	8003228 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003226:	2300      	movs	r3, #0
}
 8003228:	4618      	mov	r0, r3
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40021000 	.word	0x40021000
 8003234:	feeefffc 	.word	0xfeeefffc

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e0e7      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800324c:	4b75      	ldr	r3, [pc, #468]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d910      	bls.n	800327c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325a:	4b72      	ldr	r3, [pc, #456]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 0207 	bic.w	r2, r3, #7
 8003262:	4970      	ldr	r1, [pc, #448]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326a:	4b6e      	ldr	r3, [pc, #440]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	429a      	cmp	r2, r3
 8003276:	d001      	beq.n	800327c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0cf      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d010      	beq.n	80032aa <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	4b66      	ldr	r3, [pc, #408]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003294:	429a      	cmp	r2, r3
 8003296:	d908      	bls.n	80032aa <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003298:	4b63      	ldr	r3, [pc, #396]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4960      	ldr	r1, [pc, #384]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80032a6:	4313      	orrs	r3, r2
 80032a8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d04c      	beq.n	8003350 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b03      	cmp	r3, #3
 80032bc:	d107      	bne.n	80032ce <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032be:	4b5a      	ldr	r3, [pc, #360]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d121      	bne.n	800330e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e0a6      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d107      	bne.n	80032e6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	4b54      	ldr	r3, [pc, #336]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d115      	bne.n	800330e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e09a      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032ee:	4b4e      	ldr	r3, [pc, #312]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e08e      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032fe:	4b4a      	ldr	r3, [pc, #296]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003306:	2b00      	cmp	r3, #0
 8003308:	d101      	bne.n	800330e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e086      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800330e:	4b46      	ldr	r3, [pc, #280]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f023 0203 	bic.w	r2, r3, #3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4943      	ldr	r1, [pc, #268]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800331c:	4313      	orrs	r3, r2
 800331e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003320:	f7fe fa46 	bl	80017b0 <HAL_GetTick>
 8003324:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003326:	e00a      	b.n	800333e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003328:	f7fe fa42 	bl	80017b0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003336:	4293      	cmp	r3, r2
 8003338:	d901      	bls.n	800333e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e06e      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800333e:	4b3a      	ldr	r3, [pc, #232]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 020c 	and.w	r2, r3, #12
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	429a      	cmp	r2, r3
 800334e:	d1eb      	bne.n	8003328 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d010      	beq.n	800337e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	4b31      	ldr	r3, [pc, #196]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003368:	429a      	cmp	r2, r3
 800336a:	d208      	bcs.n	800337e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800336c:	4b2e      	ldr	r3, [pc, #184]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	492b      	ldr	r1, [pc, #172]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800337e:	4b29      	ldr	r3, [pc, #164]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0307 	and.w	r3, r3, #7
 8003386:	683a      	ldr	r2, [r7, #0]
 8003388:	429a      	cmp	r2, r3
 800338a:	d210      	bcs.n	80033ae <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338c:	4b25      	ldr	r3, [pc, #148]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f023 0207 	bic.w	r2, r3, #7
 8003394:	4923      	ldr	r1, [pc, #140]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	4313      	orrs	r3, r2
 800339a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800339c:	4b21      	ldr	r3, [pc, #132]	@ (8003424 <HAL_RCC_ClockConfig+0x1ec>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e036      	b.n	800341c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d008      	beq.n	80033cc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ba:	4b1b      	ldr	r3, [pc, #108]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	4918      	ldr	r1, [pc, #96]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033d8:	4b13      	ldr	r3, [pc, #76]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	691b      	ldr	r3, [r3, #16]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	4910      	ldr	r1, [pc, #64]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033ec:	f000 f824 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 80033f0:	4602      	mov	r2, r0
 80033f2:	4b0d      	ldr	r3, [pc, #52]	@ (8003428 <HAL_RCC_ClockConfig+0x1f0>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	091b      	lsrs	r3, r3, #4
 80033f8:	f003 030f 	and.w	r3, r3, #15
 80033fc:	490b      	ldr	r1, [pc, #44]	@ (800342c <HAL_RCC_ClockConfig+0x1f4>)
 80033fe:	5ccb      	ldrb	r3, [r1, r3]
 8003400:	f003 031f 	and.w	r3, r3, #31
 8003404:	fa22 f303 	lsr.w	r3, r2, r3
 8003408:	4a09      	ldr	r2, [pc, #36]	@ (8003430 <HAL_RCC_ClockConfig+0x1f8>)
 800340a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800340c:	4b09      	ldr	r3, [pc, #36]	@ (8003434 <HAL_RCC_ClockConfig+0x1fc>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe f97d 	bl	8001710 <HAL_InitTick>
 8003416:	4603      	mov	r3, r0
 8003418:	72fb      	strb	r3, [r7, #11]

  return status;
 800341a:	7afb      	ldrb	r3, [r7, #11]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	40022000 	.word	0x40022000
 8003428:	40021000 	.word	0x40021000
 800342c:	0800d668 	.word	0x0800d668
 8003430:	20000010 	.word	0x20000010
 8003434:	20000014 	.word	0x20000014

08003438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	@ 0x24
 800343c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	61fb      	str	r3, [r7, #28]
 8003442:	2300      	movs	r3, #0
 8003444:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003446:	4b3e      	ldr	r3, [pc, #248]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	f003 030c 	and.w	r3, r3, #12
 800344e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003450:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	f003 0303 	and.w	r3, r3, #3
 8003458:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_GetSysClockFreq+0x34>
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	2b0c      	cmp	r3, #12
 8003464:	d121      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d11e      	bne.n	80034aa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800346c:	4b34      	ldr	r3, [pc, #208]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d107      	bne.n	8003488 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003478:	4b31      	ldr	r3, [pc, #196]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 800347a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800347e:	0a1b      	lsrs	r3, r3, #8
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e005      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003488:	4b2d      	ldr	r3, [pc, #180]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003494:	4a2b      	ldr	r2, [pc, #172]	@ (8003544 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800349c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80034a8:	e00a      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034b0:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x110>)
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	e004      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d101      	bne.n	80034c0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80034bc:	4b23      	ldr	r3, [pc, #140]	@ (800354c <HAL_RCC_GetSysClockFreq+0x114>)
 80034be:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	2b0c      	cmp	r3, #12
 80034c4:	d134      	bne.n	8003530 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034c6:	4b1e      	ldr	r3, [pc, #120]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	f003 0303 	and.w	r3, r3, #3
 80034ce:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d003      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0xa6>
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d003      	beq.n	80034e4 <HAL_RCC_GetSysClockFreq+0xac>
 80034dc:	e005      	b.n	80034ea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80034de:	4b1a      	ldr	r3, [pc, #104]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x110>)
 80034e0:	617b      	str	r3, [r7, #20]
      break;
 80034e2:	e005      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80034e4:	4b19      	ldr	r3, [pc, #100]	@ (800354c <HAL_RCC_GetSysClockFreq+0x114>)
 80034e6:	617b      	str	r3, [r7, #20]
      break;
 80034e8:	e002      	b.n	80034f0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	617b      	str	r3, [r7, #20]
      break;
 80034ee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034f0:	4b13      	ldr	r3, [pc, #76]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	3301      	adds	r3, #1
 80034fc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80034fe:	4b10      	ldr	r3, [pc, #64]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	0a1b      	lsrs	r3, r3, #8
 8003504:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	fb03 f202 	mul.w	r2, r3, r2
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003516:	4b0a      	ldr	r3, [pc, #40]	@ (8003540 <HAL_RCC_GetSysClockFreq+0x108>)
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	0e5b      	lsrs	r3, r3, #25
 800351c:	f003 0303 	and.w	r3, r3, #3
 8003520:	3301      	adds	r3, #1
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003530:	69bb      	ldr	r3, [r7, #24]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3724      	adds	r7, #36	@ 0x24
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40021000 	.word	0x40021000
 8003544:	0800d680 	.word	0x0800d680
 8003548:	00f42400 	.word	0x00f42400
 800354c:	007a1200 	.word	0x007a1200

08003550 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <HAL_RCC_GetHCLKFreq+0x14>)
 8003556:	681b      	ldr	r3, [r3, #0]
}
 8003558:	4618      	mov	r0, r3
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	20000010 	.word	0x20000010

08003568 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800356c:	f7ff fff0 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 8003570:	4602      	mov	r2, r0
 8003572:	4b06      	ldr	r3, [pc, #24]	@ (800358c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	0a1b      	lsrs	r3, r3, #8
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	4904      	ldr	r1, [pc, #16]	@ (8003590 <HAL_RCC_GetPCLK1Freq+0x28>)
 800357e:	5ccb      	ldrb	r3, [r1, r3]
 8003580:	f003 031f 	and.w	r3, r3, #31
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40021000 	.word	0x40021000
 8003590:	0800d678 	.word	0x0800d678

08003594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003598:	f7ff ffda 	bl	8003550 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	0adb      	lsrs	r3, r3, #11
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4904      	ldr	r1, [pc, #16]	@ (80035bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	0800d678 	.word	0x0800d678

080035c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035d8:	f7ff f9b6 	bl	8002948 <HAL_PWREx_GetVoltageRange>
 80035dc:	6178      	str	r0, [r7, #20]
 80035de:	e014      	b.n	800360a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035e0:	4b25      	ldr	r3, [pc, #148]	@ (8003678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e4:	4a24      	ldr	r2, [pc, #144]	@ (8003678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ec:	4b22      	ldr	r3, [pc, #136]	@ (8003678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035f8:	f7ff f9a6 	bl	8002948 <HAL_PWREx_GetVoltageRange>
 80035fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003602:	4a1d      	ldr	r2, [pc, #116]	@ (8003678 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003608:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003610:	d10b      	bne.n	800362a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b80      	cmp	r3, #128	@ 0x80
 8003616:	d919      	bls.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2ba0      	cmp	r3, #160	@ 0xa0
 800361c:	d902      	bls.n	8003624 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800361e:	2302      	movs	r3, #2
 8003620:	613b      	str	r3, [r7, #16]
 8003622:	e013      	b.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003624:	2301      	movs	r3, #1
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	e010      	b.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b80      	cmp	r3, #128	@ 0x80
 800362e:	d902      	bls.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003630:	2303      	movs	r3, #3
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e00a      	b.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b80      	cmp	r3, #128	@ 0x80
 800363a:	d102      	bne.n	8003642 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800363c:	2302      	movs	r3, #2
 800363e:	613b      	str	r3, [r7, #16]
 8003640:	e004      	b.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b70      	cmp	r3, #112	@ 0x70
 8003646:	d101      	bne.n	800364c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003648:	2301      	movs	r3, #1
 800364a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800364c:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f023 0207 	bic.w	r2, r3, #7
 8003654:	4909      	ldr	r1, [pc, #36]	@ (800367c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800365c:	4b07      	ldr	r3, [pc, #28]	@ (800367c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	429a      	cmp	r2, r3
 8003668:	d001      	beq.n	800366e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e000      	b.n	8003670 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3718      	adds	r7, #24
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40021000 	.word	0x40021000
 800367c:	40022000 	.word	0x40022000

08003680 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003688:	2300      	movs	r3, #0
 800368a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800368c:	2300      	movs	r3, #0
 800368e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003698:	2b00      	cmp	r3, #0
 800369a:	d031      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036a4:	d01a      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80036a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80036aa:	d814      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d009      	beq.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80036b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036b4:	d10f      	bne.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80036b6:	4b5d      	ldr	r3, [pc, #372]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	4a5c      	ldr	r2, [pc, #368]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036c2:	e00c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	3304      	adds	r3, #4
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f000 f9de 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80036d4:	e003      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	74fb      	strb	r3, [r7, #19]
      break;
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80036dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036de:	7cfb      	ldrb	r3, [r7, #19]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d10b      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e4:	4b51      	ldr	r3, [pc, #324]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036f2:	494e      	ldr	r1, [pc, #312]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036fa:	e001      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 809e 	beq.w	800384a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800370e:	2300      	movs	r3, #0
 8003710:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003712:	4b46      	ldr	r3, [pc, #280]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003728:	4b40      	ldr	r3, [pc, #256]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800372c:	4a3f      	ldr	r2, [pc, #252]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800372e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003732:	6593      	str	r3, [r2, #88]	@ 0x58
 8003734:	4b3d      	ldr	r3, [pc, #244]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	60bb      	str	r3, [r7, #8]
 800373e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003740:	2301      	movs	r3, #1
 8003742:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003744:	4b3a      	ldr	r3, [pc, #232]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a39      	ldr	r2, [pc, #228]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800374a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003750:	f7fe f82e 	bl	80017b0 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003756:	e009      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003758:	f7fe f82a 	bl	80017b0 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d902      	bls.n	800376c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	74fb      	strb	r3, [r7, #19]
        break;
 800376a:	e005      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800376c:	4b30      	ldr	r3, [pc, #192]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003774:	2b00      	cmp	r3, #0
 8003776:	d0ef      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d15a      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800377e:	4b2b      	ldr	r3, [pc, #172]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003780:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003788:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d01e      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	429a      	cmp	r2, r3
 8003798:	d019      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800379a:	4b24      	ldr	r3, [pc, #144]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800379c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037a6:	4b21      	ldr	r3, [pc, #132]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037ac:	4a1f      	ldr	r2, [pc, #124]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037b6:	4b1d      	ldr	r3, [pc, #116]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037bc:	4a1b      	ldr	r2, [pc, #108]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80037c6:	4a19      	ldr	r2, [pc, #100]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	f003 0301 	and.w	r3, r3, #1
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fd ffea 	bl	80017b0 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037de:	e00b      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e0:	f7fd ffe6 	bl	80017b0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d902      	bls.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	74fb      	strb	r3, [r7, #19]
            break;
 80037f6:	e006      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80037fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d0ec      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003806:	7cfb      	ldrb	r3, [r7, #19]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800380c:	4b07      	ldr	r3, [pc, #28]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800380e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003812:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381a:	4904      	ldr	r1, [pc, #16]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003822:	e009      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003824:	7cfb      	ldrb	r3, [r7, #19]
 8003826:	74bb      	strb	r3, [r7, #18]
 8003828:	e006      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003834:	7cfb      	ldrb	r3, [r7, #19]
 8003836:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003838:	7c7b      	ldrb	r3, [r7, #17]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d105      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800383e:	4b8a      	ldr	r3, [pc, #552]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003842:	4a89      	ldr	r2, [pc, #548]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003844:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003848:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	2b00      	cmp	r3, #0
 8003854:	d00a      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003856:	4b84      	ldr	r3, [pc, #528]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	4980      	ldr	r1, [pc, #512]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003878:	4b7b      	ldr	r3, [pc, #492]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800387a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800387e:	f023 020c 	bic.w	r2, r3, #12
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	4978      	ldr	r1, [pc, #480]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003888:	4313      	orrs	r3, r2
 800388a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0320 	and.w	r3, r3, #32
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800389a:	4b73      	ldr	r3, [pc, #460]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800389c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038a0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	496f      	ldr	r1, [pc, #444]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038c2:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038ca:	4967      	ldr	r1, [pc, #412]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038cc:	4313      	orrs	r3, r2
 80038ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80038de:	4b62      	ldr	r3, [pc, #392]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038e4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ec:	495e      	ldr	r1, [pc, #376]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038ee:	4313      	orrs	r3, r2
 80038f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00a      	beq.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003900:	4b59      	ldr	r3, [pc, #356]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003906:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800390e:	4956      	ldr	r1, [pc, #344]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003910:	4313      	orrs	r3, r2
 8003912:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00a      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003922:	4b51      	ldr	r3, [pc, #324]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003924:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003928:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003930:	494d      	ldr	r1, [pc, #308]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003932:	4313      	orrs	r3, r2
 8003934:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d028      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003944:	4b48      	ldr	r3, [pc, #288]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003946:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800394a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	4945      	ldr	r1, [pc, #276]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003954:	4313      	orrs	r3, r2
 8003956:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800395e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003962:	d106      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003964:	4b40      	ldr	r3, [pc, #256]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	4a3f      	ldr	r2, [pc, #252]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800396a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800396e:	60d3      	str	r3, [r2, #12]
 8003970:	e011      	b.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800397a:	d10c      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	3304      	adds	r3, #4
 8003980:	2101      	movs	r1, #1
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f882 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003988:	4603      	mov	r3, r0
 800398a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800398c:	7cfb      	ldrb	r3, [r7, #19]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003992:	7cfb      	ldrb	r3, [r7, #19]
 8003994:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d028      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039a2:	4b31      	ldr	r3, [pc, #196]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039b0:	492d      	ldr	r1, [pc, #180]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80039c0:	d106      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80039c2:	4b29      	ldr	r3, [pc, #164]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a28      	ldr	r2, [pc, #160]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80039c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80039cc:	60d3      	str	r3, [r2, #12]
 80039ce:	e011      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	2101      	movs	r1, #1
 80039e0:	4618      	mov	r0, r3
 80039e2:	f000 f853 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 80039e6:	4603      	mov	r3, r0
 80039e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80039f0:	7cfb      	ldrb	r3, [r7, #19]
 80039f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01c      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a00:	4b19      	ldr	r3, [pc, #100]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a0e:	4916      	ldr	r1, [pc, #88]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	3304      	adds	r3, #4
 8003a24:	2102      	movs	r1, #2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f830 	bl	8003a8c <RCCEx_PLLSAI1_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a30:	7cfb      	ldrb	r3, [r7, #19]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d001      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003a36:	7cfb      	ldrb	r3, [r7, #19]
 8003a38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00a      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a46:	4b08      	ldr	r3, [pc, #32]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a54:	4904      	ldr	r1, [pc, #16]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3718      	adds	r7, #24
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40021000 	.word	0x40021000

08003a6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a04      	ldr	r2, [pc, #16]	@ (8003a88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003a76:	f043 0304 	orr.w	r3, r3, #4
 8003a7a:	6013      	str	r3, [r2, #0]
}
 8003a7c:	bf00      	nop
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	40021000 	.word	0x40021000

08003a8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a9a:	4b74      	ldr	r3, [pc, #464]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	f003 0303 	and.w	r3, r3, #3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d018      	beq.n	8003ad8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003aa6:	4b71      	ldr	r3, [pc, #452]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0203 	and.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d10d      	bne.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
       ||
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003abe:	4b6b      	ldr	r3, [pc, #428]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
       ||
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d047      	beq.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e044      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d018      	beq.n	8003b12 <RCCEx_PLLSAI1_Config+0x86>
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d825      	bhi.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d002      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x62>
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d009      	beq.n	8003b00 <RCCEx_PLLSAI1_Config+0x74>
 8003aec:	e020      	b.n	8003b30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aee:	4b5f      	ldr	r3, [pc, #380]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d11d      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003afe:	e01a      	b.n	8003b36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003b00:	4b5a      	ldr	r3, [pc, #360]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d116      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b10:	e013      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b12:	4b56      	ldr	r3, [pc, #344]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b1e:	4b53      	ldr	r3, [pc, #332]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b2e:	e006      	b.n	8003b3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	73fb      	strb	r3, [r7, #15]
      break;
 8003b34:	e004      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b36:	bf00      	nop
 8003b38:	e002      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b40:	7bfb      	ldrb	r3, [r7, #15]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10d      	bne.n	8003b62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b46:	4b49      	ldr	r3, [pc, #292]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6819      	ldr	r1, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	4943      	ldr	r1, [pc, #268]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b62:	7bfb      	ldrb	r3, [r7, #15]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d17c      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b68:	4b40      	ldr	r3, [pc, #256]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3f      	ldr	r2, [pc, #252]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b6e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b74:	f7fd fe1c 	bl	80017b0 <HAL_GetTick>
 8003b78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b7a:	e009      	b.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b7c:	f7fd fe18 	bl	80017b0 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d902      	bls.n	8003b90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	73fb      	strb	r3, [r7, #15]
        break;
 8003b8e:	e005      	b.n	8003b9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b90:	4b36      	ldr	r3, [pc, #216]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ef      	bne.n	8003b7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d15f      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d110      	bne.n	8003bca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ba8:	4b30      	ldr	r3, [pc, #192]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 8003bb0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	6892      	ldr	r2, [r2, #8]
 8003bb8:	0211      	lsls	r1, r2, #8
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68d2      	ldr	r2, [r2, #12]
 8003bbe:	06d2      	lsls	r2, r2, #27
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	492a      	ldr	r1, [pc, #168]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
 8003bc8:	e027      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d112      	bne.n	8003bf6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd0:	4b26      	ldr	r3, [pc, #152]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003bd8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6892      	ldr	r2, [r2, #8]
 8003be0:	0211      	lsls	r1, r2, #8
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6912      	ldr	r2, [r2, #16]
 8003be6:	0852      	lsrs	r2, r2, #1
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0552      	lsls	r2, r2, #21
 8003bec:	430a      	orrs	r2, r1
 8003bee:	491f      	ldr	r1, [pc, #124]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
 8003bf4:	e011      	b.n	8003c1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bfe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6892      	ldr	r2, [r2, #8]
 8003c06:	0211      	lsls	r1, r2, #8
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	6952      	ldr	r2, [r2, #20]
 8003c0c:	0852      	lsrs	r2, r2, #1
 8003c0e:	3a01      	subs	r2, #1
 8003c10:	0652      	lsls	r2, r2, #25
 8003c12:	430a      	orrs	r2, r1
 8003c14:	4915      	ldr	r1, [pc, #84]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003c1a:	4b14      	ldr	r3, [pc, #80]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c26:	f7fd fdc3 	bl	80017b0 <HAL_GetTick>
 8003c2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c2c:	e009      	b.n	8003c42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c2e:	f7fd fdbf 	bl	80017b0 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d902      	bls.n	8003c42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003c40:	e005      	b.n	8003c4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c42:	4b0a      	ldr	r3, [pc, #40]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0ef      	beq.n	8003c2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c54:	4b05      	ldr	r3, [pc, #20]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c56:	691a      	ldr	r2, [r3, #16]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	4903      	ldr	r1, [pc, #12]	@ (8003c6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	40021000 	.word	0x40021000

08003c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e040      	b.n	8003d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd fbac 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	@ 0x24
 8003c9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 fade 	bl	8004278 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f000 f8af 	bl	8003e20 <UART_SetConfig>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e01b      	b.n	8003d04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fb5d 	bl	80043bc <UART_CheckIdleState>
 8003d02:	4603      	mov	r3, r0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08a      	sub	sp, #40	@ 0x28
 8003d10:	af02      	add	r7, sp, #8
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	60b9      	str	r1, [r7, #8]
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d20:	2b20      	cmp	r3, #32
 8003d22:	d177      	bne.n	8003e14 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_UART_Transmit+0x24>
 8003d2a:	88fb      	ldrh	r3, [r7, #6]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e070      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2221      	movs	r2, #33	@ 0x21
 8003d40:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d42:	f7fd fd35 	bl	80017b0 <HAL_GetTick>
 8003d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	88fa      	ldrh	r2, [r7, #6]
 8003d4c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	88fa      	ldrh	r2, [r7, #6]
 8003d54:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d60:	d108      	bne.n	8003d74 <HAL_UART_Transmit+0x68>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d104      	bne.n	8003d74 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	61bb      	str	r3, [r7, #24]
 8003d72:	e003      	b.n	8003d7c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d7c:	e02f      	b.n	8003dde <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2200      	movs	r2, #0
 8003d86:	2180      	movs	r1, #128	@ 0x80
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fbbf 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d004      	beq.n	8003d9e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2220      	movs	r2, #32
 8003d98:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e03b      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d10b      	bne.n	8003dbc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	881a      	ldrh	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003db0:	b292      	uxth	r2, r2
 8003db2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	3302      	adds	r3, #2
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	e007      	b.n	8003dcc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dbc:	69fb      	ldr	r3, [r7, #28]
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	3b01      	subs	r3, #1
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1c9      	bne.n	8003d7e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	9300      	str	r3, [sp, #0]
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	2200      	movs	r2, #0
 8003df2:	2140      	movs	r1, #64	@ 0x40
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fb89 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d004      	beq.n	8003e0a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e005      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003e10:	2300      	movs	r3, #0
 8003e12:	e000      	b.n	8003e16 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003e14:	2302      	movs	r3, #2
  }
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3720      	adds	r7, #32
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e24:	b08a      	sub	sp, #40	@ 0x28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	431a      	orrs	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	69db      	ldr	r3, [r3, #28]
 8003e44:	4313      	orrs	r3, r2
 8003e46:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4bb4      	ldr	r3, [pc, #720]	@ (8004120 <UART_SetConfig+0x300>)
 8003e50:	4013      	ands	r3, r2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	6812      	ldr	r2, [r2, #0]
 8003e56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	430a      	orrs	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	699b      	ldr	r3, [r3, #24]
 8003e76:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4aa9      	ldr	r2, [pc, #676]	@ (8004124 <UART_SetConfig+0x304>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d004      	beq.n	8003e8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4aa0      	ldr	r2, [pc, #640]	@ (8004128 <UART_SetConfig+0x308>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d126      	bne.n	8003ef8 <UART_SetConfig+0xd8>
 8003eaa:	4ba0      	ldr	r3, [pc, #640]	@ (800412c <UART_SetConfig+0x30c>)
 8003eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eb0:	f003 0303 	and.w	r3, r3, #3
 8003eb4:	2b03      	cmp	r3, #3
 8003eb6:	d81b      	bhi.n	8003ef0 <UART_SetConfig+0xd0>
 8003eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec0 <UART_SetConfig+0xa0>)
 8003eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ebe:	bf00      	nop
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ee1 	.word	0x08003ee1
 8003ec8:	08003ed9 	.word	0x08003ed9
 8003ecc:	08003ee9 	.word	0x08003ee9
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ed6:	e080      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ede:	e07c      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003ee0:	2304      	movs	r3, #4
 8003ee2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ee6:	e078      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003ee8:	2308      	movs	r3, #8
 8003eea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003eee:	e074      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003ef0:	2310      	movs	r3, #16
 8003ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003ef6:	e070      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a8c      	ldr	r2, [pc, #560]	@ (8004130 <UART_SetConfig+0x310>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d138      	bne.n	8003f74 <UART_SetConfig+0x154>
 8003f02:	4b8a      	ldr	r3, [pc, #552]	@ (800412c <UART_SetConfig+0x30c>)
 8003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b0c      	cmp	r3, #12
 8003f0e:	d82d      	bhi.n	8003f6c <UART_SetConfig+0x14c>
 8003f10:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <UART_SetConfig+0xf8>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f4d 	.word	0x08003f4d
 8003f1c:	08003f6d 	.word	0x08003f6d
 8003f20:	08003f6d 	.word	0x08003f6d
 8003f24:	08003f6d 	.word	0x08003f6d
 8003f28:	08003f5d 	.word	0x08003f5d
 8003f2c:	08003f6d 	.word	0x08003f6d
 8003f30:	08003f6d 	.word	0x08003f6d
 8003f34:	08003f6d 	.word	0x08003f6d
 8003f38:	08003f55 	.word	0x08003f55
 8003f3c:	08003f6d 	.word	0x08003f6d
 8003f40:	08003f6d 	.word	0x08003f6d
 8003f44:	08003f6d 	.word	0x08003f6d
 8003f48:	08003f65 	.word	0x08003f65
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f52:	e042      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003f54:	2302      	movs	r3, #2
 8003f56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f5a:	e03e      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003f5c:	2304      	movs	r3, #4
 8003f5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f62:	e03a      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003f64:	2308      	movs	r3, #8
 8003f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f6a:	e036      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003f6c:	2310      	movs	r3, #16
 8003f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003f72:	e032      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a6a      	ldr	r2, [pc, #424]	@ (8004124 <UART_SetConfig+0x304>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d12a      	bne.n	8003fd4 <UART_SetConfig+0x1b4>
 8003f7e:	4b6b      	ldr	r3, [pc, #428]	@ (800412c <UART_SetConfig+0x30c>)
 8003f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f84:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003f88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f8c:	d01a      	beq.n	8003fc4 <UART_SetConfig+0x1a4>
 8003f8e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f92:	d81b      	bhi.n	8003fcc <UART_SetConfig+0x1ac>
 8003f94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f98:	d00c      	beq.n	8003fb4 <UART_SetConfig+0x194>
 8003f9a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f9e:	d815      	bhi.n	8003fcc <UART_SetConfig+0x1ac>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d003      	beq.n	8003fac <UART_SetConfig+0x18c>
 8003fa4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fa8:	d008      	beq.n	8003fbc <UART_SetConfig+0x19c>
 8003faa:	e00f      	b.n	8003fcc <UART_SetConfig+0x1ac>
 8003fac:	2300      	movs	r3, #0
 8003fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fb2:	e012      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fba:	e00e      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003fbc:	2304      	movs	r3, #4
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e00a      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003fc4:	2308      	movs	r3, #8
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e006      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003fcc:	2310      	movs	r3, #16
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e002      	b.n	8003fda <UART_SetConfig+0x1ba>
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a51      	ldr	r2, [pc, #324]	@ (8004124 <UART_SetConfig+0x304>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d17a      	bne.n	80040da <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003fe4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003fe8:	2b08      	cmp	r3, #8
 8003fea:	d824      	bhi.n	8004036 <UART_SetConfig+0x216>
 8003fec:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <UART_SetConfig+0x1d4>)
 8003fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff2:	bf00      	nop
 8003ff4:	08004019 	.word	0x08004019
 8003ff8:	08004037 	.word	0x08004037
 8003ffc:	08004021 	.word	0x08004021
 8004000:	08004037 	.word	0x08004037
 8004004:	08004027 	.word	0x08004027
 8004008:	08004037 	.word	0x08004037
 800400c:	08004037 	.word	0x08004037
 8004010:	08004037 	.word	0x08004037
 8004014:	0800402f 	.word	0x0800402f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004018:	f7ff faa6 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 800401c:	61f8      	str	r0, [r7, #28]
        break;
 800401e:	e010      	b.n	8004042 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004020:	4b44      	ldr	r3, [pc, #272]	@ (8004134 <UART_SetConfig+0x314>)
 8004022:	61fb      	str	r3, [r7, #28]
        break;
 8004024:	e00d      	b.n	8004042 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004026:	f7ff fa07 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 800402a:	61f8      	str	r0, [r7, #28]
        break;
 800402c:	e009      	b.n	8004042 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004032:	61fb      	str	r3, [r7, #28]
        break;
 8004034:	e005      	b.n	8004042 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004036:	2300      	movs	r3, #0
 8004038:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004040:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8107 	beq.w	8004258 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	4413      	add	r3, r2
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	429a      	cmp	r2, r3
 8004058:	d305      	bcc.n	8004066 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004060:	69fa      	ldr	r2, [r7, #28]
 8004062:	429a      	cmp	r2, r3
 8004064:	d903      	bls.n	800406e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800406c:	e0f4      	b.n	8004258 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2200      	movs	r2, #0
 8004072:	461c      	mov	r4, r3
 8004074:	4615      	mov	r5, r2
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	022b      	lsls	r3, r5, #8
 8004080:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004084:	0222      	lsls	r2, r4, #8
 8004086:	68f9      	ldr	r1, [r7, #12]
 8004088:	6849      	ldr	r1, [r1, #4]
 800408a:	0849      	lsrs	r1, r1, #1
 800408c:	2000      	movs	r0, #0
 800408e:	4688      	mov	r8, r1
 8004090:	4681      	mov	r9, r0
 8004092:	eb12 0a08 	adds.w	sl, r2, r8
 8004096:	eb43 0b09 	adc.w	fp, r3, r9
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040a8:	4650      	mov	r0, sl
 80040aa:	4659      	mov	r1, fp
 80040ac:	f7fc fd0e 	bl	8000acc <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4613      	mov	r3, r2
 80040b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040be:	d308      	bcc.n	80040d2 <UART_SetConfig+0x2b2>
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c6:	d204      	bcs.n	80040d2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	60da      	str	r2, [r3, #12]
 80040d0:	e0c2      	b.n	8004258 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80040d8:	e0be      	b.n	8004258 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040e2:	d16a      	bne.n	80041ba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80040e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80040e8:	2b08      	cmp	r3, #8
 80040ea:	d834      	bhi.n	8004156 <UART_SetConfig+0x336>
 80040ec:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <UART_SetConfig+0x2d4>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004119 	.word	0x08004119
 80040f8:	08004139 	.word	0x08004139
 80040fc:	08004141 	.word	0x08004141
 8004100:	08004157 	.word	0x08004157
 8004104:	08004147 	.word	0x08004147
 8004108:	08004157 	.word	0x08004157
 800410c:	08004157 	.word	0x08004157
 8004110:	08004157 	.word	0x08004157
 8004114:	0800414f 	.word	0x0800414f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004118:	f7ff fa26 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 800411c:	61f8      	str	r0, [r7, #28]
        break;
 800411e:	e020      	b.n	8004162 <UART_SetConfig+0x342>
 8004120:	efff69f3 	.word	0xefff69f3
 8004124:	40008000 	.word	0x40008000
 8004128:	40013800 	.word	0x40013800
 800412c:	40021000 	.word	0x40021000
 8004130:	40004400 	.word	0x40004400
 8004134:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004138:	f7ff fa2c 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 800413c:	61f8      	str	r0, [r7, #28]
        break;
 800413e:	e010      	b.n	8004162 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004140:	4b4c      	ldr	r3, [pc, #304]	@ (8004274 <UART_SetConfig+0x454>)
 8004142:	61fb      	str	r3, [r7, #28]
        break;
 8004144:	e00d      	b.n	8004162 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004146:	f7ff f977 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 800414a:	61f8      	str	r0, [r7, #28]
        break;
 800414c:	e009      	b.n	8004162 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800414e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004152:	61fb      	str	r3, [r7, #28]
        break;
 8004154:	e005      	b.n	8004162 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d077      	beq.n	8004258 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	005a      	lsls	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	441a      	add	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	fbb2 f3f3 	udiv	r3, r2, r3
 800417c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b0f      	cmp	r3, #15
 8004182:	d916      	bls.n	80041b2 <UART_SetConfig+0x392>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800418a:	d212      	bcs.n	80041b2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	b29b      	uxth	r3, r3
 8004190:	f023 030f 	bic.w	r3, r3, #15
 8004194:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	085b      	lsrs	r3, r3, #1
 800419a:	b29b      	uxth	r3, r3
 800419c:	f003 0307 	and.w	r3, r3, #7
 80041a0:	b29a      	uxth	r2, r3
 80041a2:	8afb      	ldrh	r3, [r7, #22]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	8afa      	ldrh	r2, [r7, #22]
 80041ae:	60da      	str	r2, [r3, #12]
 80041b0:	e052      	b.n	8004258 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80041b8:	e04e      	b.n	8004258 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80041ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d827      	bhi.n	8004212 <UART_SetConfig+0x3f2>
 80041c2:	a201      	add	r2, pc, #4	@ (adr r2, 80041c8 <UART_SetConfig+0x3a8>)
 80041c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041c8:	080041ed 	.word	0x080041ed
 80041cc:	080041f5 	.word	0x080041f5
 80041d0:	080041fd 	.word	0x080041fd
 80041d4:	08004213 	.word	0x08004213
 80041d8:	08004203 	.word	0x08004203
 80041dc:	08004213 	.word	0x08004213
 80041e0:	08004213 	.word	0x08004213
 80041e4:	08004213 	.word	0x08004213
 80041e8:	0800420b 	.word	0x0800420b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041ec:	f7ff f9bc 	bl	8003568 <HAL_RCC_GetPCLK1Freq>
 80041f0:	61f8      	str	r0, [r7, #28]
        break;
 80041f2:	e014      	b.n	800421e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80041f4:	f7ff f9ce 	bl	8003594 <HAL_RCC_GetPCLK2Freq>
 80041f8:	61f8      	str	r0, [r7, #28]
        break;
 80041fa:	e010      	b.n	800421e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041fc:	4b1d      	ldr	r3, [pc, #116]	@ (8004274 <UART_SetConfig+0x454>)
 80041fe:	61fb      	str	r3, [r7, #28]
        break;
 8004200:	e00d      	b.n	800421e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004202:	f7ff f919 	bl	8003438 <HAL_RCC_GetSysClockFreq>
 8004206:	61f8      	str	r0, [r7, #28]
        break;
 8004208:	e009      	b.n	800421e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800420a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800420e:	61fb      	str	r3, [r7, #28]
        break;
 8004210:	e005      	b.n	800421e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004212:	2300      	movs	r3, #0
 8004214:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800421c:	bf00      	nop
    }

    if (pclk != 0U)
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d019      	beq.n	8004258 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	085a      	lsrs	r2, r3, #1
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	441a      	add	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	fbb2 f3f3 	udiv	r3, r2, r3
 8004236:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b0f      	cmp	r3, #15
 800423c:	d909      	bls.n	8004252 <UART_SetConfig+0x432>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004244:	d205      	bcs.n	8004252 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004246:	69bb      	ldr	r3, [r7, #24]
 8004248:	b29a      	uxth	r2, r3
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	60da      	str	r2, [r3, #12]
 8004250:	e002      	b.n	8004258 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004264:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004268:	4618      	mov	r0, r3
 800426a:	3728      	adds	r7, #40	@ 0x28
 800426c:	46bd      	mov	sp, r7
 800426e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004272:	bf00      	nop
 8004274:	00f42400 	.word	0x00f42400

08004278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	430a      	orrs	r2, r1
 80042a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a6:	f003 0301 	and.w	r3, r3, #1
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	430a      	orrs	r2, r1
 80042c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	f003 0302 	and.w	r3, r3, #2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ea:	f003 0304 	and.w	r3, r3, #4
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	f003 0310 	and.w	r3, r3, #16
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432e:	f003 0320 	and.w	r3, r3, #32
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01a      	beq.n	800438e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004376:	d10a      	bne.n	800438e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	430a      	orrs	r2, r1
 800438c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	430a      	orrs	r2, r1
 80043ae:	605a      	str	r2, [r3, #4]
  }
}
 80043b0:	bf00      	nop
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b098      	sub	sp, #96	@ 0x60
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80043cc:	f7fd f9f0 	bl	80017b0 <HAL_GetTick>
 80043d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d12e      	bne.n	800443e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80043e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f88c 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d021      	beq.n	800443e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004402:	e853 3f00 	ldrex	r3, [r3]
 8004406:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800440a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800440e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	461a      	mov	r2, r3
 8004416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004418:	647b      	str	r3, [r7, #68]	@ 0x44
 800441a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800441e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004420:	e841 2300 	strex	r3, r2, [r1]
 8004424:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d1e6      	bne.n	80043fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2220      	movs	r2, #32
 8004430:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e062      	b.n	8004504 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	2b04      	cmp	r3, #4
 800444a:	d149      	bne.n	80044e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800444c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004454:	2200      	movs	r2, #0
 8004456:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 f856 	bl	800450c <UART_WaitOnFlagUntilTimeout>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d03c      	beq.n	80044e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800446e:	e853 3f00 	ldrex	r3, [r3]
 8004472:	623b      	str	r3, [r7, #32]
   return(result);
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800447a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	461a      	mov	r2, r3
 8004482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004484:	633b      	str	r3, [r7, #48]	@ 0x30
 8004486:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004488:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800448a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800448c:	e841 2300 	strex	r3, r2, [r1]
 8004490:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e6      	bne.n	8004466 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3308      	adds	r3, #8
 800449e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f023 0301 	bic.w	r3, r3, #1
 80044ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	3308      	adds	r3, #8
 80044b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044b8:	61fa      	str	r2, [r7, #28]
 80044ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	69fa      	ldr	r2, [r7, #28]
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	617b      	str	r3, [r7, #20]
   return(result);
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2220      	movs	r2, #32
 80044d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e011      	b.n	8004504 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004502:	2300      	movs	r3, #0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3758      	adds	r7, #88	@ 0x58
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800451c:	e04f      	b.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d04b      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fd f943 	bl	80017b0 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <UART_WaitOnFlagUntilTimeout+0x30>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e04e      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b00      	cmp	r3, #0
 800454c:	d037      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b80      	cmp	r3, #128	@ 0x80
 8004552:	d034      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	2b40      	cmp	r3, #64	@ 0x40
 8004558:	d031      	beq.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	69db      	ldr	r3, [r3, #28]
 8004560:	f003 0308 	and.w	r3, r3, #8
 8004564:	2b08      	cmp	r3, #8
 8004566:	d110      	bne.n	800458a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2208      	movs	r2, #8
 800456e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 f838 	bl	80045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2208      	movs	r2, #8
 800457a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e029      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004598:	d111      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80045a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80045a4:	68f8      	ldr	r0, [r7, #12]
 80045a6:	f000 f81e 	bl	80045e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2220      	movs	r2, #32
 80045ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e00f      	b.n	80045de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	69da      	ldr	r2, [r3, #28]
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	4013      	ands	r3, r2
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	bf0c      	ite	eq
 80045ce:	2301      	moveq	r3, #1
 80045d0:	2300      	movne	r3, #0
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	461a      	mov	r2, r3
 80045d6:	79fb      	ldrb	r3, [r7, #7]
 80045d8:	429a      	cmp	r2, r3
 80045da:	d0a0      	beq.n	800451e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3710      	adds	r7, #16
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045e6:	b480      	push	{r7}
 80045e8:	b095      	sub	sp, #84	@ 0x54
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f6:	e853 3f00 	ldrex	r3, [r3]
 80045fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	461a      	mov	r2, r3
 800460a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800460c:	643b      	str	r3, [r7, #64]	@ 0x40
 800460e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004612:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004614:	e841 2300 	strex	r3, r2, [r1]
 8004618:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800461a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1e6      	bne.n	80045ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	3308      	adds	r3, #8
 8004626:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f023 0301 	bic.w	r3, r3, #1
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	3308      	adds	r3, #8
 800463e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004640:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004642:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004646:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800464e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e5      	bne.n	8004620 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004658:	2b01      	cmp	r3, #1
 800465a:	d118      	bne.n	800468e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	e853 3f00 	ldrex	r3, [r3]
 8004668:	60bb      	str	r3, [r7, #8]
   return(result);
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f023 0310 	bic.w	r3, r3, #16
 8004670:	647b      	str	r3, [r7, #68]	@ 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467e:	6979      	ldr	r1, [r7, #20]
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	e841 2300 	strex	r3, r2, [r1]
 8004686:	613b      	str	r3, [r7, #16]
   return(result);
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1e6      	bne.n	800465c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80046a2:	bf00      	nop
 80046a4:	3754      	adds	r7, #84	@ 0x54
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
	...

080046b0 <_fminf>:
 80046b0:	f001 bcba 	b.w	8006028 <fminf>

080046b4 <neai_classification_init>:
 80046b4:	b570      	push	{r4, r5, r6, lr}
 80046b6:	4a78      	ldr	r2, [pc, #480]	@ (8004898 <neai_classification_init+0x1e4>)
 80046b8:	4b78      	ldr	r3, [pc, #480]	@ (800489c <neai_classification_init+0x1e8>)
 80046ba:	4d79      	ldr	r5, [pc, #484]	@ (80048a0 <neai_classification_init+0x1ec>)
 80046bc:	4c79      	ldr	r4, [pc, #484]	@ (80048a4 <neai_classification_init+0x1f0>)
 80046be:	4e7a      	ldr	r6, [pc, #488]	@ (80048a8 <neai_classification_init+0x1f4>)
 80046c0:	2140      	movs	r1, #64	@ 0x40
 80046c2:	ed2d 8b02 	vpush	{d8}
 80046c6:	8011      	strh	r1, [r2, #0]
 80046c8:	4a78      	ldr	r2, [pc, #480]	@ (80048ac <neai_classification_init+0x1f8>)
 80046ca:	605d      	str	r5, [r3, #4]
 80046cc:	2180      	movs	r1, #128	@ 0x80
 80046ce:	8011      	strh	r1, [r2, #0]
 80046d0:	4977      	ldr	r1, [pc, #476]	@ (80048b0 <neai_classification_init+0x1fc>)
 80046d2:	4a78      	ldr	r2, [pc, #480]	@ (80048b4 <neai_classification_init+0x200>)
 80046d4:	6066      	str	r6, [r4, #4]
 80046d6:	f500 6540 	add.w	r5, r0, #3072	@ 0xc00
 80046da:	600d      	str	r5, [r1, #0]
 80046dc:	f500 51c0 	add.w	r1, r0, #6144	@ 0x1800
 80046e0:	edd1 7a00 	vldr	s15, [r1]
 80046e4:	6010      	str	r0, [r2, #0]
 80046e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ea:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	ee17 3a90 	vmov	r3, s15
 80046f4:	edd1 7a01 	vldr	s15, [r1, #4]
 80046f8:	4d6f      	ldr	r5, [pc, #444]	@ (80048b8 <neai_classification_init+0x204>)
 80046fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046fe:	f44f 1600 	mov.w	r6, #2097152	@ 0x200000
 8004702:	ee17 2a90 	vmov	r2, s15
 8004706:	6026      	str	r6, [r4, #0]
 8004708:	f102 0c02 	add.w	ip, r2, #2
 800470c:	f202 6402 	addw	r4, r2, #1538	@ 0x602
 8004710:	f503 7640 	add.w	r6, r3, #768	@ 0x300
 8004714:	f503 71c0 	add.w	r1, r3, #384	@ 0x180
 8004718:	441a      	add	r2, r3
 800471a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800471e:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8004722:	4423      	add	r3, r4
 8004724:	eb0c 0c46 	add.w	ip, ip, r6, lsl #1
 8004728:	f202 6202 	addw	r2, r2, #1538	@ 0x602
 800472c:	edc5 7a00 	vstr	s15, [r5]
 8004730:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004734:	eb00 0684 	add.w	r6, r0, r4, lsl #2
 8004738:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800473c:	eb00 048c 	add.w	r4, r0, ip, lsl #2
 8004740:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8004744:	4d5d      	ldr	r5, [pc, #372]	@ (80048bc <neai_classification_init+0x208>)
 8004746:	edd1 7a00 	vldr	s15, [r1]
 800474a:	f500 50c0 	add.w	r0, r0, #6144	@ 0x1800
 800474e:	3008      	adds	r0, #8
 8004750:	6028      	str	r0, [r5, #0]
 8004752:	485b      	ldr	r0, [pc, #364]	@ (80048c0 <neai_classification_init+0x20c>)
 8004754:	6006      	str	r6, [r0, #0]
 8004756:	485b      	ldr	r0, [pc, #364]	@ (80048c4 <neai_classification_init+0x210>)
 8004758:	6002      	str	r2, [r0, #0]
 800475a:	4a5b      	ldr	r2, [pc, #364]	@ (80048c8 <neai_classification_init+0x214>)
 800475c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8004760:	6014      	str	r4, [r2, #0]
 8004762:	eef4 7a47 	vcmp.f32	s15, s14
 8004766:	4a59      	ldr	r2, [pc, #356]	@ (80048cc <neai_classification_init+0x218>)
 8004768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476c:	6013      	str	r3, [r2, #0]
 800476e:	d17b      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004770:	ed91 7a01 	vldr	s14, [r1, #4]
 8004774:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8004778:	eeb4 7a67 	vcmp.f32	s14, s15
 800477c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004780:	d172      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004782:	eddf 7a53 	vldr	s15, [pc, #332]	@ 80048d0 <neai_classification_init+0x21c>
 8004786:	ed91 7a02 	vldr	s14, [r1, #8]
 800478a:	eeb4 7a67 	vcmp.f32	s14, s15
 800478e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004792:	d169      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004794:	ed91 7a03 	vldr	s14, [r1, #12]
 8004798:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800479c:	eeb4 7a67 	vcmp.f32	s14, s15
 80047a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047a4:	d160      	bne.n	8004868 <neai_classification_init+0x1b4>
 80047a6:	ed91 7a04 	vldr	s14, [r1, #16]
 80047aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80047ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047b2:	d159      	bne.n	8004868 <neai_classification_init+0x1b4>
 80047b4:	edd1 6a05 	vldr	s13, [r1, #20]
 80047b8:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 80047bc:	eef4 6a47 	vcmp.f32	s13, s14
 80047c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c4:	d150      	bne.n	8004868 <neai_classification_init+0x1b4>
 80047c6:	edd1 6a06 	vldr	s13, [r1, #24]
 80047ca:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80047ce:	eef4 6a47 	vcmp.f32	s13, s14
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d147      	bne.n	8004868 <neai_classification_init+0x1b4>
 80047d8:	ed91 7a07 	vldr	s14, [r1, #28]
 80047dc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80047e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e4:	d140      	bne.n	8004868 <neai_classification_init+0x1b4>
 80047e6:	edd1 6a08 	vldr	s13, [r1, #32]
 80047ea:	eeb3 7a0d 	vmov.f32	s14, #61	@ 0x41e80000  29.0
 80047ee:	eef4 6a47 	vcmp.f32	s13, s14
 80047f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f6:	d137      	bne.n	8004868 <neai_classification_init+0x1b4>
 80047f8:	ed91 7a09 	vldr	s14, [r1, #36]	@ 0x24
 80047fc:	eeb4 7a67 	vcmp.f32	s14, s15
 8004800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004804:	d130      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004806:	edd1 7a0a 	vldr	s15, [r1, #40]	@ 0x28
 800480a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	d129      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004814:	ed91 7a0b 	vldr	s14, [r1, #44]	@ 0x2c
 8004818:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800481c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	d120      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004826:	edd1 7a0c 	vldr	s15, [r1, #48]	@ 0x30
 800482a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004832:	d119      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004834:	edd1 7a0d 	vldr	s15, [r1, #52]	@ 0x34
 8004838:	eef5 7a40 	vcmp.f32	s15, #0.0
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	d112      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004842:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8004846:	eef5 7a40 	vcmp.f32	s15, #0.0
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	d10b      	bne.n	8004868 <neai_classification_init+0x1b4>
 8004850:	eddf 7a20 	vldr	s15, [pc, #128]	@ 80048d4 <neai_classification_init+0x220>
 8004854:	ed91 7a0f 	vldr	s14, [r1, #60]	@ 0x3c
 8004858:	eeb4 7a67 	vcmp.f32	s14, s15
 800485c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004860:	bf14      	ite	ne
 8004862:	237d      	movne	r3, #125	@ 0x7d
 8004864:	2300      	moveq	r3, #0
 8004866:	e000      	b.n	800486a <neai_classification_init+0x1b6>
 8004868:	237d      	movs	r3, #125	@ 0x7d
 800486a:	ed9f 8a1b 	vldr	s16, [pc, #108]	@ 80048d8 <neai_classification_init+0x224>
 800486e:	4c1b      	ldr	r4, [pc, #108]	@ (80048dc <neai_classification_init+0x228>)
 8004870:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 80048e0 <neai_classification_init+0x22c>
 8004874:	7023      	strb	r3, [r4, #0]
 8004876:	eeb0 0a48 	vmov.f32	s0, s16
 800487a:	f7ff ff19 	bl	80046b0 <_fminf>
 800487e:	eeb4 0a48 	vcmp.f32	s0, s16
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	bf1c      	itt	ne
 8004888:	2081      	movne	r0, #129	@ 0x81
 800488a:	7020      	strbne	r0, [r4, #0]
 800488c:	ecbd 8b02 	vpop	{d8}
 8004890:	bf08      	it	eq
 8004892:	7820      	ldrbeq	r0, [r4, #0]
 8004894:	bd70      	pop	{r4, r5, r6, pc}
 8004896:	bf00      	nop
 8004898:	20000db2 	.word	0x20000db2
 800489c:	20000dbc 	.word	0x20000dbc
 80048a0:	00c00080 	.word	0x00c00080
 80048a4:	20000db4 	.word	0x20000db4
 80048a8:	00600040 	.word	0x00600040
 80048ac:	20000db0 	.word	0x20000db0
 80048b0:	200023c8 	.word	0x200023c8
 80048b4:	200023c4 	.word	0x200023c4
 80048b8:	20000dac 	.word	0x20000dac
 80048bc:	20000da8 	.word	0x20000da8
 80048c0:	20000da4 	.word	0x20000da4
 80048c4:	20000da0 	.word	0x20000da0
 80048c8:	20000d9c 	.word	0x20000d9c
 80048cc:	20000d98 	.word	0x20000d98
 80048d0:	43800000 	.word	0x43800000
 80048d4:	49742400 	.word	0x49742400
 80048d8:	3f8ccccd 	.word	0x3f8ccccd
 80048dc:	20000019 	.word	0x20000019
 80048e0:	40066666 	.word	0x40066666

080048e4 <neai_classification>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	ed2d 8b08 	vpush	{d8-d11}
 80048ec:	4ba3      	ldr	r3, [pc, #652]	@ (8004b7c <neai_classification+0x298>)
 80048ee:	781c      	ldrb	r4, [r3, #0]
 80048f0:	b08f      	sub	sp, #60	@ 0x3c
 80048f2:	460d      	mov	r5, r1
 80048f4:	4616      	mov	r6, r2
 80048f6:	b114      	cbz	r4, 80048fe <neai_classification+0x1a>
 80048f8:	2c81      	cmp	r4, #129	@ 0x81
 80048fa:	f040 832d 	bne.w	8004f58 <neai_classification+0x674>
 80048fe:	4ba0      	ldr	r3, [pc, #640]	@ (8004b80 <neai_classification+0x29c>)
 8004900:	4602      	mov	r2, r0
 8004902:	6818      	ldr	r0, [r3, #0]
 8004904:	4b9f      	ldr	r3, [pc, #636]	@ (8004b84 <neai_classification+0x2a0>)
 8004906:	6819      	ldr	r1, [r3, #0]
 8004908:	4b9f      	ldr	r3, [pc, #636]	@ (8004b88 <neai_classification+0x2a4>)
 800490a:	f503 6740 	add.w	r7, r3, #3072	@ 0xc00
 800490e:	ecf2 7a01 	vldmia	r2!, {s15}
 8004912:	ecf0 6a01 	vldmia	r0!, {s13}
 8004916:	ecb1 7a01 	vldmia	r1!, {s14}
 800491a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800491e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004922:	ece3 7a01 	vstmia	r3!, {s15}
 8004926:	429f      	cmp	r7, r3
 8004928:	d1f1      	bne.n	800490e <neai_classification+0x2a>
 800492a:	4b98      	ldr	r3, [pc, #608]	@ (8004b8c <neai_classification+0x2a8>)
 800492c:	f8df 827c 	ldr.w	r8, [pc, #636]	@ 8004bac <neai_classification+0x2c8>
 8004930:	881a      	ldrh	r2, [r3, #0]
 8004932:	4b97      	ldr	r3, [pc, #604]	@ (8004b90 <neai_classification+0x2ac>)
 8004934:	f8df b278 	ldr.w	fp, [pc, #632]	@ 8004bb0 <neai_classification+0x2cc>
 8004938:	881f      	ldrh	r7, [r3, #0]
 800493a:	ed9f aa96 	vldr	s20, [pc, #600]	@ 8004b94 <neai_classification+0x2b0>
 800493e:	ed9f 9a96 	vldr	s18, [pc, #600]	@ 8004b98 <neai_classification+0x2b4>
 8004942:	9202      	str	r2, [sp, #8]
 8004944:	1e53      	subs	r3, r2, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	3301      	adds	r3, #1
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	9307      	str	r3, [sp, #28]
 800494e:	1e7b      	subs	r3, r7, #1
 8004950:	b29b      	uxth	r3, r3
 8004952:	3301      	adds	r3, #1
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	9308      	str	r3, [sp, #32]
 8004958:	4b90      	ldr	r3, [pc, #576]	@ (8004b9c <neai_classification+0x2b8>)
 800495a:	9301      	str	r3, [sp, #4]
 800495c:	087b      	lsrs	r3, r7, #1
 800495e:	9304      	str	r3, [sp, #16]
 8004960:	e9cd 4509 	strd	r4, r5, [sp, #36]	@ 0x24
 8004964:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8004968:	9306      	str	r3, [sp, #24]
 800496a:	2300      	movs	r3, #0
 800496c:	eb0b 0a87 	add.w	sl, fp, r7, lsl #2
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	960b      	str	r6, [sp, #44]	@ 0x2c
 8004974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004978:	2100      	movs	r1, #0
 800497a:	4640      	mov	r0, r8
 800497c:	f000 fd30 	bl	80053e0 <memset>
 8004980:	f8df 9230 	ldr.w	r9, [pc, #560]	@ 8004bb4 <neai_classification+0x2d0>
 8004984:	4b86      	ldr	r3, [pc, #536]	@ (8004ba0 <neai_classification+0x2bc>)
 8004986:	2f00      	cmp	r7, #0
 8004988:	f000 82fc 	beq.w	8004f84 <neai_classification+0x6a0>
 800498c:	f8b9 2000 	ldrh.w	r2, [r9]
 8004990:	9903      	ldr	r1, [sp, #12]
 8004992:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004996:	440a      	add	r2, r1
 8004998:	497b      	ldr	r1, [pc, #492]	@ (8004b88 <neai_classification+0x2a4>)
 800499a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800499e:	4659      	mov	r1, fp
 80049a0:	f852 0b0c 	ldr.w	r0, [r2], #12
 80049a4:	f841 0b04 	str.w	r0, [r1], #4
 80049a8:	458a      	cmp	sl, r1
 80049aa:	d1f9      	bne.n	80049a0 <neai_classification+0xbc>
 80049ac:	9a08      	ldr	r2, [sp, #32]
 80049ae:	487d      	ldr	r0, [pc, #500]	@ (8004ba4 <neai_classification+0x2c0>)
 80049b0:	9300      	str	r3, [sp, #0]
 80049b2:	2100      	movs	r1, #0
 80049b4:	f000 fd14 	bl	80053e0 <memset>
 80049b8:	2f01      	cmp	r7, #1
 80049ba:	eddb 7a00 	vldr	s15, [fp]
 80049be:	9b00      	ldr	r3, [sp, #0]
 80049c0:	d906      	bls.n	80049d0 <neai_classification+0xec>
 80049c2:	4a79      	ldr	r2, [pc, #484]	@ (8004ba8 <neai_classification+0x2c4>)
 80049c4:	ecb2 7a01 	vldmia	r2!, {s14}
 80049c8:	4592      	cmp	sl, r2
 80049ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80049ce:	d1f9      	bne.n	80049c4 <neai_classification+0xe0>
 80049d0:	ee07 7a10 	vmov	s14, r7
 80049d4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80049d8:	46bc      	mov	ip, r7
 80049da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80049de:	465a      	mov	r2, fp
 80049e0:	edd2 7a00 	vldr	s15, [r2]
 80049e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80049e8:	ece2 7a01 	vstmia	r2!, {s15}
 80049ec:	4592      	cmp	sl, r2
 80049ee:	d1f7      	bne.n	80049e0 <neai_classification+0xfc>
 80049f0:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80049f4:	07f9      	lsls	r1, r7, #31
 80049f6:	eec7 9aa6 	vdiv.f32	s19, s15, s13
 80049fa:	f100 82ca 	bmi.w	8004f92 <neai_classification+0x6ae>
 80049fe:	9c04      	ldr	r4, [sp, #16]
 8004a00:	2500      	movs	r5, #0
 8004a02:	3501      	adds	r5, #1
 8004a04:	b2ad      	uxth	r5, r5
 8004a06:	fa4c f205 	asr.w	r2, ip, r5
 8004a0a:	07d2      	lsls	r2, r2, #31
 8004a0c:	d5f9      	bpl.n	8004a02 <neai_classification+0x11e>
 8004a0e:	f1bc 0f01 	cmp.w	ip, #1
 8004a12:	dd21      	ble.n	8004a58 <neai_classification+0x174>
 8004a14:	2600      	movs	r6, #0
 8004a16:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004a1a:	4659      	mov	r1, fp
 8004a1c:	4632      	mov	r2, r6
 8004a1e:	b2b0      	uxth	r0, r6
 8004a20:	4282      	cmp	r2, r0
 8004a22:	d909      	bls.n	8004a38 <neai_classification+0x154>
 8004a24:	eb0b 0082 	add.w	r0, fp, r2, lsl #2
 8004a28:	edd0 7a00 	vldr	s15, [r0]
 8004a2c:	f8d1 e000 	ldr.w	lr, [r1]
 8004a30:	edc1 7a00 	vstr	s15, [r1]
 8004a34:	f8c0 e000 	str.w	lr, [r0]
 8004a38:	42a2      	cmp	r2, r4
 8004a3a:	4620      	mov	r0, r4
 8004a3c:	d305      	bcc.n	8004a4a <neai_classification+0x166>
 8004a3e:	1a12      	subs	r2, r2, r0
 8004a40:	b292      	uxth	r2, r2
 8004a42:	f3c0 004f 	ubfx	r0, r0, #1, #16
 8004a46:	4282      	cmp	r2, r0
 8004a48:	d2f9      	bcs.n	8004a3e <neai_classification+0x15a>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	4410      	add	r0, r2
 8004a4e:	4566      	cmp	r6, ip
 8004a50:	b282      	uxth	r2, r0
 8004a52:	f101 0104 	add.w	r1, r1, #4
 8004a56:	dbe2      	blt.n	8004a1e <neai_classification+0x13a>
 8004a58:	2d00      	cmp	r5, #0
 8004a5a:	f000 80bf 	beq.w	8004bdc <neai_classification+0x2f8>
 8004a5e:	2201      	movs	r2, #1
 8004a60:	e9cd 340c 	strd	r3, r4, [sp, #48]	@ 0x30
 8004a64:	eef0 8a4a 	vmov.f32	s17, s20
 8004a68:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8004a6c:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8004a70:	2600      	movs	r6, #0
 8004a72:	eeb0 ba69 	vmov.f32	s22, s19
 8004a76:	4614      	mov	r4, r2
 8004a78:	4621      	mov	r1, r4
 8004a7a:	0063      	lsls	r3, r4, #1
 8004a7c:	b29c      	uxth	r4, r3
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d05e      	beq.n	8004b40 <neai_classification+0x25c>
 8004a82:	2f00      	cmp	r7, #0
 8004a84:	d05c      	beq.n	8004b40 <neai_classification+0x25c>
 8004a86:	2200      	movs	r2, #0
 8004a88:	42b9      	cmp	r1, r7
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	eef0 6a4a 	vmov.f32	s13, s20
 8004a90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8004a94:	bf28      	it	cs
 8004a96:	4638      	movcs	r0, r7
 8004a98:	4613      	mov	r3, r2
 8004a9a:	46ac      	mov	ip, r5
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	9d00      	ldr	r5, [sp, #0]
 8004aa0:	4b40      	ldr	r3, [pc, #256]	@ (8004ba4 <neai_classification+0x2c0>)
 8004aa2:	194d      	adds	r5, r1, r5
 8004aa4:	b2ad      	uxth	r5, r5
 8004aa6:	eb0b 0e85 	add.w	lr, fp, r5, lsl #2
 8004aaa:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004aae:	ed95 7a00 	vldr	s14, [r5]
 8004ab2:	edde 5a00 	vldr	s11, [lr]
 8004ab6:	9505      	str	r5, [sp, #20]
 8004ab8:	9d00      	ldr	r5, [sp, #0]
 8004aba:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8004abe:	ee27 5a26 	vmul.f32	s10, s14, s13
 8004ac2:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8004ac6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004aca:	eb0b 0585 	add.w	r5, fp, r5, lsl #2
 8004ace:	ee37 7a25 	vadd.f32	s14, s14, s11
 8004ad2:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004ad6:	edd5 5a00 	vldr	s11, [r5]
 8004ada:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8004ade:	edce 5a00 	vstr	s11, [lr]
 8004ae2:	edd5 5a00 	vldr	s11, [r5]
 8004ae6:	ee35 6a86 	vadd.f32	s12, s11, s12
 8004aea:	ed85 6a00 	vstr	s12, [r5]
 8004aee:	9d00      	ldr	r5, [sp, #0]
 8004af0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8004af4:	9b00      	ldr	r3, [sp, #0]
 8004af6:	ed95 6a00 	vldr	s12, [r5]
 8004afa:	4423      	add	r3, r4
 8004afc:	ee36 6a47 	vsub.f32	s12, s12, s14
 8004b00:	469e      	mov	lr, r3
 8004b02:	9b05      	ldr	r3, [sp, #20]
 8004b04:	ed83 6a00 	vstr	s12, [r3]
 8004b08:	ed95 6a00 	vldr	s12, [r5]
 8004b0c:	fa1f f38e 	uxth.w	r3, lr
 8004b10:	ee36 7a07 	vadd.f32	s14, s12, s14
 8004b14:	42bb      	cmp	r3, r7
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	ed85 7a00 	vstr	s14, [r5]
 8004b1c:	d3bf      	bcc.n	8004a9e <neai_classification+0x1ba>
 8004b1e:	3201      	adds	r2, #1
 8004b20:	ee66 5aa8 	vmul.f32	s11, s13, s17
 8004b24:	ee27 6aa8 	vmul.f32	s12, s15, s17
 8004b28:	ee27 7a88 	vmul.f32	s14, s15, s16
 8004b2c:	ee66 6a88 	vmul.f32	s13, s13, s16
 8004b30:	b293      	uxth	r3, r2
 8004b32:	4283      	cmp	r3, r0
 8004b34:	ee77 7a65 	vsub.f32	s15, s14, s11
 8004b38:	ee76 6a26 	vadd.f32	s13, s12, s13
 8004b3c:	d3ae      	bcc.n	8004a9c <neai_classification+0x1b8>
 8004b3e:	4665      	mov	r5, ip
 8004b40:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8004b44:	eef6 9a00 	vmov.f32	s19, #96	@ 0x3f000000  0.5
 8004b48:	ee20 0a29 	vmul.f32	s0, s0, s19
 8004b4c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b54:	d430      	bmi.n	8004bb8 <neai_classification+0x2d4>
 8004b56:	eef1 8ac0 	vsqrt.f32	s17, s0
 8004b5a:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8004b5e:	eef1 8a68 	vneg.f32	s17, s17
 8004b62:	ee28 0a29 	vmul.f32	s0, s16, s19
 8004b66:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	d52b      	bpl.n	8004bc8 <neai_classification+0x2e4>
 8004b70:	f001 fa32 	bl	8005fd8 <sqrtf>
 8004b74:	eeb0 8a40 	vmov.f32	s16, s0
 8004b78:	e028      	b.n	8004bcc <neai_classification+0x2e8>
 8004b7a:	bf00      	nop
 8004b7c:	20000019 	.word	0x20000019
 8004b80:	200023c4 	.word	0x200023c4
 8004b84:	200023c8 	.word	0x200023c8
 8004b88:	200017c4 	.word	0x200017c4
 8004b8c:	20000db0 	.word	0x20000db0
 8004b90:	20000db2 	.word	0x20000db2
 8004b94:	00000000 	.word	0x00000000
 8004b98:	3b03126f 	.word	0x3b03126f
 8004b9c:	200023cc 	.word	0x200023cc
 8004ba0:	20000db4 	.word	0x20000db4
 8004ba4:	20000fc4 	.word	0x20000fc4
 8004ba8:	200013c8 	.word	0x200013c8
 8004bac:	20000dc4 	.word	0x20000dc4
 8004bb0:	200013c4 	.word	0x200013c4
 8004bb4:	20000dbc 	.word	0x20000dbc
 8004bb8:	f001 fa0e 	bl	8005fd8 <sqrtf>
 8004bbc:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8004bc0:	eef1 8a40 	vneg.f32	s17, s0
 8004bc4:	ee28 0a29 	vmul.f32	s0, s16, s19
 8004bc8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004bcc:	3601      	adds	r6, #1
 8004bce:	42b5      	cmp	r5, r6
 8004bd0:	f47f af52 	bne.w	8004a78 <neai_classification+0x194>
 8004bd4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004bd8:	eef0 9a4b 	vmov.f32	s19, s22
 8004bdc:	2f00      	cmp	r7, #0
 8004bde:	f000 81c9 	beq.w	8004f74 <neai_classification+0x690>
 8004be2:	4989      	ldr	r1, [pc, #548]	@ (8004e08 <neai_classification+0x524>)
 8004be4:	465a      	mov	r2, fp
 8004be6:	4608      	mov	r0, r1
 8004be8:	ed92 7a00 	vldr	s14, [r2]
 8004bec:	edd0 7a00 	vldr	s15, [r0]
 8004bf0:	ee27 7a29 	vmul.f32	s14, s14, s19
 8004bf4:	ee67 7aa9 	vmul.f32	s15, s15, s19
 8004bf8:	eca2 7a01 	vstmia	r2!, {s14}
 8004bfc:	4592      	cmp	sl, r2
 8004bfe:	ece0 7a01 	vstmia	r0!, {s15}
 8004c02:	d1f1      	bne.n	8004be8 <neai_classification+0x304>
 8004c04:	b35c      	cbz	r4, 8004c5e <neai_classification+0x37a>
 8004c06:	4881      	ldr	r0, [pc, #516]	@ (8004e0c <neai_classification+0x528>)
 8004c08:	4a7f      	ldr	r2, [pc, #508]	@ (8004e08 <neai_classification+0x524>)
 8004c0a:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8004c0e:	ed92 7a01 	vldr	s14, [r2, #4]
 8004c12:	ecf0 7a01 	vldmia	r0!, {s15}
 8004c16:	ee27 7a07 	vmul.f32	s14, s14, s14
 8004c1a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c22:	ece2 7a01 	vstmia	r2!, {s15}
 8004c26:	4294      	cmp	r4, r2
 8004c28:	d1f1      	bne.n	8004c0e <neai_classification+0x32a>
 8004c2a:	4a77      	ldr	r2, [pc, #476]	@ (8004e08 <neai_classification+0x524>)
 8004c2c:	ecf2 7a01 	vldmia	r2!, {s15}
 8004c30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c38:	f280 8194 	bge.w	8004f64 <neai_classification+0x680>
 8004c3c:	4294      	cmp	r4, r2
 8004c3e:	ed02 aa01 	vstr	s20, [r2, #-4]
 8004c42:	d1f3      	bne.n	8004c2c <neai_classification+0x348>
 8004c44:	881a      	ldrh	r2, [r3, #0]
 8004c46:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 8004c4a:	edd2 7a00 	vldr	s15, [r2]
 8004c4e:	ecb1 7a01 	vldmia	r1!, {s14}
 8004c52:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c56:	428c      	cmp	r4, r1
 8004c58:	ece2 7a01 	vstmia	r2!, {s15}
 8004c5c:	d1f5      	bne.n	8004c4a <neai_classification+0x366>
 8004c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8004e10 <neai_classification+0x52c>)
 8004c60:	f109 0902 	add.w	r9, r9, #2
 8004c64:	454a      	cmp	r2, r9
 8004c66:	f103 0302 	add.w	r3, r3, #2
 8004c6a:	f47f ae8f 	bne.w	800498c <neai_classification+0xa8>
 8004c6e:	9b02      	ldr	r3, [sp, #8]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 808f 	beq.w	8004d94 <neai_classification+0x4b0>
 8004c76:	4619      	mov	r1, r3
 8004c78:	4642      	mov	r2, r8
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	ecf2 7a01 	vldmia	r2!, {s15}
 8004c80:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c88:	da07      	bge.n	8004c9a <neai_classification+0x3b6>
 8004c8a:	ee07 3a90 	vmov	s15, r3
 8004c8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c92:	ee67 7a89 	vmul.f32	s15, s15, s18
 8004c96:	ed42 7a01 	vstr	s15, [r2, #-4]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	428b      	cmp	r3, r1
 8004c9e:	d1ed      	bne.n	8004c7c <neai_classification+0x398>
 8004ca0:	9b02      	ldr	r3, [sp, #8]
 8004ca2:	edd8 3a00 	vldr	s7, [r8]
 8004ca6:	2b09      	cmp	r3, #9
 8004ca8:	f240 817b 	bls.w	8004fa2 <neai_classification+0x6be>
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004cb4:	eef2 7a02 	vmov.f32	s15, #34	@ 0x41100000  9.0
 8004cb8:	ee87 4a27 	vdiv.f32	s8, s14, s15
 8004cbc:	4b55      	ldr	r3, [pc, #340]	@ (8004e14 <neai_classification+0x530>)
 8004cbe:	9a06      	ldr	r2, [sp, #24]
 8004cc0:	eef0 6a63 	vmov.f32	s13, s7
 8004cc4:	ecf3 7a01 	vldmia	r3!, {s15}
 8004cc8:	eef4 7a66 	vcmp.f32	s15, s13
 8004ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cd0:	bf48      	it	mi
 8004cd2:	eef0 6a67 	vmovmi.f32	s13, s15
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d1f4      	bne.n	8004cc4 <neai_classification+0x3e0>
 8004cda:	9a01      	ldr	r2, [sp, #4]
 8004cdc:	eddf 5a4e 	vldr	s11, [pc, #312]	@ 8004e18 <neai_classification+0x534>
 8004ce0:	4d4e      	ldr	r5, [pc, #312]	@ (8004e1c <neai_classification+0x538>)
 8004ce2:	eeb7 5a00 	vmov.f32	s10, #112	@ 0x3f800000  1.0
 8004ce6:	2000      	movs	r0, #0
 8004ce8:	ee36 5ac5 	vsub.f32	s10, s13, s10
 8004cec:	eef6 4a00 	vmov.f32	s9, #96	@ 0x3f000000  0.5
 8004cf0:	4614      	mov	r4, r2
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	ee07 0a90 	vmov	s15, r0
 8004cfc:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8004d00:	eca4 5a01 	vstmia	r4!, {s10}
 8004d04:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004d08:	eef0 7a45 	vmov.f32	s15, s10
 8004d0c:	ee36 6a64 	vsub.f32	s12, s12, s9
 8004d10:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8004d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d18:	db24      	blt.n	8004d64 <neai_classification+0x480>
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	fa1f fc81 	uxth.w	ip, r1
 8004d20:	ee07 ca10 	vmov	s14, ip
 8004d24:	f10c 0c01 	add.w	ip, ip, #1
 8004d28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004d2c:	ee05 ca90 	vmov	s11, ip
 8004d30:	eb08 0c83 	add.w	ip, r8, r3, lsl #2
 8004d34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d38:	3301      	adds	r3, #1
 8004d3a:	ed9c 7a00 	vldr	s14, [ip]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d44:	ee07 3a90 	vmov	s15, r3
 8004d48:	eeb8 3ae5 	vcvt.f32.s32	s6, s11
 8004d4c:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8004d50:	3101      	adds	r1, #1
 8004d52:	eeb4 6ae5 	vcmpe.f32	s12, s11
 8004d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5a:	eec7 7a03 	vdiv.f32	s15, s14, s6
 8004d5e:	dadd      	bge.n	8004d1c <neai_classification+0x438>
 8004d60:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004d64:	ed92 7a00 	vldr	s14, [r2]
 8004d68:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d70:	bfc4      	itt	gt
 8004d72:	edc2 3a00 	vstrgt	s7, [r2]
 8004d76:	ed54 7a01 	vldrgt	s15, [r4, #-4]
 8004d7a:	eef4 6ae7 	vcmpe.f32	s13, s15
 8004d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d82:	dd03      	ble.n	8004d8c <neai_classification+0x4a8>
 8004d84:	b116      	cbz	r6, 8004d8c <neai_classification+0x4a8>
 8004d86:	6829      	ldr	r1, [r5, #0]
 8004d88:	f844 1c04 	str.w	r1, [r4, #-4]
 8004d8c:	2809      	cmp	r0, #9
 8004d8e:	f105 0504 	add.w	r5, r5, #4
 8004d92:	d1af      	bne.n	8004cf4 <neai_classification+0x410>
 8004d94:	9b03      	ldr	r3, [sp, #12]
 8004d96:	9a01      	ldr	r2, [sp, #4]
 8004d98:	3301      	adds	r3, #1
 8004d9a:	3224      	adds	r2, #36	@ 0x24
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	9303      	str	r3, [sp, #12]
 8004da0:	9201      	str	r2, [sp, #4]
 8004da2:	f47f ade7 	bne.w	8004974 <neai_classification+0x90>
 8004da6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e20 <neai_classification+0x53c>)
 8004da8:	ed9f 8a1b 	vldr	s16, [pc, #108]	@ 8004e18 <neai_classification+0x534>
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8004db0:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	@ 0x24
 8004db4:	ed85 8a00 	vstr	s16, [r5]
 8004db8:	ed85 8a01 	vstr	s16, [r5, #4]
 8004dbc:	ed85 8a02 	vstr	s16, [r5, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 808d 	beq.w	8004ee0 <neai_classification+0x5fc>
 8004dc6:	ee07 3a90 	vmov	s15, r3
 8004dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dd2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004dd6:	4a13      	ldr	r2, [pc, #76]	@ (8004e24 <neai_classification+0x540>)
 8004dd8:	f8d2 8000 	ldr.w	r8, [r2]
 8004ddc:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 8004de0:	4b11      	ldr	r3, [pc, #68]	@ (8004e28 <neai_classification+0x544>)
 8004de2:	f8d3 c000 	ldr.w	ip, [r3]
 8004de6:	4b11      	ldr	r3, [pc, #68]	@ (8004e2c <neai_classification+0x548>)
 8004de8:	681f      	ldr	r7, [r3, #0]
 8004dea:	4b11      	ldr	r3, [pc, #68]	@ (8004e30 <neai_classification+0x54c>)
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	4b11      	ldr	r3, [pc, #68]	@ (8004e34 <neai_classification+0x550>)
 8004df0:	6819      	ldr	r1, [r3, #0]
 8004df2:	f06f 4940 	mvn.w	r9, #3221225472	@ 0xc0000000
 8004df6:	ecf8 7a01 	vldmia	r8!, {s15}
 8004dfa:	9400      	str	r4, [sp, #0]
 8004dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e00:	ee17 aa90 	vmov	sl, s15
 8004e04:	4653      	mov	r3, sl
 8004e06:	e023      	b.n	8004e50 <neai_classification+0x56c>
 8004e08:	20000fc4 	.word	0x20000fc4
 8004e0c:	200013c8 	.word	0x200013c8
 8004e10:	20000dc4 	.word	0x20000dc4
 8004e14:	20000dc8 	.word	0x20000dc8
 8004e18:	00000000 	.word	0x00000000
 8004e1c:	200023c8 	.word	0x200023c8
 8004e20:	20000dac 	.word	0x20000dac
 8004e24:	20000da8 	.word	0x20000da8
 8004e28:	20000da4 	.word	0x20000da4
 8004e2c:	20000d98 	.word	0x20000d98
 8004e30:	20000d9c 	.word	0x20000d9c
 8004e34:	20000da0 	.word	0x20000da0
 8004e38:	edd2 7a00 	vldr	s15, [r2]
 8004e3c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e44:	d425      	bmi.n	8004e92 <neai_classification+0x5ae>
 8004e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4a:	ee17 3a90 	vmov	r3, s15
 8004e4e:	4453      	add	r3, sl
 8004e50:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8004e54:	edd2 7a00 	vldr	s15, [r2]
 8004e58:	4c55      	ldr	r4, [pc, #340]	@ (8004fb0 <neai_classification+0x6cc>)
 8004e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e5e:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 8004e62:	ee17 2a90 	vmov	r2, s15
 8004e66:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8004e6a:	ed92 7a00 	vldr	s14, [r2]
 8004e6e:	eddb 7a00 	vldr	s15, [fp]
 8004e72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7c:	eb01 0203 	add.w	r2, r1, r3
 8004e80:	4403      	add	r3, r0
 8004e82:	d4d9      	bmi.n	8004e38 <neai_classification+0x554>
 8004e84:	edd3 7a00 	vldr	s15, [r3]
 8004e88:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e90:	d5d9      	bpl.n	8004e46 <neai_classification+0x562>
 8004e92:	eef1 7a67 	vneg.f32	s15, s15
 8004e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9a:	45c6      	cmp	lr, r8
 8004e9c:	ee17 3a90 	vmov	r3, s15
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	444b      	add	r3, r9
 8004ea4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004ea8:	edd3 7a00 	vldr	s15, [r3]
 8004eac:	9c00      	ldr	r4, [sp, #0]
 8004eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eb2:	edc3 7a00 	vstr	s15, [r3]
 8004eb6:	d19e      	bne.n	8004df6 <neai_classification+0x512>
 8004eb8:	edd5 7a01 	vldr	s15, [r5, #4]
 8004ebc:	ed95 7a00 	vldr	s14, [r5]
 8004ec0:	ed95 8a02 	vldr	s16, [r5, #8]
 8004ec4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ecc:	bfd8      	it	le
 8004ece:	eef0 7a47 	vmovle.f32	s15, s14
 8004ed2:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004ed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004eda:	bf58      	it	pl
 8004edc:	eeb0 8a67 	vmovpl.f32	s16, s15
 8004ee0:	eddf 8a34 	vldr	s17, [pc, #208]	@ 8004fb4 <neai_classification+0x6d0>
 8004ee4:	462f      	mov	r7, r5
 8004ee6:	f105 080c 	add.w	r8, r5, #12
 8004eea:	eeb2 9a00 	vmov.f32	s18, #32	@ 0x41000000  8.0
 8004eee:	ed97 0a00 	vldr	s0, [r7]
 8004ef2:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004ef6:	ee20 0a09 	vmul.f32	s0, s0, s18
 8004efa:	f001 f837 	bl	8005f6c <expf>
 8004efe:	eca7 0a01 	vstmia	r7!, {s0}
 8004f02:	4547      	cmp	r7, r8
 8004f04:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004f08:	d1f1      	bne.n	8004eee <neai_classification+0x60a>
 8004f0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f0e:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8004f12:	edd5 6a00 	vldr	s13, [r5]
 8004f16:	ed95 7a01 	vldr	s14, [r5, #4]
 8004f1a:	ed95 6a02 	vldr	s12, [r5, #8]
 8004f1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f22:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8004f26:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004f2a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	ed85 7a01 	vstr	s14, [r5, #4]
 8004f36:	bfd8      	it	le
 8004f38:	eeb0 7a66 	vmovle.f32	s14, s13
 8004f3c:	eeb4 7a67 	vcmp.f32	s14, s15
 8004f40:	bfd4      	ite	le
 8004f42:	2301      	movle	r3, #1
 8004f44:	2302      	movgt	r3, #2
 8004f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f4a:	bf48      	it	mi
 8004f4c:	2303      	movmi	r3, #3
 8004f4e:	edc5 6a00 	vstr	s13, [r5]
 8004f52:	edc5 7a02 	vstr	s15, [r5, #8]
 8004f56:	8033      	strh	r3, [r6, #0]
 8004f58:	4620      	mov	r0, r4
 8004f5a:	b00f      	add	sp, #60	@ 0x3c
 8004f5c:	ecbd 8b08 	vpop	{d8-d11}
 8004f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f64:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8004f68:	4294      	cmp	r4, r2
 8004f6a:	ed02 7a01 	vstr	s14, [r2, #-4]
 8004f6e:	f47f ae5d 	bne.w	8004c2c <neai_classification+0x348>
 8004f72:	e667      	b.n	8004c44 <neai_classification+0x360>
 8004f74:	4a10      	ldr	r2, [pc, #64]	@ (8004fb8 <neai_classification+0x6d4>)
 8004f76:	f109 0902 	add.w	r9, r9, #2
 8004f7a:	454a      	cmp	r2, r9
 8004f7c:	f103 0302 	add.w	r3, r3, #2
 8004f80:	f43f ae75 	beq.w	8004c6e <neai_classification+0x38a>
 8004f84:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8004f88:	2400      	movs	r4, #0
 8004f8a:	eec7 9a8a 	vdiv.f32	s19, s15, s20
 8004f8e:	46a4      	mov	ip, r4
 8004f90:	e536      	b.n	8004a00 <neai_classification+0x11c>
 8004f92:	2f01      	cmp	r7, #1
 8004f94:	bf08      	it	eq
 8004f96:	2400      	moveq	r4, #0
 8004f98:	f43f ae23 	beq.w	8004be2 <neai_classification+0x2fe>
 8004f9c:	9c04      	ldr	r4, [sp, #16]
 8004f9e:	2500      	movs	r5, #0
 8004fa0:	e538      	b.n	8004a14 <neai_classification+0x130>
 8004fa2:	9a07      	ldr	r2, [sp, #28]
 8004fa4:	9801      	ldr	r0, [sp, #4]
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	f000 fa95 	bl	80054d6 <memcpy>
 8004fac:	e6f2      	b.n	8004d94 <neai_classification+0x4b0>
 8004fae:	bf00      	nop
 8004fb0:	200023cc 	.word	0x200023cc
 8004fb4:	00000000 	.word	0x00000000
 8004fb8:	20000dc4 	.word	0x20000dc4

08004fbc <std>:
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	b510      	push	{r4, lr}
 8004fc0:	4604      	mov	r4, r0
 8004fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8004fc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004fca:	6083      	str	r3, [r0, #8]
 8004fcc:	8181      	strh	r1, [r0, #12]
 8004fce:	6643      	str	r3, [r0, #100]	@ 0x64
 8004fd0:	81c2      	strh	r2, [r0, #14]
 8004fd2:	6183      	str	r3, [r0, #24]
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	2208      	movs	r2, #8
 8004fd8:	305c      	adds	r0, #92	@ 0x5c
 8004fda:	f000 fa01 	bl	80053e0 <memset>
 8004fde:	4b0d      	ldr	r3, [pc, #52]	@ (8005014 <std+0x58>)
 8004fe0:	6263      	str	r3, [r4, #36]	@ 0x24
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <std+0x5c>)
 8004fe4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800501c <std+0x60>)
 8004fe8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004fea:	4b0d      	ldr	r3, [pc, #52]	@ (8005020 <std+0x64>)
 8004fec:	6323      	str	r3, [r4, #48]	@ 0x30
 8004fee:	4b0d      	ldr	r3, [pc, #52]	@ (8005024 <std+0x68>)
 8004ff0:	6224      	str	r4, [r4, #32]
 8004ff2:	429c      	cmp	r4, r3
 8004ff4:	d006      	beq.n	8005004 <std+0x48>
 8004ff6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ffa:	4294      	cmp	r4, r2
 8004ffc:	d002      	beq.n	8005004 <std+0x48>
 8004ffe:	33d0      	adds	r3, #208	@ 0xd0
 8005000:	429c      	cmp	r4, r3
 8005002:	d105      	bne.n	8005010 <std+0x54>
 8005004:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800500c:	f000 ba60 	b.w	80054d0 <__retarget_lock_init_recursive>
 8005010:	bd10      	pop	{r4, pc}
 8005012:	bf00      	nop
 8005014:	08005231 	.word	0x08005231
 8005018:	08005253 	.word	0x08005253
 800501c:	0800528b 	.word	0x0800528b
 8005020:	080052af 	.word	0x080052af
 8005024:	20002438 	.word	0x20002438

08005028 <stdio_exit_handler>:
 8005028:	4a02      	ldr	r2, [pc, #8]	@ (8005034 <stdio_exit_handler+0xc>)
 800502a:	4903      	ldr	r1, [pc, #12]	@ (8005038 <stdio_exit_handler+0x10>)
 800502c:	4803      	ldr	r0, [pc, #12]	@ (800503c <stdio_exit_handler+0x14>)
 800502e:	f000 b869 	b.w	8005104 <_fwalk_sglue>
 8005032:	bf00      	nop
 8005034:	2000001c 	.word	0x2000001c
 8005038:	08005d8d 	.word	0x08005d8d
 800503c:	2000002c 	.word	0x2000002c

08005040 <cleanup_stdio>:
 8005040:	6841      	ldr	r1, [r0, #4]
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <cleanup_stdio+0x34>)
 8005044:	4299      	cmp	r1, r3
 8005046:	b510      	push	{r4, lr}
 8005048:	4604      	mov	r4, r0
 800504a:	d001      	beq.n	8005050 <cleanup_stdio+0x10>
 800504c:	f000 fe9e 	bl	8005d8c <_fflush_r>
 8005050:	68a1      	ldr	r1, [r4, #8]
 8005052:	4b09      	ldr	r3, [pc, #36]	@ (8005078 <cleanup_stdio+0x38>)
 8005054:	4299      	cmp	r1, r3
 8005056:	d002      	beq.n	800505e <cleanup_stdio+0x1e>
 8005058:	4620      	mov	r0, r4
 800505a:	f000 fe97 	bl	8005d8c <_fflush_r>
 800505e:	68e1      	ldr	r1, [r4, #12]
 8005060:	4b06      	ldr	r3, [pc, #24]	@ (800507c <cleanup_stdio+0x3c>)
 8005062:	4299      	cmp	r1, r3
 8005064:	d004      	beq.n	8005070 <cleanup_stdio+0x30>
 8005066:	4620      	mov	r0, r4
 8005068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800506c:	f000 be8e 	b.w	8005d8c <_fflush_r>
 8005070:	bd10      	pop	{r4, pc}
 8005072:	bf00      	nop
 8005074:	20002438 	.word	0x20002438
 8005078:	200024a0 	.word	0x200024a0
 800507c:	20002508 	.word	0x20002508

08005080 <global_stdio_init.part.0>:
 8005080:	b510      	push	{r4, lr}
 8005082:	4b0b      	ldr	r3, [pc, #44]	@ (80050b0 <global_stdio_init.part.0+0x30>)
 8005084:	4c0b      	ldr	r4, [pc, #44]	@ (80050b4 <global_stdio_init.part.0+0x34>)
 8005086:	4a0c      	ldr	r2, [pc, #48]	@ (80050b8 <global_stdio_init.part.0+0x38>)
 8005088:	601a      	str	r2, [r3, #0]
 800508a:	4620      	mov	r0, r4
 800508c:	2200      	movs	r2, #0
 800508e:	2104      	movs	r1, #4
 8005090:	f7ff ff94 	bl	8004fbc <std>
 8005094:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005098:	2201      	movs	r2, #1
 800509a:	2109      	movs	r1, #9
 800509c:	f7ff ff8e 	bl	8004fbc <std>
 80050a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80050a4:	2202      	movs	r2, #2
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	2112      	movs	r1, #18
 80050ac:	f7ff bf86 	b.w	8004fbc <std>
 80050b0:	20002570 	.word	0x20002570
 80050b4:	20002438 	.word	0x20002438
 80050b8:	08005029 	.word	0x08005029

080050bc <__sfp_lock_acquire>:
 80050bc:	4801      	ldr	r0, [pc, #4]	@ (80050c4 <__sfp_lock_acquire+0x8>)
 80050be:	f000 ba08 	b.w	80054d2 <__retarget_lock_acquire_recursive>
 80050c2:	bf00      	nop
 80050c4:	20002579 	.word	0x20002579

080050c8 <__sfp_lock_release>:
 80050c8:	4801      	ldr	r0, [pc, #4]	@ (80050d0 <__sfp_lock_release+0x8>)
 80050ca:	f000 ba03 	b.w	80054d4 <__retarget_lock_release_recursive>
 80050ce:	bf00      	nop
 80050d0:	20002579 	.word	0x20002579

080050d4 <__sinit>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4604      	mov	r4, r0
 80050d8:	f7ff fff0 	bl	80050bc <__sfp_lock_acquire>
 80050dc:	6a23      	ldr	r3, [r4, #32]
 80050de:	b11b      	cbz	r3, 80050e8 <__sinit+0x14>
 80050e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050e4:	f7ff bff0 	b.w	80050c8 <__sfp_lock_release>
 80050e8:	4b04      	ldr	r3, [pc, #16]	@ (80050fc <__sinit+0x28>)
 80050ea:	6223      	str	r3, [r4, #32]
 80050ec:	4b04      	ldr	r3, [pc, #16]	@ (8005100 <__sinit+0x2c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d1f5      	bne.n	80050e0 <__sinit+0xc>
 80050f4:	f7ff ffc4 	bl	8005080 <global_stdio_init.part.0>
 80050f8:	e7f2      	b.n	80050e0 <__sinit+0xc>
 80050fa:	bf00      	nop
 80050fc:	08005041 	.word	0x08005041
 8005100:	20002570 	.word	0x20002570

08005104 <_fwalk_sglue>:
 8005104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005108:	4607      	mov	r7, r0
 800510a:	4688      	mov	r8, r1
 800510c:	4614      	mov	r4, r2
 800510e:	2600      	movs	r6, #0
 8005110:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005114:	f1b9 0901 	subs.w	r9, r9, #1
 8005118:	d505      	bpl.n	8005126 <_fwalk_sglue+0x22>
 800511a:	6824      	ldr	r4, [r4, #0]
 800511c:	2c00      	cmp	r4, #0
 800511e:	d1f7      	bne.n	8005110 <_fwalk_sglue+0xc>
 8005120:	4630      	mov	r0, r6
 8005122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005126:	89ab      	ldrh	r3, [r5, #12]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d907      	bls.n	800513c <_fwalk_sglue+0x38>
 800512c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005130:	3301      	adds	r3, #1
 8005132:	d003      	beq.n	800513c <_fwalk_sglue+0x38>
 8005134:	4629      	mov	r1, r5
 8005136:	4638      	mov	r0, r7
 8005138:	47c0      	blx	r8
 800513a:	4306      	orrs	r6, r0
 800513c:	3568      	adds	r5, #104	@ 0x68
 800513e:	e7e9      	b.n	8005114 <_fwalk_sglue+0x10>

08005140 <iprintf>:
 8005140:	b40f      	push	{r0, r1, r2, r3}
 8005142:	b507      	push	{r0, r1, r2, lr}
 8005144:	4906      	ldr	r1, [pc, #24]	@ (8005160 <iprintf+0x20>)
 8005146:	ab04      	add	r3, sp, #16
 8005148:	6808      	ldr	r0, [r1, #0]
 800514a:	f853 2b04 	ldr.w	r2, [r3], #4
 800514e:	6881      	ldr	r1, [r0, #8]
 8005150:	9301      	str	r3, [sp, #4]
 8005152:	f000 faf1 	bl	8005738 <_vfiprintf_r>
 8005156:	b003      	add	sp, #12
 8005158:	f85d eb04 	ldr.w	lr, [sp], #4
 800515c:	b004      	add	sp, #16
 800515e:	4770      	bx	lr
 8005160:	20000028 	.word	0x20000028

08005164 <putchar>:
 8005164:	4b02      	ldr	r3, [pc, #8]	@ (8005170 <putchar+0xc>)
 8005166:	4601      	mov	r1, r0
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	6882      	ldr	r2, [r0, #8]
 800516c:	f000 be98 	b.w	8005ea0 <_putc_r>
 8005170:	20000028 	.word	0x20000028

08005174 <_puts_r>:
 8005174:	6a03      	ldr	r3, [r0, #32]
 8005176:	b570      	push	{r4, r5, r6, lr}
 8005178:	6884      	ldr	r4, [r0, #8]
 800517a:	4605      	mov	r5, r0
 800517c:	460e      	mov	r6, r1
 800517e:	b90b      	cbnz	r3, 8005184 <_puts_r+0x10>
 8005180:	f7ff ffa8 	bl	80050d4 <__sinit>
 8005184:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005186:	07db      	lsls	r3, r3, #31
 8005188:	d405      	bmi.n	8005196 <_puts_r+0x22>
 800518a:	89a3      	ldrh	r3, [r4, #12]
 800518c:	0598      	lsls	r0, r3, #22
 800518e:	d402      	bmi.n	8005196 <_puts_r+0x22>
 8005190:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005192:	f000 f99e 	bl	80054d2 <__retarget_lock_acquire_recursive>
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	0719      	lsls	r1, r3, #28
 800519a:	d502      	bpl.n	80051a2 <_puts_r+0x2e>
 800519c:	6923      	ldr	r3, [r4, #16]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d135      	bne.n	800520e <_puts_r+0x9a>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f8c5 	bl	8005334 <__swsetup_r>
 80051aa:	b380      	cbz	r0, 800520e <_puts_r+0x9a>
 80051ac:	f04f 35ff 	mov.w	r5, #4294967295
 80051b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80051b2:	07da      	lsls	r2, r3, #31
 80051b4:	d405      	bmi.n	80051c2 <_puts_r+0x4e>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	059b      	lsls	r3, r3, #22
 80051ba:	d402      	bmi.n	80051c2 <_puts_r+0x4e>
 80051bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80051be:	f000 f989 	bl	80054d4 <__retarget_lock_release_recursive>
 80051c2:	4628      	mov	r0, r5
 80051c4:	bd70      	pop	{r4, r5, r6, pc}
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	da04      	bge.n	80051d4 <_puts_r+0x60>
 80051ca:	69a2      	ldr	r2, [r4, #24]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	dc17      	bgt.n	8005200 <_puts_r+0x8c>
 80051d0:	290a      	cmp	r1, #10
 80051d2:	d015      	beq.n	8005200 <_puts_r+0x8c>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	6022      	str	r2, [r4, #0]
 80051da:	7019      	strb	r1, [r3, #0]
 80051dc:	68a3      	ldr	r3, [r4, #8]
 80051de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80051e2:	3b01      	subs	r3, #1
 80051e4:	60a3      	str	r3, [r4, #8]
 80051e6:	2900      	cmp	r1, #0
 80051e8:	d1ed      	bne.n	80051c6 <_puts_r+0x52>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	da11      	bge.n	8005212 <_puts_r+0x9e>
 80051ee:	4622      	mov	r2, r4
 80051f0:	210a      	movs	r1, #10
 80051f2:	4628      	mov	r0, r5
 80051f4:	f000 f85f 	bl	80052b6 <__swbuf_r>
 80051f8:	3001      	adds	r0, #1
 80051fa:	d0d7      	beq.n	80051ac <_puts_r+0x38>
 80051fc:	250a      	movs	r5, #10
 80051fe:	e7d7      	b.n	80051b0 <_puts_r+0x3c>
 8005200:	4622      	mov	r2, r4
 8005202:	4628      	mov	r0, r5
 8005204:	f000 f857 	bl	80052b6 <__swbuf_r>
 8005208:	3001      	adds	r0, #1
 800520a:	d1e7      	bne.n	80051dc <_puts_r+0x68>
 800520c:	e7ce      	b.n	80051ac <_puts_r+0x38>
 800520e:	3e01      	subs	r6, #1
 8005210:	e7e4      	b.n	80051dc <_puts_r+0x68>
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	6022      	str	r2, [r4, #0]
 8005218:	220a      	movs	r2, #10
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	e7ee      	b.n	80051fc <_puts_r+0x88>
	...

08005220 <puts>:
 8005220:	4b02      	ldr	r3, [pc, #8]	@ (800522c <puts+0xc>)
 8005222:	4601      	mov	r1, r0
 8005224:	6818      	ldr	r0, [r3, #0]
 8005226:	f7ff bfa5 	b.w	8005174 <_puts_r>
 800522a:	bf00      	nop
 800522c:	20000028 	.word	0x20000028

08005230 <__sread>:
 8005230:	b510      	push	{r4, lr}
 8005232:	460c      	mov	r4, r1
 8005234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005238:	f000 f8fc 	bl	8005434 <_read_r>
 800523c:	2800      	cmp	r0, #0
 800523e:	bfab      	itete	ge
 8005240:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005242:	89a3      	ldrhlt	r3, [r4, #12]
 8005244:	181b      	addge	r3, r3, r0
 8005246:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800524a:	bfac      	ite	ge
 800524c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800524e:	81a3      	strhlt	r3, [r4, #12]
 8005250:	bd10      	pop	{r4, pc}

08005252 <__swrite>:
 8005252:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005256:	461f      	mov	r7, r3
 8005258:	898b      	ldrh	r3, [r1, #12]
 800525a:	05db      	lsls	r3, r3, #23
 800525c:	4605      	mov	r5, r0
 800525e:	460c      	mov	r4, r1
 8005260:	4616      	mov	r6, r2
 8005262:	d505      	bpl.n	8005270 <__swrite+0x1e>
 8005264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005268:	2302      	movs	r3, #2
 800526a:	2200      	movs	r2, #0
 800526c:	f000 f8d0 	bl	8005410 <_lseek_r>
 8005270:	89a3      	ldrh	r3, [r4, #12]
 8005272:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005276:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800527a:	81a3      	strh	r3, [r4, #12]
 800527c:	4632      	mov	r2, r6
 800527e:	463b      	mov	r3, r7
 8005280:	4628      	mov	r0, r5
 8005282:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005286:	f000 b8e7 	b.w	8005458 <_write_r>

0800528a <__sseek>:
 800528a:	b510      	push	{r4, lr}
 800528c:	460c      	mov	r4, r1
 800528e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005292:	f000 f8bd 	bl	8005410 <_lseek_r>
 8005296:	1c43      	adds	r3, r0, #1
 8005298:	89a3      	ldrh	r3, [r4, #12]
 800529a:	bf15      	itete	ne
 800529c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800529e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052a6:	81a3      	strheq	r3, [r4, #12]
 80052a8:	bf18      	it	ne
 80052aa:	81a3      	strhne	r3, [r4, #12]
 80052ac:	bd10      	pop	{r4, pc}

080052ae <__sclose>:
 80052ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052b2:	f000 b89d 	b.w	80053f0 <_close_r>

080052b6 <__swbuf_r>:
 80052b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052b8:	460e      	mov	r6, r1
 80052ba:	4614      	mov	r4, r2
 80052bc:	4605      	mov	r5, r0
 80052be:	b118      	cbz	r0, 80052c8 <__swbuf_r+0x12>
 80052c0:	6a03      	ldr	r3, [r0, #32]
 80052c2:	b90b      	cbnz	r3, 80052c8 <__swbuf_r+0x12>
 80052c4:	f7ff ff06 	bl	80050d4 <__sinit>
 80052c8:	69a3      	ldr	r3, [r4, #24]
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	89a3      	ldrh	r3, [r4, #12]
 80052ce:	071a      	lsls	r2, r3, #28
 80052d0:	d501      	bpl.n	80052d6 <__swbuf_r+0x20>
 80052d2:	6923      	ldr	r3, [r4, #16]
 80052d4:	b943      	cbnz	r3, 80052e8 <__swbuf_r+0x32>
 80052d6:	4621      	mov	r1, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 f82b 	bl	8005334 <__swsetup_r>
 80052de:	b118      	cbz	r0, 80052e8 <__swbuf_r+0x32>
 80052e0:	f04f 37ff 	mov.w	r7, #4294967295
 80052e4:	4638      	mov	r0, r7
 80052e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	6922      	ldr	r2, [r4, #16]
 80052ec:	1a98      	subs	r0, r3, r2
 80052ee:	6963      	ldr	r3, [r4, #20]
 80052f0:	b2f6      	uxtb	r6, r6
 80052f2:	4283      	cmp	r3, r0
 80052f4:	4637      	mov	r7, r6
 80052f6:	dc05      	bgt.n	8005304 <__swbuf_r+0x4e>
 80052f8:	4621      	mov	r1, r4
 80052fa:	4628      	mov	r0, r5
 80052fc:	f000 fd46 	bl	8005d8c <_fflush_r>
 8005300:	2800      	cmp	r0, #0
 8005302:	d1ed      	bne.n	80052e0 <__swbuf_r+0x2a>
 8005304:	68a3      	ldr	r3, [r4, #8]
 8005306:	3b01      	subs	r3, #1
 8005308:	60a3      	str	r3, [r4, #8]
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	6022      	str	r2, [r4, #0]
 8005310:	701e      	strb	r6, [r3, #0]
 8005312:	6962      	ldr	r2, [r4, #20]
 8005314:	1c43      	adds	r3, r0, #1
 8005316:	429a      	cmp	r2, r3
 8005318:	d004      	beq.n	8005324 <__swbuf_r+0x6e>
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	07db      	lsls	r3, r3, #31
 800531e:	d5e1      	bpl.n	80052e4 <__swbuf_r+0x2e>
 8005320:	2e0a      	cmp	r6, #10
 8005322:	d1df      	bne.n	80052e4 <__swbuf_r+0x2e>
 8005324:	4621      	mov	r1, r4
 8005326:	4628      	mov	r0, r5
 8005328:	f000 fd30 	bl	8005d8c <_fflush_r>
 800532c:	2800      	cmp	r0, #0
 800532e:	d0d9      	beq.n	80052e4 <__swbuf_r+0x2e>
 8005330:	e7d6      	b.n	80052e0 <__swbuf_r+0x2a>
	...

08005334 <__swsetup_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <__swsetup_r+0xa8>)
 8005338:	4605      	mov	r5, r0
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	460c      	mov	r4, r1
 800533e:	b118      	cbz	r0, 8005348 <__swsetup_r+0x14>
 8005340:	6a03      	ldr	r3, [r0, #32]
 8005342:	b90b      	cbnz	r3, 8005348 <__swsetup_r+0x14>
 8005344:	f7ff fec6 	bl	80050d4 <__sinit>
 8005348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800534c:	0719      	lsls	r1, r3, #28
 800534e:	d422      	bmi.n	8005396 <__swsetup_r+0x62>
 8005350:	06da      	lsls	r2, r3, #27
 8005352:	d407      	bmi.n	8005364 <__swsetup_r+0x30>
 8005354:	2209      	movs	r2, #9
 8005356:	602a      	str	r2, [r5, #0]
 8005358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800535c:	81a3      	strh	r3, [r4, #12]
 800535e:	f04f 30ff 	mov.w	r0, #4294967295
 8005362:	e033      	b.n	80053cc <__swsetup_r+0x98>
 8005364:	0758      	lsls	r0, r3, #29
 8005366:	d512      	bpl.n	800538e <__swsetup_r+0x5a>
 8005368:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800536a:	b141      	cbz	r1, 800537e <__swsetup_r+0x4a>
 800536c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005370:	4299      	cmp	r1, r3
 8005372:	d002      	beq.n	800537a <__swsetup_r+0x46>
 8005374:	4628      	mov	r0, r5
 8005376:	f000 f8bd 	bl	80054f4 <_free_r>
 800537a:	2300      	movs	r3, #0
 800537c:	6363      	str	r3, [r4, #52]	@ 0x34
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	2300      	movs	r3, #0
 8005388:	6063      	str	r3, [r4, #4]
 800538a:	6923      	ldr	r3, [r4, #16]
 800538c:	6023      	str	r3, [r4, #0]
 800538e:	89a3      	ldrh	r3, [r4, #12]
 8005390:	f043 0308 	orr.w	r3, r3, #8
 8005394:	81a3      	strh	r3, [r4, #12]
 8005396:	6923      	ldr	r3, [r4, #16]
 8005398:	b94b      	cbnz	r3, 80053ae <__swsetup_r+0x7a>
 800539a:	89a3      	ldrh	r3, [r4, #12]
 800539c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053a4:	d003      	beq.n	80053ae <__swsetup_r+0x7a>
 80053a6:	4621      	mov	r1, r4
 80053a8:	4628      	mov	r0, r5
 80053aa:	f000 fd3d 	bl	8005e28 <__smakebuf_r>
 80053ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053b2:	f013 0201 	ands.w	r2, r3, #1
 80053b6:	d00a      	beq.n	80053ce <__swsetup_r+0x9a>
 80053b8:	2200      	movs	r2, #0
 80053ba:	60a2      	str	r2, [r4, #8]
 80053bc:	6962      	ldr	r2, [r4, #20]
 80053be:	4252      	negs	r2, r2
 80053c0:	61a2      	str	r2, [r4, #24]
 80053c2:	6922      	ldr	r2, [r4, #16]
 80053c4:	b942      	cbnz	r2, 80053d8 <__swsetup_r+0xa4>
 80053c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80053ca:	d1c5      	bne.n	8005358 <__swsetup_r+0x24>
 80053cc:	bd38      	pop	{r3, r4, r5, pc}
 80053ce:	0799      	lsls	r1, r3, #30
 80053d0:	bf58      	it	pl
 80053d2:	6962      	ldrpl	r2, [r4, #20]
 80053d4:	60a2      	str	r2, [r4, #8]
 80053d6:	e7f4      	b.n	80053c2 <__swsetup_r+0x8e>
 80053d8:	2000      	movs	r0, #0
 80053da:	e7f7      	b.n	80053cc <__swsetup_r+0x98>
 80053dc:	20000028 	.word	0x20000028

080053e0 <memset>:
 80053e0:	4402      	add	r2, r0
 80053e2:	4603      	mov	r3, r0
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d100      	bne.n	80053ea <memset+0xa>
 80053e8:	4770      	bx	lr
 80053ea:	f803 1b01 	strb.w	r1, [r3], #1
 80053ee:	e7f9      	b.n	80053e4 <memset+0x4>

080053f0 <_close_r>:
 80053f0:	b538      	push	{r3, r4, r5, lr}
 80053f2:	4d06      	ldr	r5, [pc, #24]	@ (800540c <_close_r+0x1c>)
 80053f4:	2300      	movs	r3, #0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4608      	mov	r0, r1
 80053fa:	602b      	str	r3, [r5, #0]
 80053fc:	f7fc f8ca 	bl	8001594 <_close>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_close_r+0x1a>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_close_r+0x1a>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20002574 	.word	0x20002574

08005410 <_lseek_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	4d07      	ldr	r5, [pc, #28]	@ (8005430 <_lseek_r+0x20>)
 8005414:	4604      	mov	r4, r0
 8005416:	4608      	mov	r0, r1
 8005418:	4611      	mov	r1, r2
 800541a:	2200      	movs	r2, #0
 800541c:	602a      	str	r2, [r5, #0]
 800541e:	461a      	mov	r2, r3
 8005420:	f7fc f8df 	bl	80015e2 <_lseek>
 8005424:	1c43      	adds	r3, r0, #1
 8005426:	d102      	bne.n	800542e <_lseek_r+0x1e>
 8005428:	682b      	ldr	r3, [r5, #0]
 800542a:	b103      	cbz	r3, 800542e <_lseek_r+0x1e>
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	bd38      	pop	{r3, r4, r5, pc}
 8005430:	20002574 	.word	0x20002574

08005434 <_read_r>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4d07      	ldr	r5, [pc, #28]	@ (8005454 <_read_r+0x20>)
 8005438:	4604      	mov	r4, r0
 800543a:	4608      	mov	r0, r1
 800543c:	4611      	mov	r1, r2
 800543e:	2200      	movs	r2, #0
 8005440:	602a      	str	r2, [r5, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	f7fc f86d 	bl	8001522 <_read>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_read_r+0x1e>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_read_r+0x1e>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	20002574 	.word	0x20002574

08005458 <_write_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d07      	ldr	r5, [pc, #28]	@ (8005478 <_write_r+0x20>)
 800545c:	4604      	mov	r4, r0
 800545e:	4608      	mov	r0, r1
 8005460:	4611      	mov	r1, r2
 8005462:	2200      	movs	r2, #0
 8005464:	602a      	str	r2, [r5, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	f7fc f878 	bl	800155c <_write>
 800546c:	1c43      	adds	r3, r0, #1
 800546e:	d102      	bne.n	8005476 <_write_r+0x1e>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	b103      	cbz	r3, 8005476 <_write_r+0x1e>
 8005474:	6023      	str	r3, [r4, #0]
 8005476:	bd38      	pop	{r3, r4, r5, pc}
 8005478:	20002574 	.word	0x20002574

0800547c <__errno>:
 800547c:	4b01      	ldr	r3, [pc, #4]	@ (8005484 <__errno+0x8>)
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	20000028 	.word	0x20000028

08005488 <__libc_init_array>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	4d0d      	ldr	r5, [pc, #52]	@ (80054c0 <__libc_init_array+0x38>)
 800548c:	4c0d      	ldr	r4, [pc, #52]	@ (80054c4 <__libc_init_array+0x3c>)
 800548e:	1b64      	subs	r4, r4, r5
 8005490:	10a4      	asrs	r4, r4, #2
 8005492:	2600      	movs	r6, #0
 8005494:	42a6      	cmp	r6, r4
 8005496:	d109      	bne.n	80054ac <__libc_init_array+0x24>
 8005498:	4d0b      	ldr	r5, [pc, #44]	@ (80054c8 <__libc_init_array+0x40>)
 800549a:	4c0c      	ldr	r4, [pc, #48]	@ (80054cc <__libc_init_array+0x44>)
 800549c:	f000 fef6 	bl	800628c <_init>
 80054a0:	1b64      	subs	r4, r4, r5
 80054a2:	10a4      	asrs	r4, r4, #2
 80054a4:	2600      	movs	r6, #0
 80054a6:	42a6      	cmp	r6, r4
 80054a8:	d105      	bne.n	80054b6 <__libc_init_array+0x2e>
 80054aa:	bd70      	pop	{r4, r5, r6, pc}
 80054ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b0:	4798      	blx	r3
 80054b2:	3601      	adds	r6, #1
 80054b4:	e7ee      	b.n	8005494 <__libc_init_array+0xc>
 80054b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80054ba:	4798      	blx	r3
 80054bc:	3601      	adds	r6, #1
 80054be:	e7f2      	b.n	80054a6 <__libc_init_array+0x1e>
 80054c0:	0800d704 	.word	0x0800d704
 80054c4:	0800d704 	.word	0x0800d704
 80054c8:	0800d704 	.word	0x0800d704
 80054cc:	0800d708 	.word	0x0800d708

080054d0 <__retarget_lock_init_recursive>:
 80054d0:	4770      	bx	lr

080054d2 <__retarget_lock_acquire_recursive>:
 80054d2:	4770      	bx	lr

080054d4 <__retarget_lock_release_recursive>:
 80054d4:	4770      	bx	lr

080054d6 <memcpy>:
 80054d6:	440a      	add	r2, r1
 80054d8:	4291      	cmp	r1, r2
 80054da:	f100 33ff 	add.w	r3, r0, #4294967295
 80054de:	d100      	bne.n	80054e2 <memcpy+0xc>
 80054e0:	4770      	bx	lr
 80054e2:	b510      	push	{r4, lr}
 80054e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ec:	4291      	cmp	r1, r2
 80054ee:	d1f9      	bne.n	80054e4 <memcpy+0xe>
 80054f0:	bd10      	pop	{r4, pc}
	...

080054f4 <_free_r>:
 80054f4:	b538      	push	{r3, r4, r5, lr}
 80054f6:	4605      	mov	r5, r0
 80054f8:	2900      	cmp	r1, #0
 80054fa:	d041      	beq.n	8005580 <_free_r+0x8c>
 80054fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005500:	1f0c      	subs	r4, r1, #4
 8005502:	2b00      	cmp	r3, #0
 8005504:	bfb8      	it	lt
 8005506:	18e4      	addlt	r4, r4, r3
 8005508:	f000 f8e0 	bl	80056cc <__malloc_lock>
 800550c:	4a1d      	ldr	r2, [pc, #116]	@ (8005584 <_free_r+0x90>)
 800550e:	6813      	ldr	r3, [r2, #0]
 8005510:	b933      	cbnz	r3, 8005520 <_free_r+0x2c>
 8005512:	6063      	str	r3, [r4, #4]
 8005514:	6014      	str	r4, [r2, #0]
 8005516:	4628      	mov	r0, r5
 8005518:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800551c:	f000 b8dc 	b.w	80056d8 <__malloc_unlock>
 8005520:	42a3      	cmp	r3, r4
 8005522:	d908      	bls.n	8005536 <_free_r+0x42>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	1821      	adds	r1, r4, r0
 8005528:	428b      	cmp	r3, r1
 800552a:	bf01      	itttt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	1809      	addeq	r1, r1, r0
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	e7ed      	b.n	8005512 <_free_r+0x1e>
 8005536:	461a      	mov	r2, r3
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	b10b      	cbz	r3, 8005540 <_free_r+0x4c>
 800553c:	42a3      	cmp	r3, r4
 800553e:	d9fa      	bls.n	8005536 <_free_r+0x42>
 8005540:	6811      	ldr	r1, [r2, #0]
 8005542:	1850      	adds	r0, r2, r1
 8005544:	42a0      	cmp	r0, r4
 8005546:	d10b      	bne.n	8005560 <_free_r+0x6c>
 8005548:	6820      	ldr	r0, [r4, #0]
 800554a:	4401      	add	r1, r0
 800554c:	1850      	adds	r0, r2, r1
 800554e:	4283      	cmp	r3, r0
 8005550:	6011      	str	r1, [r2, #0]
 8005552:	d1e0      	bne.n	8005516 <_free_r+0x22>
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	6053      	str	r3, [r2, #4]
 800555a:	4408      	add	r0, r1
 800555c:	6010      	str	r0, [r2, #0]
 800555e:	e7da      	b.n	8005516 <_free_r+0x22>
 8005560:	d902      	bls.n	8005568 <_free_r+0x74>
 8005562:	230c      	movs	r3, #12
 8005564:	602b      	str	r3, [r5, #0]
 8005566:	e7d6      	b.n	8005516 <_free_r+0x22>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	1821      	adds	r1, r4, r0
 800556c:	428b      	cmp	r3, r1
 800556e:	bf04      	itt	eq
 8005570:	6819      	ldreq	r1, [r3, #0]
 8005572:	685b      	ldreq	r3, [r3, #4]
 8005574:	6063      	str	r3, [r4, #4]
 8005576:	bf04      	itt	eq
 8005578:	1809      	addeq	r1, r1, r0
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	6054      	str	r4, [r2, #4]
 800557e:	e7ca      	b.n	8005516 <_free_r+0x22>
 8005580:	bd38      	pop	{r3, r4, r5, pc}
 8005582:	bf00      	nop
 8005584:	20002580 	.word	0x20002580

08005588 <sbrk_aligned>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4e0f      	ldr	r6, [pc, #60]	@ (80055c8 <sbrk_aligned+0x40>)
 800558c:	460c      	mov	r4, r1
 800558e:	6831      	ldr	r1, [r6, #0]
 8005590:	4605      	mov	r5, r0
 8005592:	b911      	cbnz	r1, 800559a <sbrk_aligned+0x12>
 8005594:	f000 fcda 	bl	8005f4c <_sbrk_r>
 8005598:	6030      	str	r0, [r6, #0]
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	f000 fcd5 	bl	8005f4c <_sbrk_r>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d103      	bne.n	80055ae <sbrk_aligned+0x26>
 80055a6:	f04f 34ff 	mov.w	r4, #4294967295
 80055aa:	4620      	mov	r0, r4
 80055ac:	bd70      	pop	{r4, r5, r6, pc}
 80055ae:	1cc4      	adds	r4, r0, #3
 80055b0:	f024 0403 	bic.w	r4, r4, #3
 80055b4:	42a0      	cmp	r0, r4
 80055b6:	d0f8      	beq.n	80055aa <sbrk_aligned+0x22>
 80055b8:	1a21      	subs	r1, r4, r0
 80055ba:	4628      	mov	r0, r5
 80055bc:	f000 fcc6 	bl	8005f4c <_sbrk_r>
 80055c0:	3001      	adds	r0, #1
 80055c2:	d1f2      	bne.n	80055aa <sbrk_aligned+0x22>
 80055c4:	e7ef      	b.n	80055a6 <sbrk_aligned+0x1e>
 80055c6:	bf00      	nop
 80055c8:	2000257c 	.word	0x2000257c

080055cc <_malloc_r>:
 80055cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055d0:	1ccd      	adds	r5, r1, #3
 80055d2:	f025 0503 	bic.w	r5, r5, #3
 80055d6:	3508      	adds	r5, #8
 80055d8:	2d0c      	cmp	r5, #12
 80055da:	bf38      	it	cc
 80055dc:	250c      	movcc	r5, #12
 80055de:	2d00      	cmp	r5, #0
 80055e0:	4606      	mov	r6, r0
 80055e2:	db01      	blt.n	80055e8 <_malloc_r+0x1c>
 80055e4:	42a9      	cmp	r1, r5
 80055e6:	d904      	bls.n	80055f2 <_malloc_r+0x26>
 80055e8:	230c      	movs	r3, #12
 80055ea:	6033      	str	r3, [r6, #0]
 80055ec:	2000      	movs	r0, #0
 80055ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056c8 <_malloc_r+0xfc>
 80055f6:	f000 f869 	bl	80056cc <__malloc_lock>
 80055fa:	f8d8 3000 	ldr.w	r3, [r8]
 80055fe:	461c      	mov	r4, r3
 8005600:	bb44      	cbnz	r4, 8005654 <_malloc_r+0x88>
 8005602:	4629      	mov	r1, r5
 8005604:	4630      	mov	r0, r6
 8005606:	f7ff ffbf 	bl	8005588 <sbrk_aligned>
 800560a:	1c43      	adds	r3, r0, #1
 800560c:	4604      	mov	r4, r0
 800560e:	d158      	bne.n	80056c2 <_malloc_r+0xf6>
 8005610:	f8d8 4000 	ldr.w	r4, [r8]
 8005614:	4627      	mov	r7, r4
 8005616:	2f00      	cmp	r7, #0
 8005618:	d143      	bne.n	80056a2 <_malloc_r+0xd6>
 800561a:	2c00      	cmp	r4, #0
 800561c:	d04b      	beq.n	80056b6 <_malloc_r+0xea>
 800561e:	6823      	ldr	r3, [r4, #0]
 8005620:	4639      	mov	r1, r7
 8005622:	4630      	mov	r0, r6
 8005624:	eb04 0903 	add.w	r9, r4, r3
 8005628:	f000 fc90 	bl	8005f4c <_sbrk_r>
 800562c:	4581      	cmp	r9, r0
 800562e:	d142      	bne.n	80056b6 <_malloc_r+0xea>
 8005630:	6821      	ldr	r1, [r4, #0]
 8005632:	1a6d      	subs	r5, r5, r1
 8005634:	4629      	mov	r1, r5
 8005636:	4630      	mov	r0, r6
 8005638:	f7ff ffa6 	bl	8005588 <sbrk_aligned>
 800563c:	3001      	adds	r0, #1
 800563e:	d03a      	beq.n	80056b6 <_malloc_r+0xea>
 8005640:	6823      	ldr	r3, [r4, #0]
 8005642:	442b      	add	r3, r5
 8005644:	6023      	str	r3, [r4, #0]
 8005646:	f8d8 3000 	ldr.w	r3, [r8]
 800564a:	685a      	ldr	r2, [r3, #4]
 800564c:	bb62      	cbnz	r2, 80056a8 <_malloc_r+0xdc>
 800564e:	f8c8 7000 	str.w	r7, [r8]
 8005652:	e00f      	b.n	8005674 <_malloc_r+0xa8>
 8005654:	6822      	ldr	r2, [r4, #0]
 8005656:	1b52      	subs	r2, r2, r5
 8005658:	d420      	bmi.n	800569c <_malloc_r+0xd0>
 800565a:	2a0b      	cmp	r2, #11
 800565c:	d917      	bls.n	800568e <_malloc_r+0xc2>
 800565e:	1961      	adds	r1, r4, r5
 8005660:	42a3      	cmp	r3, r4
 8005662:	6025      	str	r5, [r4, #0]
 8005664:	bf18      	it	ne
 8005666:	6059      	strne	r1, [r3, #4]
 8005668:	6863      	ldr	r3, [r4, #4]
 800566a:	bf08      	it	eq
 800566c:	f8c8 1000 	streq.w	r1, [r8]
 8005670:	5162      	str	r2, [r4, r5]
 8005672:	604b      	str	r3, [r1, #4]
 8005674:	4630      	mov	r0, r6
 8005676:	f000 f82f 	bl	80056d8 <__malloc_unlock>
 800567a:	f104 000b 	add.w	r0, r4, #11
 800567e:	1d23      	adds	r3, r4, #4
 8005680:	f020 0007 	bic.w	r0, r0, #7
 8005684:	1ac2      	subs	r2, r0, r3
 8005686:	bf1c      	itt	ne
 8005688:	1a1b      	subne	r3, r3, r0
 800568a:	50a3      	strne	r3, [r4, r2]
 800568c:	e7af      	b.n	80055ee <_malloc_r+0x22>
 800568e:	6862      	ldr	r2, [r4, #4]
 8005690:	42a3      	cmp	r3, r4
 8005692:	bf0c      	ite	eq
 8005694:	f8c8 2000 	streq.w	r2, [r8]
 8005698:	605a      	strne	r2, [r3, #4]
 800569a:	e7eb      	b.n	8005674 <_malloc_r+0xa8>
 800569c:	4623      	mov	r3, r4
 800569e:	6864      	ldr	r4, [r4, #4]
 80056a0:	e7ae      	b.n	8005600 <_malloc_r+0x34>
 80056a2:	463c      	mov	r4, r7
 80056a4:	687f      	ldr	r7, [r7, #4]
 80056a6:	e7b6      	b.n	8005616 <_malloc_r+0x4a>
 80056a8:	461a      	mov	r2, r3
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d1fb      	bne.n	80056a8 <_malloc_r+0xdc>
 80056b0:	2300      	movs	r3, #0
 80056b2:	6053      	str	r3, [r2, #4]
 80056b4:	e7de      	b.n	8005674 <_malloc_r+0xa8>
 80056b6:	230c      	movs	r3, #12
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	4630      	mov	r0, r6
 80056bc:	f000 f80c 	bl	80056d8 <__malloc_unlock>
 80056c0:	e794      	b.n	80055ec <_malloc_r+0x20>
 80056c2:	6005      	str	r5, [r0, #0]
 80056c4:	e7d6      	b.n	8005674 <_malloc_r+0xa8>
 80056c6:	bf00      	nop
 80056c8:	20002580 	.word	0x20002580

080056cc <__malloc_lock>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__malloc_lock+0x8>)
 80056ce:	f7ff bf00 	b.w	80054d2 <__retarget_lock_acquire_recursive>
 80056d2:	bf00      	nop
 80056d4:	20002578 	.word	0x20002578

080056d8 <__malloc_unlock>:
 80056d8:	4801      	ldr	r0, [pc, #4]	@ (80056e0 <__malloc_unlock+0x8>)
 80056da:	f7ff befb 	b.w	80054d4 <__retarget_lock_release_recursive>
 80056de:	bf00      	nop
 80056e0:	20002578 	.word	0x20002578

080056e4 <__sfputc_r>:
 80056e4:	6893      	ldr	r3, [r2, #8]
 80056e6:	3b01      	subs	r3, #1
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	b410      	push	{r4}
 80056ec:	6093      	str	r3, [r2, #8]
 80056ee:	da08      	bge.n	8005702 <__sfputc_r+0x1e>
 80056f0:	6994      	ldr	r4, [r2, #24]
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	db01      	blt.n	80056fa <__sfputc_r+0x16>
 80056f6:	290a      	cmp	r1, #10
 80056f8:	d103      	bne.n	8005702 <__sfputc_r+0x1e>
 80056fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056fe:	f7ff bdda 	b.w	80052b6 <__swbuf_r>
 8005702:	6813      	ldr	r3, [r2, #0]
 8005704:	1c58      	adds	r0, r3, #1
 8005706:	6010      	str	r0, [r2, #0]
 8005708:	7019      	strb	r1, [r3, #0]
 800570a:	4608      	mov	r0, r1
 800570c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005710:	4770      	bx	lr

08005712 <__sfputs_r>:
 8005712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005714:	4606      	mov	r6, r0
 8005716:	460f      	mov	r7, r1
 8005718:	4614      	mov	r4, r2
 800571a:	18d5      	adds	r5, r2, r3
 800571c:	42ac      	cmp	r4, r5
 800571e:	d101      	bne.n	8005724 <__sfputs_r+0x12>
 8005720:	2000      	movs	r0, #0
 8005722:	e007      	b.n	8005734 <__sfputs_r+0x22>
 8005724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005728:	463a      	mov	r2, r7
 800572a:	4630      	mov	r0, r6
 800572c:	f7ff ffda 	bl	80056e4 <__sfputc_r>
 8005730:	1c43      	adds	r3, r0, #1
 8005732:	d1f3      	bne.n	800571c <__sfputs_r+0xa>
 8005734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005738 <_vfiprintf_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	460d      	mov	r5, r1
 800573e:	b09d      	sub	sp, #116	@ 0x74
 8005740:	4614      	mov	r4, r2
 8005742:	4698      	mov	r8, r3
 8005744:	4606      	mov	r6, r0
 8005746:	b118      	cbz	r0, 8005750 <_vfiprintf_r+0x18>
 8005748:	6a03      	ldr	r3, [r0, #32]
 800574a:	b90b      	cbnz	r3, 8005750 <_vfiprintf_r+0x18>
 800574c:	f7ff fcc2 	bl	80050d4 <__sinit>
 8005750:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005752:	07d9      	lsls	r1, r3, #31
 8005754:	d405      	bmi.n	8005762 <_vfiprintf_r+0x2a>
 8005756:	89ab      	ldrh	r3, [r5, #12]
 8005758:	059a      	lsls	r2, r3, #22
 800575a:	d402      	bmi.n	8005762 <_vfiprintf_r+0x2a>
 800575c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800575e:	f7ff feb8 	bl	80054d2 <__retarget_lock_acquire_recursive>
 8005762:	89ab      	ldrh	r3, [r5, #12]
 8005764:	071b      	lsls	r3, r3, #28
 8005766:	d501      	bpl.n	800576c <_vfiprintf_r+0x34>
 8005768:	692b      	ldr	r3, [r5, #16]
 800576a:	b99b      	cbnz	r3, 8005794 <_vfiprintf_r+0x5c>
 800576c:	4629      	mov	r1, r5
 800576e:	4630      	mov	r0, r6
 8005770:	f7ff fde0 	bl	8005334 <__swsetup_r>
 8005774:	b170      	cbz	r0, 8005794 <_vfiprintf_r+0x5c>
 8005776:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005778:	07dc      	lsls	r4, r3, #31
 800577a:	d504      	bpl.n	8005786 <_vfiprintf_r+0x4e>
 800577c:	f04f 30ff 	mov.w	r0, #4294967295
 8005780:	b01d      	add	sp, #116	@ 0x74
 8005782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005786:	89ab      	ldrh	r3, [r5, #12]
 8005788:	0598      	lsls	r0, r3, #22
 800578a:	d4f7      	bmi.n	800577c <_vfiprintf_r+0x44>
 800578c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800578e:	f7ff fea1 	bl	80054d4 <__retarget_lock_release_recursive>
 8005792:	e7f3      	b.n	800577c <_vfiprintf_r+0x44>
 8005794:	2300      	movs	r3, #0
 8005796:	9309      	str	r3, [sp, #36]	@ 0x24
 8005798:	2320      	movs	r3, #32
 800579a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800579e:	f8cd 800c 	str.w	r8, [sp, #12]
 80057a2:	2330      	movs	r3, #48	@ 0x30
 80057a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005954 <_vfiprintf_r+0x21c>
 80057a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80057ac:	f04f 0901 	mov.w	r9, #1
 80057b0:	4623      	mov	r3, r4
 80057b2:	469a      	mov	sl, r3
 80057b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b8:	b10a      	cbz	r2, 80057be <_vfiprintf_r+0x86>
 80057ba:	2a25      	cmp	r2, #37	@ 0x25
 80057bc:	d1f9      	bne.n	80057b2 <_vfiprintf_r+0x7a>
 80057be:	ebba 0b04 	subs.w	fp, sl, r4
 80057c2:	d00b      	beq.n	80057dc <_vfiprintf_r+0xa4>
 80057c4:	465b      	mov	r3, fp
 80057c6:	4622      	mov	r2, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	4630      	mov	r0, r6
 80057cc:	f7ff ffa1 	bl	8005712 <__sfputs_r>
 80057d0:	3001      	adds	r0, #1
 80057d2:	f000 80a7 	beq.w	8005924 <_vfiprintf_r+0x1ec>
 80057d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057d8:	445a      	add	r2, fp
 80057da:	9209      	str	r2, [sp, #36]	@ 0x24
 80057dc:	f89a 3000 	ldrb.w	r3, [sl]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	f000 809f 	beq.w	8005924 <_vfiprintf_r+0x1ec>
 80057e6:	2300      	movs	r3, #0
 80057e8:	f04f 32ff 	mov.w	r2, #4294967295
 80057ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057f0:	f10a 0a01 	add.w	sl, sl, #1
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	9307      	str	r3, [sp, #28]
 80057f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057fc:	931a      	str	r3, [sp, #104]	@ 0x68
 80057fe:	4654      	mov	r4, sl
 8005800:	2205      	movs	r2, #5
 8005802:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005806:	4853      	ldr	r0, [pc, #332]	@ (8005954 <_vfiprintf_r+0x21c>)
 8005808:	f7fa fcf2 	bl	80001f0 <memchr>
 800580c:	9a04      	ldr	r2, [sp, #16]
 800580e:	b9d8      	cbnz	r0, 8005848 <_vfiprintf_r+0x110>
 8005810:	06d1      	lsls	r1, r2, #27
 8005812:	bf44      	itt	mi
 8005814:	2320      	movmi	r3, #32
 8005816:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800581a:	0713      	lsls	r3, r2, #28
 800581c:	bf44      	itt	mi
 800581e:	232b      	movmi	r3, #43	@ 0x2b
 8005820:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005824:	f89a 3000 	ldrb.w	r3, [sl]
 8005828:	2b2a      	cmp	r3, #42	@ 0x2a
 800582a:	d015      	beq.n	8005858 <_vfiprintf_r+0x120>
 800582c:	9a07      	ldr	r2, [sp, #28]
 800582e:	4654      	mov	r4, sl
 8005830:	2000      	movs	r0, #0
 8005832:	f04f 0c0a 	mov.w	ip, #10
 8005836:	4621      	mov	r1, r4
 8005838:	f811 3b01 	ldrb.w	r3, [r1], #1
 800583c:	3b30      	subs	r3, #48	@ 0x30
 800583e:	2b09      	cmp	r3, #9
 8005840:	d94b      	bls.n	80058da <_vfiprintf_r+0x1a2>
 8005842:	b1b0      	cbz	r0, 8005872 <_vfiprintf_r+0x13a>
 8005844:	9207      	str	r2, [sp, #28]
 8005846:	e014      	b.n	8005872 <_vfiprintf_r+0x13a>
 8005848:	eba0 0308 	sub.w	r3, r0, r8
 800584c:	fa09 f303 	lsl.w	r3, r9, r3
 8005850:	4313      	orrs	r3, r2
 8005852:	9304      	str	r3, [sp, #16]
 8005854:	46a2      	mov	sl, r4
 8005856:	e7d2      	b.n	80057fe <_vfiprintf_r+0xc6>
 8005858:	9b03      	ldr	r3, [sp, #12]
 800585a:	1d19      	adds	r1, r3, #4
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	9103      	str	r1, [sp, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	bfbb      	ittet	lt
 8005864:	425b      	neglt	r3, r3
 8005866:	f042 0202 	orrlt.w	r2, r2, #2
 800586a:	9307      	strge	r3, [sp, #28]
 800586c:	9307      	strlt	r3, [sp, #28]
 800586e:	bfb8      	it	lt
 8005870:	9204      	strlt	r2, [sp, #16]
 8005872:	7823      	ldrb	r3, [r4, #0]
 8005874:	2b2e      	cmp	r3, #46	@ 0x2e
 8005876:	d10a      	bne.n	800588e <_vfiprintf_r+0x156>
 8005878:	7863      	ldrb	r3, [r4, #1]
 800587a:	2b2a      	cmp	r3, #42	@ 0x2a
 800587c:	d132      	bne.n	80058e4 <_vfiprintf_r+0x1ac>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	1d1a      	adds	r2, r3, #4
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	9203      	str	r2, [sp, #12]
 8005886:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800588a:	3402      	adds	r4, #2
 800588c:	9305      	str	r3, [sp, #20]
 800588e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005964 <_vfiprintf_r+0x22c>
 8005892:	7821      	ldrb	r1, [r4, #0]
 8005894:	2203      	movs	r2, #3
 8005896:	4650      	mov	r0, sl
 8005898:	f7fa fcaa 	bl	80001f0 <memchr>
 800589c:	b138      	cbz	r0, 80058ae <_vfiprintf_r+0x176>
 800589e:	9b04      	ldr	r3, [sp, #16]
 80058a0:	eba0 000a 	sub.w	r0, r0, sl
 80058a4:	2240      	movs	r2, #64	@ 0x40
 80058a6:	4082      	lsls	r2, r0
 80058a8:	4313      	orrs	r3, r2
 80058aa:	3401      	adds	r4, #1
 80058ac:	9304      	str	r3, [sp, #16]
 80058ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058b2:	4829      	ldr	r0, [pc, #164]	@ (8005958 <_vfiprintf_r+0x220>)
 80058b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058b8:	2206      	movs	r2, #6
 80058ba:	f7fa fc99 	bl	80001f0 <memchr>
 80058be:	2800      	cmp	r0, #0
 80058c0:	d03f      	beq.n	8005942 <_vfiprintf_r+0x20a>
 80058c2:	4b26      	ldr	r3, [pc, #152]	@ (800595c <_vfiprintf_r+0x224>)
 80058c4:	bb1b      	cbnz	r3, 800590e <_vfiprintf_r+0x1d6>
 80058c6:	9b03      	ldr	r3, [sp, #12]
 80058c8:	3307      	adds	r3, #7
 80058ca:	f023 0307 	bic.w	r3, r3, #7
 80058ce:	3308      	adds	r3, #8
 80058d0:	9303      	str	r3, [sp, #12]
 80058d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058d4:	443b      	add	r3, r7
 80058d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058d8:	e76a      	b.n	80057b0 <_vfiprintf_r+0x78>
 80058da:	fb0c 3202 	mla	r2, ip, r2, r3
 80058de:	460c      	mov	r4, r1
 80058e0:	2001      	movs	r0, #1
 80058e2:	e7a8      	b.n	8005836 <_vfiprintf_r+0xfe>
 80058e4:	2300      	movs	r3, #0
 80058e6:	3401      	adds	r4, #1
 80058e8:	9305      	str	r3, [sp, #20]
 80058ea:	4619      	mov	r1, r3
 80058ec:	f04f 0c0a 	mov.w	ip, #10
 80058f0:	4620      	mov	r0, r4
 80058f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058f6:	3a30      	subs	r2, #48	@ 0x30
 80058f8:	2a09      	cmp	r2, #9
 80058fa:	d903      	bls.n	8005904 <_vfiprintf_r+0x1cc>
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d0c6      	beq.n	800588e <_vfiprintf_r+0x156>
 8005900:	9105      	str	r1, [sp, #20]
 8005902:	e7c4      	b.n	800588e <_vfiprintf_r+0x156>
 8005904:	fb0c 2101 	mla	r1, ip, r1, r2
 8005908:	4604      	mov	r4, r0
 800590a:	2301      	movs	r3, #1
 800590c:	e7f0      	b.n	80058f0 <_vfiprintf_r+0x1b8>
 800590e:	ab03      	add	r3, sp, #12
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	462a      	mov	r2, r5
 8005914:	4b12      	ldr	r3, [pc, #72]	@ (8005960 <_vfiprintf_r+0x228>)
 8005916:	a904      	add	r1, sp, #16
 8005918:	4630      	mov	r0, r6
 800591a:	f3af 8000 	nop.w
 800591e:	4607      	mov	r7, r0
 8005920:	1c78      	adds	r0, r7, #1
 8005922:	d1d6      	bne.n	80058d2 <_vfiprintf_r+0x19a>
 8005924:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005926:	07d9      	lsls	r1, r3, #31
 8005928:	d405      	bmi.n	8005936 <_vfiprintf_r+0x1fe>
 800592a:	89ab      	ldrh	r3, [r5, #12]
 800592c:	059a      	lsls	r2, r3, #22
 800592e:	d402      	bmi.n	8005936 <_vfiprintf_r+0x1fe>
 8005930:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005932:	f7ff fdcf 	bl	80054d4 <__retarget_lock_release_recursive>
 8005936:	89ab      	ldrh	r3, [r5, #12]
 8005938:	065b      	lsls	r3, r3, #25
 800593a:	f53f af1f 	bmi.w	800577c <_vfiprintf_r+0x44>
 800593e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005940:	e71e      	b.n	8005780 <_vfiprintf_r+0x48>
 8005942:	ab03      	add	r3, sp, #12
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	462a      	mov	r2, r5
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <_vfiprintf_r+0x228>)
 800594a:	a904      	add	r1, sp, #16
 800594c:	4630      	mov	r0, r6
 800594e:	f000 f879 	bl	8005a44 <_printf_i>
 8005952:	e7e4      	b.n	800591e <_vfiprintf_r+0x1e6>
 8005954:	0800d6b0 	.word	0x0800d6b0
 8005958:	0800d6ba 	.word	0x0800d6ba
 800595c:	00000000 	.word	0x00000000
 8005960:	08005713 	.word	0x08005713
 8005964:	0800d6b6 	.word	0x0800d6b6

08005968 <_printf_common>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	4616      	mov	r6, r2
 800596e:	4698      	mov	r8, r3
 8005970:	688a      	ldr	r2, [r1, #8]
 8005972:	690b      	ldr	r3, [r1, #16]
 8005974:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005978:	4293      	cmp	r3, r2
 800597a:	bfb8      	it	lt
 800597c:	4613      	movlt	r3, r2
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005984:	4607      	mov	r7, r0
 8005986:	460c      	mov	r4, r1
 8005988:	b10a      	cbz	r2, 800598e <_printf_common+0x26>
 800598a:	3301      	adds	r3, #1
 800598c:	6033      	str	r3, [r6, #0]
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	0699      	lsls	r1, r3, #26
 8005992:	bf42      	ittt	mi
 8005994:	6833      	ldrmi	r3, [r6, #0]
 8005996:	3302      	addmi	r3, #2
 8005998:	6033      	strmi	r3, [r6, #0]
 800599a:	6825      	ldr	r5, [r4, #0]
 800599c:	f015 0506 	ands.w	r5, r5, #6
 80059a0:	d106      	bne.n	80059b0 <_printf_common+0x48>
 80059a2:	f104 0a19 	add.w	sl, r4, #25
 80059a6:	68e3      	ldr	r3, [r4, #12]
 80059a8:	6832      	ldr	r2, [r6, #0]
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	42ab      	cmp	r3, r5
 80059ae:	dc26      	bgt.n	80059fe <_printf_common+0x96>
 80059b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059b4:	6822      	ldr	r2, [r4, #0]
 80059b6:	3b00      	subs	r3, #0
 80059b8:	bf18      	it	ne
 80059ba:	2301      	movne	r3, #1
 80059bc:	0692      	lsls	r2, r2, #26
 80059be:	d42b      	bmi.n	8005a18 <_printf_common+0xb0>
 80059c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059c4:	4641      	mov	r1, r8
 80059c6:	4638      	mov	r0, r7
 80059c8:	47c8      	blx	r9
 80059ca:	3001      	adds	r0, #1
 80059cc:	d01e      	beq.n	8005a0c <_printf_common+0xa4>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	6922      	ldr	r2, [r4, #16]
 80059d2:	f003 0306 	and.w	r3, r3, #6
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	bf02      	ittt	eq
 80059da:	68e5      	ldreq	r5, [r4, #12]
 80059dc:	6833      	ldreq	r3, [r6, #0]
 80059de:	1aed      	subeq	r5, r5, r3
 80059e0:	68a3      	ldr	r3, [r4, #8]
 80059e2:	bf0c      	ite	eq
 80059e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059e8:	2500      	movne	r5, #0
 80059ea:	4293      	cmp	r3, r2
 80059ec:	bfc4      	itt	gt
 80059ee:	1a9b      	subgt	r3, r3, r2
 80059f0:	18ed      	addgt	r5, r5, r3
 80059f2:	2600      	movs	r6, #0
 80059f4:	341a      	adds	r4, #26
 80059f6:	42b5      	cmp	r5, r6
 80059f8:	d11a      	bne.n	8005a30 <_printf_common+0xc8>
 80059fa:	2000      	movs	r0, #0
 80059fc:	e008      	b.n	8005a10 <_printf_common+0xa8>
 80059fe:	2301      	movs	r3, #1
 8005a00:	4652      	mov	r2, sl
 8005a02:	4641      	mov	r1, r8
 8005a04:	4638      	mov	r0, r7
 8005a06:	47c8      	blx	r9
 8005a08:	3001      	adds	r0, #1
 8005a0a:	d103      	bne.n	8005a14 <_printf_common+0xac>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a14:	3501      	adds	r5, #1
 8005a16:	e7c6      	b.n	80059a6 <_printf_common+0x3e>
 8005a18:	18e1      	adds	r1, r4, r3
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	2030      	movs	r0, #48	@ 0x30
 8005a1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a22:	4422      	add	r2, r4
 8005a24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a2c:	3302      	adds	r3, #2
 8005a2e:	e7c7      	b.n	80059c0 <_printf_common+0x58>
 8005a30:	2301      	movs	r3, #1
 8005a32:	4622      	mov	r2, r4
 8005a34:	4641      	mov	r1, r8
 8005a36:	4638      	mov	r0, r7
 8005a38:	47c8      	blx	r9
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0e6      	beq.n	8005a0c <_printf_common+0xa4>
 8005a3e:	3601      	adds	r6, #1
 8005a40:	e7d9      	b.n	80059f6 <_printf_common+0x8e>
	...

08005a44 <_printf_i>:
 8005a44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a48:	7e0f      	ldrb	r7, [r1, #24]
 8005a4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a4c:	2f78      	cmp	r7, #120	@ 0x78
 8005a4e:	4691      	mov	r9, r2
 8005a50:	4680      	mov	r8, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	469a      	mov	sl, r3
 8005a56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a5a:	d807      	bhi.n	8005a6c <_printf_i+0x28>
 8005a5c:	2f62      	cmp	r7, #98	@ 0x62
 8005a5e:	d80a      	bhi.n	8005a76 <_printf_i+0x32>
 8005a60:	2f00      	cmp	r7, #0
 8005a62:	f000 80d2 	beq.w	8005c0a <_printf_i+0x1c6>
 8005a66:	2f58      	cmp	r7, #88	@ 0x58
 8005a68:	f000 80b9 	beq.w	8005bde <_printf_i+0x19a>
 8005a6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a74:	e03a      	b.n	8005aec <_printf_i+0xa8>
 8005a76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a7a:	2b15      	cmp	r3, #21
 8005a7c:	d8f6      	bhi.n	8005a6c <_printf_i+0x28>
 8005a7e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a84 <_printf_i+0x40>)
 8005a80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a84:	08005add 	.word	0x08005add
 8005a88:	08005af1 	.word	0x08005af1
 8005a8c:	08005a6d 	.word	0x08005a6d
 8005a90:	08005a6d 	.word	0x08005a6d
 8005a94:	08005a6d 	.word	0x08005a6d
 8005a98:	08005a6d 	.word	0x08005a6d
 8005a9c:	08005af1 	.word	0x08005af1
 8005aa0:	08005a6d 	.word	0x08005a6d
 8005aa4:	08005a6d 	.word	0x08005a6d
 8005aa8:	08005a6d 	.word	0x08005a6d
 8005aac:	08005a6d 	.word	0x08005a6d
 8005ab0:	08005bf1 	.word	0x08005bf1
 8005ab4:	08005b1b 	.word	0x08005b1b
 8005ab8:	08005bab 	.word	0x08005bab
 8005abc:	08005a6d 	.word	0x08005a6d
 8005ac0:	08005a6d 	.word	0x08005a6d
 8005ac4:	08005c13 	.word	0x08005c13
 8005ac8:	08005a6d 	.word	0x08005a6d
 8005acc:	08005b1b 	.word	0x08005b1b
 8005ad0:	08005a6d 	.word	0x08005a6d
 8005ad4:	08005a6d 	.word	0x08005a6d
 8005ad8:	08005bb3 	.word	0x08005bb3
 8005adc:	6833      	ldr	r3, [r6, #0]
 8005ade:	1d1a      	adds	r2, r3, #4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6032      	str	r2, [r6, #0]
 8005ae4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ae8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aec:	2301      	movs	r3, #1
 8005aee:	e09d      	b.n	8005c2c <_printf_i+0x1e8>
 8005af0:	6833      	ldr	r3, [r6, #0]
 8005af2:	6820      	ldr	r0, [r4, #0]
 8005af4:	1d19      	adds	r1, r3, #4
 8005af6:	6031      	str	r1, [r6, #0]
 8005af8:	0606      	lsls	r6, r0, #24
 8005afa:	d501      	bpl.n	8005b00 <_printf_i+0xbc>
 8005afc:	681d      	ldr	r5, [r3, #0]
 8005afe:	e003      	b.n	8005b08 <_printf_i+0xc4>
 8005b00:	0645      	lsls	r5, r0, #25
 8005b02:	d5fb      	bpl.n	8005afc <_printf_i+0xb8>
 8005b04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b08:	2d00      	cmp	r5, #0
 8005b0a:	da03      	bge.n	8005b14 <_printf_i+0xd0>
 8005b0c:	232d      	movs	r3, #45	@ 0x2d
 8005b0e:	426d      	negs	r5, r5
 8005b10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b14:	4859      	ldr	r0, [pc, #356]	@ (8005c7c <_printf_i+0x238>)
 8005b16:	230a      	movs	r3, #10
 8005b18:	e011      	b.n	8005b3e <_printf_i+0xfa>
 8005b1a:	6821      	ldr	r1, [r4, #0]
 8005b1c:	6833      	ldr	r3, [r6, #0]
 8005b1e:	0608      	lsls	r0, r1, #24
 8005b20:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b24:	d402      	bmi.n	8005b2c <_printf_i+0xe8>
 8005b26:	0649      	lsls	r1, r1, #25
 8005b28:	bf48      	it	mi
 8005b2a:	b2ad      	uxthmi	r5, r5
 8005b2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b2e:	4853      	ldr	r0, [pc, #332]	@ (8005c7c <_printf_i+0x238>)
 8005b30:	6033      	str	r3, [r6, #0]
 8005b32:	bf14      	ite	ne
 8005b34:	230a      	movne	r3, #10
 8005b36:	2308      	moveq	r3, #8
 8005b38:	2100      	movs	r1, #0
 8005b3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b3e:	6866      	ldr	r6, [r4, #4]
 8005b40:	60a6      	str	r6, [r4, #8]
 8005b42:	2e00      	cmp	r6, #0
 8005b44:	bfa2      	ittt	ge
 8005b46:	6821      	ldrge	r1, [r4, #0]
 8005b48:	f021 0104 	bicge.w	r1, r1, #4
 8005b4c:	6021      	strge	r1, [r4, #0]
 8005b4e:	b90d      	cbnz	r5, 8005b54 <_printf_i+0x110>
 8005b50:	2e00      	cmp	r6, #0
 8005b52:	d04b      	beq.n	8005bec <_printf_i+0x1a8>
 8005b54:	4616      	mov	r6, r2
 8005b56:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b5a:	fb03 5711 	mls	r7, r3, r1, r5
 8005b5e:	5dc7      	ldrb	r7, [r0, r7]
 8005b60:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b64:	462f      	mov	r7, r5
 8005b66:	42bb      	cmp	r3, r7
 8005b68:	460d      	mov	r5, r1
 8005b6a:	d9f4      	bls.n	8005b56 <_printf_i+0x112>
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d10b      	bne.n	8005b88 <_printf_i+0x144>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	07df      	lsls	r7, r3, #31
 8005b74:	d508      	bpl.n	8005b88 <_printf_i+0x144>
 8005b76:	6923      	ldr	r3, [r4, #16]
 8005b78:	6861      	ldr	r1, [r4, #4]
 8005b7a:	4299      	cmp	r1, r3
 8005b7c:	bfde      	ittt	le
 8005b7e:	2330      	movle	r3, #48	@ 0x30
 8005b80:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b84:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b88:	1b92      	subs	r2, r2, r6
 8005b8a:	6122      	str	r2, [r4, #16]
 8005b8c:	f8cd a000 	str.w	sl, [sp]
 8005b90:	464b      	mov	r3, r9
 8005b92:	aa03      	add	r2, sp, #12
 8005b94:	4621      	mov	r1, r4
 8005b96:	4640      	mov	r0, r8
 8005b98:	f7ff fee6 	bl	8005968 <_printf_common>
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	d14a      	bne.n	8005c36 <_printf_i+0x1f2>
 8005ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba4:	b004      	add	sp, #16
 8005ba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	f043 0320 	orr.w	r3, r3, #32
 8005bb0:	6023      	str	r3, [r4, #0]
 8005bb2:	4833      	ldr	r0, [pc, #204]	@ (8005c80 <_printf_i+0x23c>)
 8005bb4:	2778      	movs	r7, #120	@ 0x78
 8005bb6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005bba:	6823      	ldr	r3, [r4, #0]
 8005bbc:	6831      	ldr	r1, [r6, #0]
 8005bbe:	061f      	lsls	r7, r3, #24
 8005bc0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bc4:	d402      	bmi.n	8005bcc <_printf_i+0x188>
 8005bc6:	065f      	lsls	r7, r3, #25
 8005bc8:	bf48      	it	mi
 8005bca:	b2ad      	uxthmi	r5, r5
 8005bcc:	6031      	str	r1, [r6, #0]
 8005bce:	07d9      	lsls	r1, r3, #31
 8005bd0:	bf44      	itt	mi
 8005bd2:	f043 0320 	orrmi.w	r3, r3, #32
 8005bd6:	6023      	strmi	r3, [r4, #0]
 8005bd8:	b11d      	cbz	r5, 8005be2 <_printf_i+0x19e>
 8005bda:	2310      	movs	r3, #16
 8005bdc:	e7ac      	b.n	8005b38 <_printf_i+0xf4>
 8005bde:	4827      	ldr	r0, [pc, #156]	@ (8005c7c <_printf_i+0x238>)
 8005be0:	e7e9      	b.n	8005bb6 <_printf_i+0x172>
 8005be2:	6823      	ldr	r3, [r4, #0]
 8005be4:	f023 0320 	bic.w	r3, r3, #32
 8005be8:	6023      	str	r3, [r4, #0]
 8005bea:	e7f6      	b.n	8005bda <_printf_i+0x196>
 8005bec:	4616      	mov	r6, r2
 8005bee:	e7bd      	b.n	8005b6c <_printf_i+0x128>
 8005bf0:	6833      	ldr	r3, [r6, #0]
 8005bf2:	6825      	ldr	r5, [r4, #0]
 8005bf4:	6961      	ldr	r1, [r4, #20]
 8005bf6:	1d18      	adds	r0, r3, #4
 8005bf8:	6030      	str	r0, [r6, #0]
 8005bfa:	062e      	lsls	r6, r5, #24
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	d501      	bpl.n	8005c04 <_printf_i+0x1c0>
 8005c00:	6019      	str	r1, [r3, #0]
 8005c02:	e002      	b.n	8005c0a <_printf_i+0x1c6>
 8005c04:	0668      	lsls	r0, r5, #25
 8005c06:	d5fb      	bpl.n	8005c00 <_printf_i+0x1bc>
 8005c08:	8019      	strh	r1, [r3, #0]
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	6123      	str	r3, [r4, #16]
 8005c0e:	4616      	mov	r6, r2
 8005c10:	e7bc      	b.n	8005b8c <_printf_i+0x148>
 8005c12:	6833      	ldr	r3, [r6, #0]
 8005c14:	1d1a      	adds	r2, r3, #4
 8005c16:	6032      	str	r2, [r6, #0]
 8005c18:	681e      	ldr	r6, [r3, #0]
 8005c1a:	6862      	ldr	r2, [r4, #4]
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7fa fae6 	bl	80001f0 <memchr>
 8005c24:	b108      	cbz	r0, 8005c2a <_printf_i+0x1e6>
 8005c26:	1b80      	subs	r0, r0, r6
 8005c28:	6060      	str	r0, [r4, #4]
 8005c2a:	6863      	ldr	r3, [r4, #4]
 8005c2c:	6123      	str	r3, [r4, #16]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c34:	e7aa      	b.n	8005b8c <_printf_i+0x148>
 8005c36:	6923      	ldr	r3, [r4, #16]
 8005c38:	4632      	mov	r2, r6
 8005c3a:	4649      	mov	r1, r9
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	47d0      	blx	sl
 8005c40:	3001      	adds	r0, #1
 8005c42:	d0ad      	beq.n	8005ba0 <_printf_i+0x15c>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	079b      	lsls	r3, r3, #30
 8005c48:	d413      	bmi.n	8005c72 <_printf_i+0x22e>
 8005c4a:	68e0      	ldr	r0, [r4, #12]
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	4298      	cmp	r0, r3
 8005c50:	bfb8      	it	lt
 8005c52:	4618      	movlt	r0, r3
 8005c54:	e7a6      	b.n	8005ba4 <_printf_i+0x160>
 8005c56:	2301      	movs	r3, #1
 8005c58:	4632      	mov	r2, r6
 8005c5a:	4649      	mov	r1, r9
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	47d0      	blx	sl
 8005c60:	3001      	adds	r0, #1
 8005c62:	d09d      	beq.n	8005ba0 <_printf_i+0x15c>
 8005c64:	3501      	adds	r5, #1
 8005c66:	68e3      	ldr	r3, [r4, #12]
 8005c68:	9903      	ldr	r1, [sp, #12]
 8005c6a:	1a5b      	subs	r3, r3, r1
 8005c6c:	42ab      	cmp	r3, r5
 8005c6e:	dcf2      	bgt.n	8005c56 <_printf_i+0x212>
 8005c70:	e7eb      	b.n	8005c4a <_printf_i+0x206>
 8005c72:	2500      	movs	r5, #0
 8005c74:	f104 0619 	add.w	r6, r4, #25
 8005c78:	e7f5      	b.n	8005c66 <_printf_i+0x222>
 8005c7a:	bf00      	nop
 8005c7c:	0800d6c1 	.word	0x0800d6c1
 8005c80:	0800d6d2 	.word	0x0800d6d2

08005c84 <__sflush_r>:
 8005c84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c8c:	0716      	lsls	r6, r2, #28
 8005c8e:	4605      	mov	r5, r0
 8005c90:	460c      	mov	r4, r1
 8005c92:	d454      	bmi.n	8005d3e <__sflush_r+0xba>
 8005c94:	684b      	ldr	r3, [r1, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	dc02      	bgt.n	8005ca0 <__sflush_r+0x1c>
 8005c9a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	dd48      	ble.n	8005d32 <__sflush_r+0xae>
 8005ca0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	d045      	beq.n	8005d32 <__sflush_r+0xae>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005cac:	682f      	ldr	r7, [r5, #0]
 8005cae:	6a21      	ldr	r1, [r4, #32]
 8005cb0:	602b      	str	r3, [r5, #0]
 8005cb2:	d030      	beq.n	8005d16 <__sflush_r+0x92>
 8005cb4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005cb6:	89a3      	ldrh	r3, [r4, #12]
 8005cb8:	0759      	lsls	r1, r3, #29
 8005cba:	d505      	bpl.n	8005cc8 <__sflush_r+0x44>
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	1ad2      	subs	r2, r2, r3
 8005cc0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cc2:	b10b      	cbz	r3, 8005cc8 <__sflush_r+0x44>
 8005cc4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cc6:	1ad2      	subs	r2, r2, r3
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005ccc:	6a21      	ldr	r1, [r4, #32]
 8005cce:	4628      	mov	r0, r5
 8005cd0:	47b0      	blx	r6
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	89a3      	ldrh	r3, [r4, #12]
 8005cd6:	d106      	bne.n	8005ce6 <__sflush_r+0x62>
 8005cd8:	6829      	ldr	r1, [r5, #0]
 8005cda:	291d      	cmp	r1, #29
 8005cdc:	d82b      	bhi.n	8005d36 <__sflush_r+0xb2>
 8005cde:	4a2a      	ldr	r2, [pc, #168]	@ (8005d88 <__sflush_r+0x104>)
 8005ce0:	410a      	asrs	r2, r1
 8005ce2:	07d6      	lsls	r6, r2, #31
 8005ce4:	d427      	bmi.n	8005d36 <__sflush_r+0xb2>
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	6062      	str	r2, [r4, #4]
 8005cea:	04d9      	lsls	r1, r3, #19
 8005cec:	6922      	ldr	r2, [r4, #16]
 8005cee:	6022      	str	r2, [r4, #0]
 8005cf0:	d504      	bpl.n	8005cfc <__sflush_r+0x78>
 8005cf2:	1c42      	adds	r2, r0, #1
 8005cf4:	d101      	bne.n	8005cfa <__sflush_r+0x76>
 8005cf6:	682b      	ldr	r3, [r5, #0]
 8005cf8:	b903      	cbnz	r3, 8005cfc <__sflush_r+0x78>
 8005cfa:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cfc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cfe:	602f      	str	r7, [r5, #0]
 8005d00:	b1b9      	cbz	r1, 8005d32 <__sflush_r+0xae>
 8005d02:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d06:	4299      	cmp	r1, r3
 8005d08:	d002      	beq.n	8005d10 <__sflush_r+0x8c>
 8005d0a:	4628      	mov	r0, r5
 8005d0c:	f7ff fbf2 	bl	80054f4 <_free_r>
 8005d10:	2300      	movs	r3, #0
 8005d12:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d14:	e00d      	b.n	8005d32 <__sflush_r+0xae>
 8005d16:	2301      	movs	r3, #1
 8005d18:	4628      	mov	r0, r5
 8005d1a:	47b0      	blx	r6
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	1c50      	adds	r0, r2, #1
 8005d20:	d1c9      	bne.n	8005cb6 <__sflush_r+0x32>
 8005d22:	682b      	ldr	r3, [r5, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d0c6      	beq.n	8005cb6 <__sflush_r+0x32>
 8005d28:	2b1d      	cmp	r3, #29
 8005d2a:	d001      	beq.n	8005d30 <__sflush_r+0xac>
 8005d2c:	2b16      	cmp	r3, #22
 8005d2e:	d11e      	bne.n	8005d6e <__sflush_r+0xea>
 8005d30:	602f      	str	r7, [r5, #0]
 8005d32:	2000      	movs	r0, #0
 8005d34:	e022      	b.n	8005d7c <__sflush_r+0xf8>
 8005d36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d3a:	b21b      	sxth	r3, r3
 8005d3c:	e01b      	b.n	8005d76 <__sflush_r+0xf2>
 8005d3e:	690f      	ldr	r7, [r1, #16]
 8005d40:	2f00      	cmp	r7, #0
 8005d42:	d0f6      	beq.n	8005d32 <__sflush_r+0xae>
 8005d44:	0793      	lsls	r3, r2, #30
 8005d46:	680e      	ldr	r6, [r1, #0]
 8005d48:	bf08      	it	eq
 8005d4a:	694b      	ldreq	r3, [r1, #20]
 8005d4c:	600f      	str	r7, [r1, #0]
 8005d4e:	bf18      	it	ne
 8005d50:	2300      	movne	r3, #0
 8005d52:	eba6 0807 	sub.w	r8, r6, r7
 8005d56:	608b      	str	r3, [r1, #8]
 8005d58:	f1b8 0f00 	cmp.w	r8, #0
 8005d5c:	dde9      	ble.n	8005d32 <__sflush_r+0xae>
 8005d5e:	6a21      	ldr	r1, [r4, #32]
 8005d60:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d62:	4643      	mov	r3, r8
 8005d64:	463a      	mov	r2, r7
 8005d66:	4628      	mov	r0, r5
 8005d68:	47b0      	blx	r6
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	dc08      	bgt.n	8005d80 <__sflush_r+0xfc>
 8005d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d76:	81a3      	strh	r3, [r4, #12]
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d80:	4407      	add	r7, r0
 8005d82:	eba8 0800 	sub.w	r8, r8, r0
 8005d86:	e7e7      	b.n	8005d58 <__sflush_r+0xd4>
 8005d88:	dfbffffe 	.word	0xdfbffffe

08005d8c <_fflush_r>:
 8005d8c:	b538      	push	{r3, r4, r5, lr}
 8005d8e:	690b      	ldr	r3, [r1, #16]
 8005d90:	4605      	mov	r5, r0
 8005d92:	460c      	mov	r4, r1
 8005d94:	b913      	cbnz	r3, 8005d9c <_fflush_r+0x10>
 8005d96:	2500      	movs	r5, #0
 8005d98:	4628      	mov	r0, r5
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	b118      	cbz	r0, 8005da6 <_fflush_r+0x1a>
 8005d9e:	6a03      	ldr	r3, [r0, #32]
 8005da0:	b90b      	cbnz	r3, 8005da6 <_fflush_r+0x1a>
 8005da2:	f7ff f997 	bl	80050d4 <__sinit>
 8005da6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d0f3      	beq.n	8005d96 <_fflush_r+0xa>
 8005dae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005db0:	07d0      	lsls	r0, r2, #31
 8005db2:	d404      	bmi.n	8005dbe <_fflush_r+0x32>
 8005db4:	0599      	lsls	r1, r3, #22
 8005db6:	d402      	bmi.n	8005dbe <_fflush_r+0x32>
 8005db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dba:	f7ff fb8a 	bl	80054d2 <__retarget_lock_acquire_recursive>
 8005dbe:	4628      	mov	r0, r5
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7ff ff5f 	bl	8005c84 <__sflush_r>
 8005dc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005dc8:	07da      	lsls	r2, r3, #31
 8005dca:	4605      	mov	r5, r0
 8005dcc:	d4e4      	bmi.n	8005d98 <_fflush_r+0xc>
 8005dce:	89a3      	ldrh	r3, [r4, #12]
 8005dd0:	059b      	lsls	r3, r3, #22
 8005dd2:	d4e1      	bmi.n	8005d98 <_fflush_r+0xc>
 8005dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dd6:	f7ff fb7d 	bl	80054d4 <__retarget_lock_release_recursive>
 8005dda:	e7dd      	b.n	8005d98 <_fflush_r+0xc>

08005ddc <__swhatbuf_r>:
 8005ddc:	b570      	push	{r4, r5, r6, lr}
 8005dde:	460c      	mov	r4, r1
 8005de0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005de4:	2900      	cmp	r1, #0
 8005de6:	b096      	sub	sp, #88	@ 0x58
 8005de8:	4615      	mov	r5, r2
 8005dea:	461e      	mov	r6, r3
 8005dec:	da0d      	bge.n	8005e0a <__swhatbuf_r+0x2e>
 8005dee:	89a3      	ldrh	r3, [r4, #12]
 8005df0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005df4:	f04f 0100 	mov.w	r1, #0
 8005df8:	bf14      	ite	ne
 8005dfa:	2340      	movne	r3, #64	@ 0x40
 8005dfc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005e00:	2000      	movs	r0, #0
 8005e02:	6031      	str	r1, [r6, #0]
 8005e04:	602b      	str	r3, [r5, #0]
 8005e06:	b016      	add	sp, #88	@ 0x58
 8005e08:	bd70      	pop	{r4, r5, r6, pc}
 8005e0a:	466a      	mov	r2, sp
 8005e0c:	f000 f87c 	bl	8005f08 <_fstat_r>
 8005e10:	2800      	cmp	r0, #0
 8005e12:	dbec      	blt.n	8005dee <__swhatbuf_r+0x12>
 8005e14:	9901      	ldr	r1, [sp, #4]
 8005e16:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005e1a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005e1e:	4259      	negs	r1, r3
 8005e20:	4159      	adcs	r1, r3
 8005e22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005e26:	e7eb      	b.n	8005e00 <__swhatbuf_r+0x24>

08005e28 <__smakebuf_r>:
 8005e28:	898b      	ldrh	r3, [r1, #12]
 8005e2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e2c:	079d      	lsls	r5, r3, #30
 8005e2e:	4606      	mov	r6, r0
 8005e30:	460c      	mov	r4, r1
 8005e32:	d507      	bpl.n	8005e44 <__smakebuf_r+0x1c>
 8005e34:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005e38:	6023      	str	r3, [r4, #0]
 8005e3a:	6123      	str	r3, [r4, #16]
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	6163      	str	r3, [r4, #20]
 8005e40:	b003      	add	sp, #12
 8005e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e44:	ab01      	add	r3, sp, #4
 8005e46:	466a      	mov	r2, sp
 8005e48:	f7ff ffc8 	bl	8005ddc <__swhatbuf_r>
 8005e4c:	9f00      	ldr	r7, [sp, #0]
 8005e4e:	4605      	mov	r5, r0
 8005e50:	4639      	mov	r1, r7
 8005e52:	4630      	mov	r0, r6
 8005e54:	f7ff fbba 	bl	80055cc <_malloc_r>
 8005e58:	b948      	cbnz	r0, 8005e6e <__smakebuf_r+0x46>
 8005e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5e:	059a      	lsls	r2, r3, #22
 8005e60:	d4ee      	bmi.n	8005e40 <__smakebuf_r+0x18>
 8005e62:	f023 0303 	bic.w	r3, r3, #3
 8005e66:	f043 0302 	orr.w	r3, r3, #2
 8005e6a:	81a3      	strh	r3, [r4, #12]
 8005e6c:	e7e2      	b.n	8005e34 <__smakebuf_r+0xc>
 8005e6e:	89a3      	ldrh	r3, [r4, #12]
 8005e70:	6020      	str	r0, [r4, #0]
 8005e72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e76:	81a3      	strh	r3, [r4, #12]
 8005e78:	9b01      	ldr	r3, [sp, #4]
 8005e7a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005e7e:	b15b      	cbz	r3, 8005e98 <__smakebuf_r+0x70>
 8005e80:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e84:	4630      	mov	r0, r6
 8005e86:	f000 f851 	bl	8005f2c <_isatty_r>
 8005e8a:	b128      	cbz	r0, 8005e98 <__smakebuf_r+0x70>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	f023 0303 	bic.w	r3, r3, #3
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	431d      	orrs	r5, r3
 8005e9c:	81a5      	strh	r5, [r4, #12]
 8005e9e:	e7cf      	b.n	8005e40 <__smakebuf_r+0x18>

08005ea0 <_putc_r>:
 8005ea0:	b570      	push	{r4, r5, r6, lr}
 8005ea2:	460d      	mov	r5, r1
 8005ea4:	4614      	mov	r4, r2
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	b118      	cbz	r0, 8005eb2 <_putc_r+0x12>
 8005eaa:	6a03      	ldr	r3, [r0, #32]
 8005eac:	b90b      	cbnz	r3, 8005eb2 <_putc_r+0x12>
 8005eae:	f7ff f911 	bl	80050d4 <__sinit>
 8005eb2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005eb4:	07d8      	lsls	r0, r3, #31
 8005eb6:	d405      	bmi.n	8005ec4 <_putc_r+0x24>
 8005eb8:	89a3      	ldrh	r3, [r4, #12]
 8005eba:	0599      	lsls	r1, r3, #22
 8005ebc:	d402      	bmi.n	8005ec4 <_putc_r+0x24>
 8005ebe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ec0:	f7ff fb07 	bl	80054d2 <__retarget_lock_acquire_recursive>
 8005ec4:	68a3      	ldr	r3, [r4, #8]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	da05      	bge.n	8005eda <_putc_r+0x3a>
 8005ece:	69a2      	ldr	r2, [r4, #24]
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	db12      	blt.n	8005efa <_putc_r+0x5a>
 8005ed4:	b2eb      	uxtb	r3, r5
 8005ed6:	2b0a      	cmp	r3, #10
 8005ed8:	d00f      	beq.n	8005efa <_putc_r+0x5a>
 8005eda:	6823      	ldr	r3, [r4, #0]
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	6022      	str	r2, [r4, #0]
 8005ee0:	701d      	strb	r5, [r3, #0]
 8005ee2:	b2ed      	uxtb	r5, r5
 8005ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005ee6:	07da      	lsls	r2, r3, #31
 8005ee8:	d405      	bmi.n	8005ef6 <_putc_r+0x56>
 8005eea:	89a3      	ldrh	r3, [r4, #12]
 8005eec:	059b      	lsls	r3, r3, #22
 8005eee:	d402      	bmi.n	8005ef6 <_putc_r+0x56>
 8005ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ef2:	f7ff faef 	bl	80054d4 <__retarget_lock_release_recursive>
 8005ef6:	4628      	mov	r0, r5
 8005ef8:	bd70      	pop	{r4, r5, r6, pc}
 8005efa:	4629      	mov	r1, r5
 8005efc:	4622      	mov	r2, r4
 8005efe:	4630      	mov	r0, r6
 8005f00:	f7ff f9d9 	bl	80052b6 <__swbuf_r>
 8005f04:	4605      	mov	r5, r0
 8005f06:	e7ed      	b.n	8005ee4 <_putc_r+0x44>

08005f08 <_fstat_r>:
 8005f08:	b538      	push	{r3, r4, r5, lr}
 8005f0a:	4d07      	ldr	r5, [pc, #28]	@ (8005f28 <_fstat_r+0x20>)
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	4611      	mov	r1, r2
 8005f14:	602b      	str	r3, [r5, #0]
 8005f16:	f7fb fb49 	bl	80015ac <_fstat>
 8005f1a:	1c43      	adds	r3, r0, #1
 8005f1c:	d102      	bne.n	8005f24 <_fstat_r+0x1c>
 8005f1e:	682b      	ldr	r3, [r5, #0]
 8005f20:	b103      	cbz	r3, 8005f24 <_fstat_r+0x1c>
 8005f22:	6023      	str	r3, [r4, #0]
 8005f24:	bd38      	pop	{r3, r4, r5, pc}
 8005f26:	bf00      	nop
 8005f28:	20002574 	.word	0x20002574

08005f2c <_isatty_r>:
 8005f2c:	b538      	push	{r3, r4, r5, lr}
 8005f2e:	4d06      	ldr	r5, [pc, #24]	@ (8005f48 <_isatty_r+0x1c>)
 8005f30:	2300      	movs	r3, #0
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	602b      	str	r3, [r5, #0]
 8005f38:	f7fb fb48 	bl	80015cc <_isatty>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_isatty_r+0x1a>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_isatty_r+0x1a>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	20002574 	.word	0x20002574

08005f4c <_sbrk_r>:
 8005f4c:	b538      	push	{r3, r4, r5, lr}
 8005f4e:	4d06      	ldr	r5, [pc, #24]	@ (8005f68 <_sbrk_r+0x1c>)
 8005f50:	2300      	movs	r3, #0
 8005f52:	4604      	mov	r4, r0
 8005f54:	4608      	mov	r0, r1
 8005f56:	602b      	str	r3, [r5, #0]
 8005f58:	f7fb fb50 	bl	80015fc <_sbrk>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_sbrk_r+0x1a>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_sbrk_r+0x1a>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	20002574 	.word	0x20002574

08005f6c <expf>:
 8005f6c:	b508      	push	{r3, lr}
 8005f6e:	ed2d 8b02 	vpush	{d8}
 8005f72:	eef0 8a40 	vmov.f32	s17, s0
 8005f76:	f000 f895 	bl	80060a4 <__ieee754_expf>
 8005f7a:	eeb0 8a40 	vmov.f32	s16, s0
 8005f7e:	eeb0 0a68 	vmov.f32	s0, s17
 8005f82:	f000 f847 	bl	8006014 <finitef>
 8005f86:	b160      	cbz	r0, 8005fa2 <expf+0x36>
 8005f88:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8005fc8 <expf+0x5c>
 8005f8c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f94:	dd0a      	ble.n	8005fac <expf+0x40>
 8005f96:	f7ff fa71 	bl	800547c <__errno>
 8005f9a:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8005fcc <expf+0x60>
 8005f9e:	2322      	movs	r3, #34	@ 0x22
 8005fa0:	6003      	str	r3, [r0, #0]
 8005fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8005fa6:	ecbd 8b02 	vpop	{d8}
 8005faa:	bd08      	pop	{r3, pc}
 8005fac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005fd0 <expf+0x64>
 8005fb0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005fb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fb8:	d5f3      	bpl.n	8005fa2 <expf+0x36>
 8005fba:	f7ff fa5f 	bl	800547c <__errno>
 8005fbe:	2322      	movs	r3, #34	@ 0x22
 8005fc0:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8005fd4 <expf+0x68>
 8005fc4:	6003      	str	r3, [r0, #0]
 8005fc6:	e7ec      	b.n	8005fa2 <expf+0x36>
 8005fc8:	42b17217 	.word	0x42b17217
 8005fcc:	7f800000 	.word	0x7f800000
 8005fd0:	c2cff1b5 	.word	0xc2cff1b5
 8005fd4:	00000000 	.word	0x00000000

08005fd8 <sqrtf>:
 8005fd8:	b508      	push	{r3, lr}
 8005fda:	ed2d 8b02 	vpush	{d8}
 8005fde:	eeb0 8a40 	vmov.f32	s16, s0
 8005fe2:	f000 f85b 	bl	800609c <__ieee754_sqrtf>
 8005fe6:	eeb4 8a48 	vcmp.f32	s16, s16
 8005fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fee:	d60c      	bvs.n	800600a <sqrtf+0x32>
 8005ff0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8006010 <sqrtf+0x38>
 8005ff4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffc:	d505      	bpl.n	800600a <sqrtf+0x32>
 8005ffe:	f7ff fa3d 	bl	800547c <__errno>
 8006002:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006006:	2321      	movs	r3, #33	@ 0x21
 8006008:	6003      	str	r3, [r0, #0]
 800600a:	ecbd 8b02 	vpop	{d8}
 800600e:	bd08      	pop	{r3, pc}
 8006010:	00000000 	.word	0x00000000

08006014 <finitef>:
 8006014:	ee10 3a10 	vmov	r3, s0
 8006018:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800601c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8006020:	bfac      	ite	ge
 8006022:	2000      	movge	r0, #0
 8006024:	2001      	movlt	r0, #1
 8006026:	4770      	bx	lr

08006028 <fminf>:
 8006028:	b508      	push	{r3, lr}
 800602a:	ed2d 8b02 	vpush	{d8}
 800602e:	eeb0 8a40 	vmov.f32	s16, s0
 8006032:	eef0 8a60 	vmov.f32	s17, s1
 8006036:	f000 f815 	bl	8006064 <__fpclassifyf>
 800603a:	b930      	cbnz	r0, 800604a <fminf+0x22>
 800603c:	eeb0 8a68 	vmov.f32	s16, s17
 8006040:	eeb0 0a48 	vmov.f32	s0, s16
 8006044:	ecbd 8b02 	vpop	{d8}
 8006048:	bd08      	pop	{r3, pc}
 800604a:	eeb0 0a68 	vmov.f32	s0, s17
 800604e:	f000 f809 	bl	8006064 <__fpclassifyf>
 8006052:	2800      	cmp	r0, #0
 8006054:	d0f4      	beq.n	8006040 <fminf+0x18>
 8006056:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800605a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800605e:	d5ed      	bpl.n	800603c <fminf+0x14>
 8006060:	e7ee      	b.n	8006040 <fminf+0x18>
	...

08006064 <__fpclassifyf>:
 8006064:	ee10 3a10 	vmov	r3, s0
 8006068:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800606c:	d00d      	beq.n	800608a <__fpclassifyf+0x26>
 800606e:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 8006072:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006076:	d30a      	bcc.n	800608e <__fpclassifyf+0x2a>
 8006078:	4b07      	ldr	r3, [pc, #28]	@ (8006098 <__fpclassifyf+0x34>)
 800607a:	1e42      	subs	r2, r0, #1
 800607c:	429a      	cmp	r2, r3
 800607e:	d908      	bls.n	8006092 <__fpclassifyf+0x2e>
 8006080:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 8006084:	4258      	negs	r0, r3
 8006086:	4158      	adcs	r0, r3
 8006088:	4770      	bx	lr
 800608a:	2002      	movs	r0, #2
 800608c:	4770      	bx	lr
 800608e:	2004      	movs	r0, #4
 8006090:	4770      	bx	lr
 8006092:	2003      	movs	r0, #3
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	007ffffe 	.word	0x007ffffe

0800609c <__ieee754_sqrtf>:
 800609c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80060a0:	4770      	bx	lr
	...

080060a4 <__ieee754_expf>:
 80060a4:	ee10 2a10 	vmov	r2, s0
 80060a8:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80060ac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80060b0:	d902      	bls.n	80060b8 <__ieee754_expf+0x14>
 80060b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80060b6:	4770      	bx	lr
 80060b8:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80060bc:	d106      	bne.n	80060cc <__ieee754_expf+0x28>
 80060be:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 80061f8 <__ieee754_expf+0x154>
 80060c2:	2900      	cmp	r1, #0
 80060c4:	bf18      	it	ne
 80060c6:	eeb0 0a67 	vmovne.f32	s0, s15
 80060ca:	4770      	bx	lr
 80060cc:	484b      	ldr	r0, [pc, #300]	@ (80061fc <__ieee754_expf+0x158>)
 80060ce:	4282      	cmp	r2, r0
 80060d0:	dd02      	ble.n	80060d8 <__ieee754_expf+0x34>
 80060d2:	2000      	movs	r0, #0
 80060d4:	f000 b8d4 	b.w	8006280 <__math_oflowf>
 80060d8:	2a00      	cmp	r2, #0
 80060da:	da05      	bge.n	80060e8 <__ieee754_expf+0x44>
 80060dc:	4a48      	ldr	r2, [pc, #288]	@ (8006200 <__ieee754_expf+0x15c>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d902      	bls.n	80060e8 <__ieee754_expf+0x44>
 80060e2:	2000      	movs	r0, #0
 80060e4:	f000 b8c6 	b.w	8006274 <__math_uflowf>
 80060e8:	4a46      	ldr	r2, [pc, #280]	@ (8006204 <__ieee754_expf+0x160>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 80060f0:	d952      	bls.n	8006198 <__ieee754_expf+0xf4>
 80060f2:	4a45      	ldr	r2, [pc, #276]	@ (8006208 <__ieee754_expf+0x164>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80060fa:	d834      	bhi.n	8006166 <__ieee754_expf+0xc2>
 80060fc:	4b43      	ldr	r3, [pc, #268]	@ (800620c <__ieee754_expf+0x168>)
 80060fe:	4413      	add	r3, r2
 8006100:	ed93 7a00 	vldr	s14, [r3]
 8006104:	4b42      	ldr	r3, [pc, #264]	@ (8006210 <__ieee754_expf+0x16c>)
 8006106:	4413      	add	r3, r2
 8006108:	ee30 7a47 	vsub.f32	s14, s0, s14
 800610c:	f1c1 0201 	rsb	r2, r1, #1
 8006110:	edd3 7a00 	vldr	s15, [r3]
 8006114:	1a52      	subs	r2, r2, r1
 8006116:	ee37 0a67 	vsub.f32	s0, s14, s15
 800611a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800611e:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8006214 <__ieee754_expf+0x170>
 8006122:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006218 <__ieee754_expf+0x174>
 8006126:	eee6 6a05 	vfma.f32	s13, s12, s10
 800612a:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 800621c <__ieee754_expf+0x178>
 800612e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006132:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006220 <__ieee754_expf+0x17c>
 8006136:	eee5 6a06 	vfma.f32	s13, s10, s12
 800613a:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8006224 <__ieee754_expf+0x180>
 800613e:	eea6 5a86 	vfma.f32	s10, s13, s12
 8006142:	eef0 6a40 	vmov.f32	s13, s0
 8006146:	eee5 6a46 	vfms.f32	s13, s10, s12
 800614a:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800614e:	ee20 5a26 	vmul.f32	s10, s0, s13
 8006152:	bb92      	cbnz	r2, 80061ba <__ieee754_expf+0x116>
 8006154:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006158:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800615c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006160:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006164:	4770      	bx	lr
 8006166:	4b30      	ldr	r3, [pc, #192]	@ (8006228 <__ieee754_expf+0x184>)
 8006168:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800622c <__ieee754_expf+0x188>
 800616c:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8006230 <__ieee754_expf+0x18c>
 8006170:	4413      	add	r3, r2
 8006172:	edd3 7a00 	vldr	s15, [r3]
 8006176:	eee0 7a07 	vfma.f32	s15, s0, s14
 800617a:	eeb0 7a40 	vmov.f32	s14, s0
 800617e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006182:	ee17 2a90 	vmov	r2, s15
 8006186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800618a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800618e:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8006234 <__ieee754_expf+0x190>
 8006192:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006196:	e7be      	b.n	8006116 <__ieee754_expf+0x72>
 8006198:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 800619c:	d20b      	bcs.n	80061b6 <__ieee754_expf+0x112>
 800619e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006238 <__ieee754_expf+0x194>
 80061a2:	ee70 6a26 	vadd.f32	s13, s0, s13
 80061a6:	eef4 6ae5 	vcmpe.f32	s13, s11
 80061aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061ae:	dd02      	ble.n	80061b6 <__ieee754_expf+0x112>
 80061b0:	ee30 0a25 	vadd.f32	s0, s0, s11
 80061b4:	4770      	bx	lr
 80061b6:	2200      	movs	r2, #0
 80061b8:	e7af      	b.n	800611a <__ieee754_expf+0x76>
 80061ba:	ee36 6a66 	vsub.f32	s12, s12, s13
 80061be:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80061c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80061c6:	bfb8      	it	lt
 80061c8:	3264      	addlt	r2, #100	@ 0x64
 80061ca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80061d6:	ee17 3a90 	vmov	r3, s15
 80061da:	bfab      	itete	ge
 80061dc:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80061e0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80061e4:	ee00 3a10 	vmovge	s0, r3
 80061e8:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 800623c <__ieee754_expf+0x198>
 80061ec:	bfbc      	itt	lt
 80061ee:	ee00 3a10 	vmovlt	s0, r3
 80061f2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80061f6:	4770      	bx	lr
 80061f8:	00000000 	.word	0x00000000
 80061fc:	42b17217 	.word	0x42b17217
 8006200:	42cff1b5 	.word	0x42cff1b5
 8006204:	3eb17218 	.word	0x3eb17218
 8006208:	3f851591 	.word	0x3f851591
 800620c:	0800d6ec 	.word	0x0800d6ec
 8006210:	0800d6e4 	.word	0x0800d6e4
 8006214:	3331bb4c 	.word	0x3331bb4c
 8006218:	b5ddea0e 	.word	0xb5ddea0e
 800621c:	388ab355 	.word	0x388ab355
 8006220:	bb360b61 	.word	0xbb360b61
 8006224:	3e2aaaab 	.word	0x3e2aaaab
 8006228:	0800d6f4 	.word	0x0800d6f4
 800622c:	3fb8aa3b 	.word	0x3fb8aa3b
 8006230:	3f317180 	.word	0x3f317180
 8006234:	3717f7d1 	.word	0x3717f7d1
 8006238:	7149f2ca 	.word	0x7149f2ca
 800623c:	0d800000 	.word	0x0d800000

08006240 <with_errnof>:
 8006240:	b510      	push	{r4, lr}
 8006242:	ed2d 8b02 	vpush	{d8}
 8006246:	eeb0 8a40 	vmov.f32	s16, s0
 800624a:	4604      	mov	r4, r0
 800624c:	f7ff f916 	bl	800547c <__errno>
 8006250:	eeb0 0a48 	vmov.f32	s0, s16
 8006254:	ecbd 8b02 	vpop	{d8}
 8006258:	6004      	str	r4, [r0, #0]
 800625a:	bd10      	pop	{r4, pc}

0800625c <xflowf>:
 800625c:	b130      	cbz	r0, 800626c <xflowf+0x10>
 800625e:	eef1 7a40 	vneg.f32	s15, s0
 8006262:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006266:	2022      	movs	r0, #34	@ 0x22
 8006268:	f7ff bfea 	b.w	8006240 <with_errnof>
 800626c:	eef0 7a40 	vmov.f32	s15, s0
 8006270:	e7f7      	b.n	8006262 <xflowf+0x6>
	...

08006274 <__math_uflowf>:
 8006274:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800627c <__math_uflowf+0x8>
 8006278:	f7ff bff0 	b.w	800625c <xflowf>
 800627c:	10000000 	.word	0x10000000

08006280 <__math_oflowf>:
 8006280:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006288 <__math_oflowf+0x8>
 8006284:	f7ff bfea 	b.w	800625c <xflowf>
 8006288:	70000000 	.word	0x70000000

0800628c <_init>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr

08006298 <_fini>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr
